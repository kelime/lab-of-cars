C51 COMPILER V9.03   I2C_PRESSURE_BOOT                                                     05/06/2015 20:00:59 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE I2C_PRESSURE_BOOT
OBJECT MODULE PLACED IN .\DP8051_Keil_903\Debug\I2C_Pressure_BOOT.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\2.1\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\I2C_Pressure_BOOT.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_903\Debug\I2C_Pressure_BOOT.l
                    -st) CD DB NOIP OT(2,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051_Keil_903\Debug\I2C_Pressure_BOOT.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: I2C_Pressure_BOOT.c  
   3          * Version 3.10
   4          *
   5          * Description:
   6          *  This file provides the source code of bootloader communication APIs for the 
   7          *  I2C component.
   8          *
   9          * Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include "I2C_Pressure.h"
  19          
  20          #if defined(CYDEV_BOOTLOADER_IO_COMP) && (0u != (I2C_Pressure_MODE & I2C_Pressure_MODE_SLAVE))  && \
  21                                                          ((CYDEV_BOOTLOADER_IO_COMP == CyBtldr_I2C_Pressure) || \
  22                                                    (CYDEV_BOOTLOADER_IO_COMP == CyBtldr_Custom_Interface))
              
              /***************************************
              *    Bootloader Variables
              ***************************************/
              
              /* Writes to this buffer */
              uint8 XDATA I2C_Pressure_slReadBuf[I2C_Pressure_BTLDR_SIZEOF_READ_BUFFER];
              
              /* Reads from this buffer */
              uint8 XDATA I2C_Pressure_slWriteBuf[I2C_Pressure_BTLDR_SIZEOF_WRITE_BUFFER];
              
              
              /***************************************
              *    Extern Bootloader Variables
              ***************************************/
              
              extern volatile uint8 I2C_Pressure_slStatus;            /* Slave Status  */
              
              /* Transmit buffer variables */
              extern volatile uint8   I2C_Pressure_slRdBufSize;       /* Slave Transmit buffer size */
              extern volatile uint8   I2C_Pressure_slRdBufIndex;      /* Slave Transmit buffer Index */
              
              /* Receive buffer variables */
              extern volatile uint8   I2C_Pressure_slWrBufSize;       /* Slave Receive buffer size */
              extern volatile uint8   I2C_Pressure_slWrBufIndex;      /* Slave Receive buffer Index */
              
              
              /*******************************************************************************
              * Function Name: I2C_Pressure_CyBtldrCommStart
              ********************************************************************************
              *
C51 COMPILER V9.03   I2C_PRESSURE_BOOT                                                     05/06/2015 20:00:59 PAGE 2   

              * Summary:
              *  Starts the communication component and enables the interrupt.
              *  The read buffer initial state is full and the read always is 0xFFu.
              *  The write buffer is clear and ready to receive a commmand.
              *
              * Parameters:
              *  None
              *
              * Return:
              *  None 
              *
              * Side Effects:
              *  This fucntion enables component interrupt. If I2C is enabled
              *  without the interrupt enabled, it could lock up the I2C bus.
              * 
              * Global variables:
              *  I2C_Pressure_slWriteBuf - used to store received command.
              *  I2C_Pressure_slReadBuf - used to store response.
              *  I2C_Pressure_slRdBufIndex - used to store current index within slave
              *  read buffer.
              *
              *******************************************************************************/
              void I2C_Pressure_CyBtldrCommStart(void) CYSMALL 
              {
                  /* Set Write buffer */
                  I2C_Pressure_SlaveInitWriteBuf(I2C_Pressure_slWriteBuf, I2C_Pressure_BTLDR_SIZEOF_WRITE_BUFFER);
                  
                  /* Set Read buffer and make it full */
                  I2C_Pressure_SlaveInitReadBuf(I2C_Pressure_slReadBuf, 0u);
                  
                  /* Enable power to I2C Module */
                  I2C_Pressure_Start();
              }
              
              
              /*******************************************************************************
              * Function Name: I2C_Pressure_CyBtldrCommStop
              ********************************************************************************
              *
              * Summary:
              *  Disables the communication component and disables the interrupt.
              *
              * Parameters:
              *  None 
              *
              * Return:
              *  None 
              *
              *******************************************************************************/
              void I2C_Pressure_CyBtldrCommStop(void) CYSMALL 
              {
                  /* Stop I2C component */
                  I2C_Pressure_Stop();
              }
              
              
              /*******************************************************************************
              * Function Name: I2C_Pressure_CyBtldrCommReset
              ********************************************************************************
              *
              * Summary:
              *  Set buffers to the initial state and reset the statuses.
C51 COMPILER V9.03   I2C_PRESSURE_BOOT                                                     05/06/2015 20:00:59 PAGE 3   

              *  The read buffer initial state is full and the read always is 0xFFu.
              *  The write buffer is clear and ready to receive a commmand.
              *
              * Parameters:
              *  None 
              *
              * Return:
              *  None
              *  
              * Global variables:
              *  I2C_Pressure_slRdBufIndex - used to store current index within slave
              *  read buffer.
              *
              *******************************************************************************/
              void I2C_Pressure_CyBtldrCommReset(void) CYSMALL 
              {
                  /* Make the Read buffer full */
                  I2C_Pressure_slRdBufSize = 0u;
                  
                  /* Reset Write buffer and Read buffer */
                  I2C_Pressure_slRdBufIndex = 0u;
                  I2C_Pressure_slWrBufIndex = 0u;
                     
                  /* Clear read and write status */
                  I2C_Pressure_slStatus = 0u;
              }
              
              
              /*******************************************************************************
              * Function Name: I2C_Pressure_CyBtldrCommWrite
              ********************************************************************************
              *
              * Summary:
              *  Transmits the status of executed command to the Host. 
              *  The function updates the I2C read buffer with response and realeases it to
              *  the host. All reads return 0xFF till the buffer will be released. All bytes
              *  are transfered by the I2C ISR.
              *  The function waits with timeout till all bytes will be read.
              *  After exist this function the reads return 0xFF.
              *
              * Parameters:
              *  Data:     pointer to data buffer with response command.
              *  Size:     number of bytes required to be transmitted.
              *  Count:    actual size of data was transmitted.
              *  TimeOut:  timeout value in tries of 10uS.
              *
              * Return:
              *  Status of transmit operation.
              * 
              * Global variables:
              *  I2C_Pressure_slReadBuf - used to store response.
              *  I2C_Pressure_slRdBufIndex - used to store current index within slave
              *  read buffer.
              *
              *******************************************************************************/
              cystatus I2C_Pressure_CyBtldrCommWrite(uint8 * Data, uint16 size, uint16 * count, uint8 timeOut) CYSMALL
                       
              {
                  cystatus status = CYRET_BAD_PARAM;  /* Initialize as bad parameters */
                  uint16 timeoutMs;                   /* Timeout in mS */
                  
                  /* Check that correct buffer is provided by bootloader */
C51 COMPILER V9.03   I2C_PRESSURE_BOOT                                                     05/06/2015 20:00:59 PAGE 4   

                  if ((NULL != Data) && (size > 0u))
                  {
                      timeoutMs = 10u * timeOut;  /* To be in 10mS units, really check 1mS * 10 */
                      status = CYRET_TIMEOUT;     /* Fail due timeout */
                      *count = size;              /* The size only be transmitted, all other will be 0xFFu */
                      
                      /* Copy response to the buffer */
                      memcpy(I2C_Pressure_slReadBuf, Data, size);
                      
                      /* The buffer is free now */
                      I2C_Pressure_slRdBufSize = (uint8) size;
                      
                      /* Wait till response will be read */
                      while (0u != timeoutMs--)
                      {
                          /* Check if host complete a reading */
                          if (I2C_Pressure_slRdBufIndex == size)
                          {
                              I2C_Pressure_slRdBufSize = 0u;
                              I2C_Pressure_slRdBufIndex = 0u;
                              
                              status = CYRET_SUCCESS;
                              break;
                          }
                          
                          CyDelay(1u); /* Wait 1mS for data to become available */
                      }
                  }
                  
                  return (status);
              }
              
              
              /*******************************************************************************
              * Function Name: I2C_Pressure_CyBtldrCommRead
              ********************************************************************************
              *
              * Summary:
              *  Receives the command from the Host.
              *  All bytes are received by the I2C ISR and stored in internal I2C buffer. The
              *  function checks status with timeout to detemine the end of transfer and
              *  then copy data to bootloader buffer.
              *  After exist this function the I2C ISR is able to receive more data.
              *
              * Parameters:
              *  Data:     pointer to data buffer to store command.
              *  Size:     maximum number of bytes which could to be passed back.
              *  Count:    actual size of data was received.
              *  TimeOut:  timeout value in tries of 10uS.
              *
              * Return:
              *  Status of receive operation.
              *
              * Global variables:
              *  I2C_Pressure_slWriteBuf - used to store received command.
              *
              *******************************************************************************/
              cystatus I2C_Pressure_CyBtldrCommRead(uint8 * Data, uint16 size, uint16 * count, uint8 timeOut) CYSMALL
                       
              {
                  cystatus status = CYRET_BAD_PARAM;  /* Initialize as bad parameters */
                  uint16 timeoutMs;                   /* Timeout in mS */
C51 COMPILER V9.03   I2C_PRESSURE_BOOT                                                     05/06/2015 20:00:59 PAGE 5   

                  uint8 byteCount;                    /* Number of bytes that the host has been written */
                  
                  /* Check that correct buffer is provided by bootloader */
                  if ((NULL != Data) && (size > 0u))
                  {
                      timeoutMs = 10u * timeOut;  /* To be in 10mS units, really check 1mS * 10 */
                      status = CYRET_TIMEOUT;     /* Fail due timeout */
                  
                      /* Wait for Command from the host */
                      while (0u != timeoutMs--)
                      {
                          /* Check if the host complete write */
                          if (0u != (I2C_Pressure_slStatus & I2C_Pressure_SSTAT_WR_CMPLT))
                          {
                              /* How many bytes the host has been written */
                              byteCount = I2C_Pressure_slWrBufIndex;
                              *count = (uint16) byteCount;
                              
                              /* Copy to command for the host to bootloader buffer */
                              memcpy(Data, I2C_Pressure_slWriteBuf,  I2C_Pressure_MIN_UINT16(byteCount, size));
                              
                              /* Clear I2C write buffer and status */
                              I2C_Pressure_slStatus = 0u;
                              I2C_Pressure_slWrBufIndex = 0u;
                              
                              status = CYRET_SUCCESS;
                              break;
                          }
                          
                          CyDelay(1u); /* Wait 1mS for data to become available */
                      }
                  }
                  
                  return (status);
              }
              
              #endif /* End if (CYDEV_BOOTLOADER_IO_COMP) && (I2C_Pressure_MODE == I2C_Pressure_MODE_SLAVE) && \
                                                             ((CYDEV_BOOTLOADER_IO_COMP == CyBtldr_I2C_Pressure) || \
                                                               (CYDEV_BOOTLOADER_IO_COMP == CyBtldr_Custom_Interface)) *
             -/
 279          
 280          
 281          /* [] END OF FILE */
C51 COMPILER V9.03   I2C_PRESSURE_BOOT                                                     05/06/2015 20:00:59 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE




MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
