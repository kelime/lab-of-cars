C51 COMPILER V9.03   TIMER_1                                                               03/06/2015 22:15:43 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE TIMER_1
OBJECT MODULE PLACED IN .\DP8051_Keil_903\Debug\Timer_1.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\2.1\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\Timer_1.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_903\Debug\Timer_1.lst) CD DB NOIP OT(2,
                    -SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051_Keil_903\Debug\Timer_1.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: Timer_1.c
   3          * Version 2.30
   4          *
   5          * Description:
   6          *  The Timer component consists of a 8, 16, 24 or 32-bit timer with
   7          *  a selectable period between 2 and 2^Width - 1.  The timer may free run
   8          *  or be used as a capture timer as well.  The capture can be initiated
   9          *  by a positive or negative edge signal as well as via software.
  10          *  A trigger input can be programmed to enable the timer on rising edge
  11          *  falling edge, either edge or continous run.
  12          *  Interrupts may be generated due to a terminal count condition
  13          *  or a capture event.
  14          *
  15          * Note:
  16          *
  17          ********************************************************************************
  18          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  19          * You may use this file only in accordance with the license, terms, conditions,
  20          * disclaimers, and limitations in the end user license agreement accompanying
  21          * the software package with which this file was provided.
  22          ********************************************************************************/
  23          
  24          #include "Timer_1.h"
  25          
  26          uint8 Timer_1_initVar = 0u;
  27          
  28          
  29          /*******************************************************************************
  30          * Function Name: Timer_1_Init
  31          ********************************************************************************
  32          *
  33          * Summary:
  34          *  Initialize to the schematic state
  35          *
  36          * Parameters:
  37          *  void
  38          *
  39          * Return:
  40          *  void
  41          *
  42          *******************************************************************************/
  43          void Timer_1_Init(void) 
  44          {
  45   1          #if(!Timer_1_UsingFixedFunction)
                          /* Interrupt State Backup for Critical Region*/
                          uint8 Timer_1_interruptState;
                  #endif /* Interrupt state back up for Fixed Function only */
  49   1      
  50   1          #if (Timer_1_UsingFixedFunction)
  51   1              /* Clear all bits but the enable bit (if it's already set) for Timer operation */
  52   1              Timer_1_CONTROL &= Timer_1_CTRL_ENABLE;
  53   1      
C51 COMPILER V9.03   TIMER_1                                                               03/06/2015 22:15:43 PAGE 2   

  54   1              /* Clear the mode bits for continuous run mode */
  55   1              #if (CY_PSOC5A)
                          Timer_1_CONTROL2 &= ~Timer_1_CTRL_MODE_MASK;
                      #endif /* Clear bits in CONTROL2 only in PSOC5A */
  58   1      
  59   1              #if (CY_PSOC3 || CY_PSOC5LP)
  60   1                  Timer_1_CONTROL3 &= ~Timer_1_CTRL_MODE_MASK;
  61   1              #endif /* CONTROL3 register exists only in PSoC3 OR PSoC5LP */
  62   1      
  63   1              /* Check if One Shot mode is enabled i.e. RunMode !=0*/
  64   1              #if (Timer_1_RunModeUsed != 0x0u)
                          /* Set 3rd bit of Control register to enable one shot mode */
                          Timer_1_CONTROL |= 0x04u;
                      #endif /* One Shot enabled only when RunModeUsed is not Continuous*/
  68   1      
  69   1              #if (Timer_1_RunModeUsed == 2)
                          #if (CY_PSOC5A)
                              /* Set last 2 bits of control2 register if one shot(halt on
                              interrupt) is enabled*/
                              Timer_1_CONTROL2 |= 0x03u;
                          #endif /* Set One-Shot Halt on Interrupt bit in CONTROL2 for PSoC5A */
              
                          #if (CY_PSOC3 || CY_PSOC5LP)
                              /* Set last 2 bits of control3 register if one shot(halt on
                              interrupt) is enabled*/
                              Timer_1_CONTROL3 |= 0x03u;
                          #endif /* Set One-Shot Halt on Interrupt bit in CONTROL3 for PSoC3 or PSoC5LP */
              
                      #endif /* Remove section if One Shot Halt on Interrupt is not enabled */
  83   1      
  84   1              #if (Timer_1_UsingHWEnable != 0)
                          #if (CY_PSOC5A)
                              /* Set the default Run Mode of the Timer to Continuous */
                              Timer_1_CONTROL2 |= Timer_1_CTRL_MODE_PULSEWIDTH;
                          #endif /* Set Continuous Run Mode in CONTROL2 for PSoC5A */
              
                          #if (CY_PSOC3 || CY_PSOC5LP)
                              /* Clear and Set ROD and COD bits of CFG2 register */
                              Timer_1_CONTROL3 &= ~Timer_1_CTRL_RCOD_MASK;
                              Timer_1_CONTROL3 |= Timer_1_CTRL_RCOD;
              
                              /* Clear and Enable the HW enable bit in CFG2 register */
                              Timer_1_CONTROL3 &= ~Timer_1_CTRL_ENBL_MASK;
                              Timer_1_CONTROL3 |= Timer_1_CTRL_ENBL;
              
                              /* Set the default Run Mode of the Timer to Continuous */
                              Timer_1_CONTROL3 |= Timer_1_CTRL_MODE_CONTINUOUS;
                          #endif /* Set Continuous Run Mode in CONTROL3 for PSoC3ES3 or PSoC5A */
              
                      #endif /* Configure Run Mode with hardware enable */
 104   1      
 105   1              /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 106   1              Timer_1_RT1 &= ~Timer_1_RT1_MASK;
 107   1              Timer_1_RT1 |= Timer_1_SYNC;
 108   1      
 109   1              /*Enable DSI Sync all all inputs of the Timer*/
 110   1              Timer_1_RT1 &= ~(Timer_1_SYNCDSI_MASK);
 111   1              Timer_1_RT1 |= Timer_1_SYNCDSI_EN;
 112   1      
 113   1              /* Set the IRQ to use the status register interrupts */
 114   1              Timer_1_CONTROL2 |= Timer_1_CTRL2_IRQ_SEL;
 115   1          #endif /* Configuring registers of fixed function implementation */
C51 COMPILER V9.03   TIMER_1                                                               03/06/2015 22:15:43 PAGE 3   

 116   1      
 117   1          /* Set Initial values from Configuration */
 118   1          Timer_1_WritePeriod(Timer_1_INIT_PERIOD);
 119   1          Timer_1_WriteCounter(Timer_1_INIT_PERIOD);
 120   1      
 121   1          #if (Timer_1_UsingHWCaptureCounter)/* Capture counter is enabled */
                      Timer_1_CAPTURE_COUNT_CTRL |= Timer_1_CNTR_ENABLE;
                      Timer_1_SetCaptureCount(Timer_1_INIT_CAPTURE_COUNT);
                  #endif /* Configure capture counter value */
 125   1      
 126   1          #if (!Timer_1_UsingFixedFunction)
                      #if (Timer_1_SoftwareCaptureMode)
                          Timer_1_SetCaptureMode(Timer_1_INIT_CAPTURE_MODE);
                      #endif /* Set Capture Mode for UDB implementation if capture mode is software controlled */
              
                      #if (Timer_1_SoftwareTriggerMode)
                          if (!(Timer_1_CONTROL & Timer_1__B_TIMER__TM_SOFTWARE))
                          {
                              Timer_1_SetTriggerMode(Timer_1_INIT_TRIGGER_MODE);
                          }
                      #endif /* Set trigger mode for UDB Implementation if trigger mode is software controlled */
              
                      /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region critical*/
                      /* Enter Critical Region*/
                      Timer_1_interruptState = CyEnterCriticalSection();
              
                      /* Use the interrupt output of the status register for IRQ output */
                      Timer_1_STATUS_AUX_CTRL |= Timer_1_STATUS_ACTL_INT_EN_MASK;
              
                      /* Exit Critical Region*/
                      CyExitCriticalSection(Timer_1_interruptState);
              
                      #if (Timer_1_EnableTriggerMode)
                          Timer_1_EnableTrigger();
                      #endif /* Set Trigger enable bit for UDB implementation in the control register*/
              
                      #if (Timer_1_InterruptOnCaptureCount)
                           #if (!Timer_1_ControlRegRemoved)
                              Timer_1_SetInterruptCount(Timer_1_INIT_INT_CAPTURE_COUNT);
                          #endif /* Set interrupt count in control register if control register is not removed */
                      #endif /*Set interrupt count in UDB implementation if interrupt count feature is checked.*/
              
                      Timer_1_ClearFIFO();
                  #endif /* Configure additional features of UDB implementation */
 160   1      
 161   1          Timer_1_SetInterruptMode(Timer_1_INIT_INTERRUPT_MODE);
 162   1      }
 163          
 164          
 165          /*******************************************************************************
 166          * Function Name: Timer_1_Enable
 167          ********************************************************************************
 168          *
 169          * Summary:
 170          *  Enable the Timer
 171          *
 172          * Parameters:
 173          *  void
 174          *
 175          * Return:
 176          *  void
 177          *
C51 COMPILER V9.03   TIMER_1                                                               03/06/2015 22:15:43 PAGE 4   

 178          *******************************************************************************/
 179          void Timer_1_Enable(void) 
 180          {
 181   1          /* Globally Enable the Fixed Function Block chosen */
 182   1          #if (Timer_1_UsingFixedFunction)
 183   1              Timer_1_GLOBAL_ENABLE |= Timer_1_BLOCK_EN_MASK;
 184   1              Timer_1_GLOBAL_STBY_ENABLE |= Timer_1_BLOCK_STBY_EN_MASK;
 185   1          #endif /* Set Enable bit for enabling Fixed function timer*/
 186   1      
 187   1          /* Remove assignment if control register is removed */
 188   1          #if (!Timer_1_ControlRegRemoved || Timer_1_UsingFixedFunction)
 189   1              Timer_1_CONTROL |= Timer_1_CTRL_ENABLE;
 190   1          #endif /* Remove assignment if control register is removed */
 191   1      }
 192          
 193          
 194          /*******************************************************************************
 195          * Function Name: Timer_1_Start
 196          ********************************************************************************
 197          *
 198          * Summary:
 199          *  The start function initializes the timer with the default values, the
 200          *  enables the timerto begin counting.  It does not enable interrupts,
 201          *  the EnableInt command should be called if interrupt generation is required.
 202          *
 203          * Parameters:
 204          *  void
 205          *
 206          * Return:
 207          *  void
 208          *
 209          * Global variables:
 210          *  Timer_1_initVar: Is modified when this function is called for the
 211          *   first time. Is used to ensure that initialization happens only once.
 212          *
 213          *******************************************************************************/
 214          void Timer_1_Start(void) 
 215          {
 216   1          if(Timer_1_initVar == 0u)
 217   1          {
 218   2              Timer_1_Init();
 219   2      
 220   2              Timer_1_initVar = 1u;   /* Clear this bit for Initialization */
 221   2          }
 222   1      
 223   1          /* Enable the Timer */
 224   1          Timer_1_Enable();
 225   1      }
 226          
 227          
 228          /*******************************************************************************
 229          * Function Name: Timer_1_Stop
 230          ********************************************************************************
 231          *
 232          * Summary:
 233          *  The stop function halts the timer, but does not change any modes or disable
 234          *  interrupts.
 235          *
 236          * Parameters:
 237          *  void
 238          *
 239          * Return:
C51 COMPILER V9.03   TIMER_1                                                               03/06/2015 22:15:43 PAGE 5   

 240          *  void
 241          *
 242          * Side Effects: If the Enable mode is set to Hardware only then this function
 243          *               has no effect on the operation of the timer.
 244          *
 245          *******************************************************************************/
 246          void Timer_1_Stop(void) 
 247          {
 248   1          /* Disable Timer */
 249   1          #if(!Timer_1_ControlRegRemoved || Timer_1_UsingFixedFunction)
 250   1              Timer_1_CONTROL &= ~Timer_1_CTRL_ENABLE;
 251   1          #endif /* Remove assignment if control register is removed */
 252   1      
 253   1          /* Globally disable the Fixed Function Block chosen */
 254   1          #if (Timer_1_UsingFixedFunction)
 255   1              Timer_1_GLOBAL_ENABLE &= ~Timer_1_BLOCK_EN_MASK;
 256   1              Timer_1_GLOBAL_STBY_ENABLE &= ~Timer_1_BLOCK_STBY_EN_MASK;
 257   1          #endif /* Disable global enable for the Timer Fixed function block to stop the Timer*/
 258   1      }
 259          
 260          
 261          /*******************************************************************************
 262          * Function Name: Timer_1_SetInterruptMode
 263          ********************************************************************************
 264          *
 265          * Summary:
 266          *  This function selects which of the interrupt inputs may cause an interrupt.
 267          *  The twosources are caputure and terminal.  One, both or neither may
 268          *  be selected.
 269          *
 270          * Parameters:
 271          *  interruptMode:   This parameter is used to enable interrups on either/or
 272          *                   terminal count or capture.
 273          *
 274          * Return:
 275          *  void
 276          *
 277          *******************************************************************************/
 278          void Timer_1_SetInterruptMode(uint8 interruptMode) 
 279          {
 280   1          Timer_1_STATUS_MASK = interruptMode;
 281   1      }
 282          
 283          
 284          /*******************************************************************************
 285          * Function Name: Timer_1_SoftwareCapture
 286          ********************************************************************************
 287          *
 288          * Summary:
 289          *  This function forces a capture independent of the capture signal.
 290          *
 291          * Parameters:
 292          *  void
 293          *
 294          * Return:
 295          *  void
 296          *
 297          * Side Effects:
 298          *  An existing hardware capture could be overwritten.
 299          *
 300          *******************************************************************************/
 301          void Timer_1_SoftwareCapture(void) 
C51 COMPILER V9.03   TIMER_1                                                               03/06/2015 22:15:43 PAGE 6   

 302          {
 303   1          /* Generate a software capture by reading the counter register */
 304   1          CY_GET_REG8(Timer_1_COUNTER_LSB_PTR);
 305   1          /* Capture Data is now in the FIFO */
 306   1      }
 307          
 308          
 309          /*******************************************************************************
 310          * Function Name: Timer_1_ReadStatusRegister
 311          ********************************************************************************
 312          *
 313          * Summary:
 314          *  Reads the status register and returns it's state. This function should use
 315          *  defined types for the bit-field information as the bits in this register may
 316          *  be permuteable.
 317          *
 318          * Parameters:
 319          *  void
 320          *
 321          * Return:
 322          *  The contents of the status register
 323          *
 324          * Side Effects:
 325          *  Status register bits may be clear on read.
 326          *
 327          *******************************************************************************/
 328          uint8   Timer_1_ReadStatusRegister(void) 
 329          {
 330   1          return Timer_1_STATUS;
 331   1      }
 332          
 333          
 334          #if (!Timer_1_ControlRegRemoved) /* Remove API if control register is removed */
 335          
 336          
 337          /*******************************************************************************
 338          * Function Name: Timer_1_ReadControlRegister
 339          ********************************************************************************
 340          *
 341          * Summary:
 342          *  Reads the control register and returns it's value.
 343          *
 344          * Parameters:
 345          *  void
 346          *
 347          * Return:
 348          *  The contents of the control register
 349          *
 350          *******************************************************************************/
 351          uint8 Timer_1_ReadControlRegister(void) 
 352          {
 353   1          return Timer_1_CONTROL;
 354   1      }
 355          
 356          
 357          /*******************************************************************************
 358          * Function Name: Timer_1_WriteControlRegister
 359          ********************************************************************************
 360          *
 361          * Summary:
 362          *  Sets the bit-field of the control register.
 363          *
C51 COMPILER V9.03   TIMER_1                                                               03/06/2015 22:15:43 PAGE 7   

 364          * Parameters:
 365          *  control: The contents of the control register
 366          *
 367          * Return:
 368          *
 369          *******************************************************************************/
 370          void Timer_1_WriteControlRegister(uint8 control) 
 371          {
 372   1          Timer_1_CONTROL = control;
 373   1      }
 374          #endif /* Remove API if control register is removed */
 375          
 376          
 377          /*******************************************************************************
 378          * Function Name: Timer_1_ReadPeriod
 379          ********************************************************************************
 380          *
 381          * Summary:
 382          *  This function returns the current value of the Period.
 383          *
 384          * Parameters:
 385          *  void
 386          *
 387          * Return:
 388          *  The present value of the counter.
 389          *
 390          *******************************************************************************/
 391          uint8 Timer_1_ReadPeriod(void) 
 392          {
 393   1         return ( CY_GET_REG8(Timer_1_PERIOD_LSB_PTR) );
 394   1      }
 395          
 396          
 397          /*******************************************************************************
 398          * Function Name: Timer_1_WritePeriod
 399          ********************************************************************************
 400          *
 401          * Summary:
 402          *  This function is used to change the period of the counter.  The new period
 403          *  will be loaded the next time terminal count is detected.
 404          *
 405          * Parameters:
 406          *  period: This value may be between 1 and (2^Resolution)-1.  A value of 0 will
 407          *          result in the counter remaining at zero.
 408          *
 409          * Return:
 410          *  void
 411          *
 412          *******************************************************************************/
 413          void Timer_1_WritePeriod(uint8 period) 
 414          {
 415   1          #if(Timer_1_UsingFixedFunction)
 416   1              uint16 period_temp = (uint16)period;
 417   1              CY_SET_REG16(Timer_1_PERIOD_LSB_PTR, period_temp);
 418   1          #else
                      CY_SET_REG8(Timer_1_PERIOD_LSB_PTR, period);
                  #endif /*Write Period value with appropriate resolution suffix depending on UDB or fixed function impl
             -ementation */
 421   1      }
 422          
 423          
 424          /*******************************************************************************
C51 COMPILER V9.03   TIMER_1                                                               03/06/2015 22:15:43 PAGE 8   

 425          * Function Name: Timer_1_ReadCapture
 426          ********************************************************************************
 427          *
 428          * Summary:
 429          *  This function returns the last value captured.
 430          *
 431          * Parameters:
 432          *  void
 433          *
 434          * Return:
 435          *  Present Capture value.
 436          *
 437          *******************************************************************************/
 438          uint8 Timer_1_ReadCapture(void) 
 439          {
 440   1         return ( CY_GET_REG8(Timer_1_CAPTURE_LSB_PTR) );
 441   1      }
 442          
 443          
 444          /*******************************************************************************
 445          * Function Name: Timer_1_WriteCounter
 446          ********************************************************************************
 447          *
 448          * Summary:
 449          *  This funtion is used to set the counter to a specific value
 450          *
 451          * Parameters:
 452          *  counter:  New counter value.
 453          *
 454          * Return:
 455          *  void
 456          *
 457          *******************************************************************************/
 458          void Timer_1_WriteCounter(uint8 counter) \
 459                                             
 460          {
 461   1         #if(Timer_1_UsingFixedFunction)
 462   1              counter = counter;
 463   1              /* This functionality is removed until a FixedFunction HW update to
 464   1               * allow this register to be written
 465   1               */
 466   1              /* uint16 counter_temp = (uint16)counter;
 467   1               * CY_SET_REG16(Timer_1_COUNTER_LSB_PTR, counter_temp);
 468   1               */
 469   1          #else
                      CY_SET_REG8(Timer_1_COUNTER_LSB_PTR, counter);
                  #endif /* Set Write Counter only for the UDB implementation (Write Counter not available in fixed func
             -tion Timer */
 472   1      }
 473          
 474          
 475          /*******************************************************************************
 476          * Function Name: Timer_1_ReadCounter
 477          ********************************************************************************
 478          *
 479          * Summary:
 480          *  This function returns the current counter value.
 481          *
 482          * Parameters:
 483          *  void
 484          *
 485          * Return:
C51 COMPILER V9.03   TIMER_1                                                               03/06/2015 22:15:43 PAGE 9   

 486          *  Present compare value.
 487          *
 488          *******************************************************************************/
 489          uint8 Timer_1_ReadCounter(void) 
 490          {
 491   1      
 492   1          /* Force capture by reading Accumulator */
 493   1          /* Must first do a software capture to be able to read the counter */
 494   1          /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 495   1          CY_GET_REG8(Timer_1_COUNTER_LSB_PTR);
 496   1      
 497   1          /* Read the data from the FIFO (or capture register for Fixed Function)*/
 498   1          return (CY_GET_REG8(Timer_1_CAPTURE_LSB_PTR));
 499   1      }
 500          
 501          
 502          #if(!Timer_1_UsingFixedFunction) /* UDB Specific Functions */
              
              /*******************************************************************************
               * The functions below this point are only available using the UDB
               * implementation.  If a feature is selected, then the API is enabled.
               ******************************************************************************/
              
              
              #if (Timer_1_SoftwareCaptureMode)
              
              
              /*******************************************************************************
              * Function Name: Timer_1_SetCaptureMode
              ********************************************************************************
              *
              * Summary:
              *  This function sets the capture mode to either rising or falling edge.
              *
              * Parameters:
              *  captureMode: This parameter sets the capture mode of the UDB capture feature
              *  The parameter values are defined using the
              *  #define Timer_1__B_TIMER__CM_NONE 0
              #define Timer_1__B_TIMER__CM_RISINGEDGE 1
              #define Timer_1__B_TIMER__CM_FALLINGEDGE 2
              #define Timer_1__B_TIMER__CM_EITHEREDGE 3
              #define Timer_1__B_TIMER__CM_SOFTWARE 4
               identifiers
              *  The following are the possible values of the parameter
              *  Timer_1__B_TIMER__CM_NONE        - Set Capture mode to None
              *  Timer_1__B_TIMER__CM_RISINGEDGE  - Rising edge of Capture input
              *  Timer_1__B_TIMER__CM_FALLINGEDGE - Falling edge of Capture input
              *  Timer_1__B_TIMER__CM_EITHEREDGE  - Either edge of Capture input
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void Timer_1_SetCaptureMode(uint8 captureMode) 
              {
                  /* This must only set to two bits of the control register associated */
                  captureMode = (captureMode << Timer_1_CTRL_CAP_MODE_SHIFT);
                  captureMode &= (Timer_1_CTRL_CAP_MODE_MASK);
              
                  /* Clear the Current Setting */
                  Timer_1_CONTROL &= ~Timer_1_CTRL_CAP_MODE_MASK;
              
C51 COMPILER V9.03   TIMER_1                                                               03/06/2015 22:15:43 PAGE 10  

                  /* Write The New Setting */
                  Timer_1_CONTROL |= captureMode;
              }
              #endif /* Remove API if Capture Mode is not Software Controlled */
              
              
              #if (Timer_1_SoftwareTriggerMode)
              
              
              /*******************************************************************************
              * Function Name: Timer_1_SetTriggerMode
              ********************************************************************************
              *
              * Summary:
              *  This function sets the trigger input mode
              *
              * Parameters:
              *  triggerMode: Pass one of the pre-defined Trigger Modes (except Software)
                  #define Timer_1__B_TIMER__TM_NONE 0x00u
                  #define Timer_1__B_TIMER__TM_RISINGEDGE 0x04u
                  #define Timer_1__B_TIMER__TM_FALLINGEDGE 0x08u
                  #define Timer_1__B_TIMER__TM_EITHEREDGE 0x0Cu
                  #define Timer_1__B_TIMER__TM_SOFTWARE 0x10u
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void Timer_1_SetTriggerMode(uint8 triggerMode) 
              {
                  /* This must only set to two bits of the control register associated */
                  triggerMode &= Timer_1_CTRL_TRIG_MODE_MASK;
              
                  /* Clear the Current Setting */
                  Timer_1_CONTROL &= ~Timer_1_CTRL_TRIG_MODE_MASK;
              
                  /* Write The New Setting */
                  Timer_1_CONTROL |= (triggerMode | Timer_1__B_TIMER__TM_SOFTWARE);
              
              }
              #endif /* Remove API if Trigger Mode is not Software Controlled */
              
              #if (Timer_1_EnableTriggerMode)
              
              
              /*******************************************************************************
              * Function Name: Timer_1_EnableTrigger
              ********************************************************************************
              *
              * Summary:
              *  Sets the control bit enabling Hardware Trigger mode
              *
              * Parameters:
              *  void
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void Timer_1_EnableTrigger(void) 
              {
                  #if (!Timer_1_ControlRegRemoved)   /* Remove assignment if control register is removed */
C51 COMPILER V9.03   TIMER_1                                                               03/06/2015 22:15:43 PAGE 11  

                      Timer_1_CONTROL |= Timer_1_CTRL_TRIG_EN;
                  #endif /* Remove code section if control register is not used */
              }
              
              
              /*******************************************************************************
              * Function Name: Timer_1_DisableTrigger
              ********************************************************************************
              *
              * Summary:
              *  Clears the control bit enabling Hardware Trigger mode
              *
              * Parameters:
              *  void
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void Timer_1_DisableTrigger(void) 
              {
                  #if (!Timer_1_ControlRegRemoved)   /* Remove assignment if control register is removed */
                      Timer_1_CONTROL &= ~Timer_1_CTRL_TRIG_EN;
                  #endif /* Remove code section if control register is not used */
              }
              #endif /* Remove API is Trigger Mode is set to None */
              
              
              #if(Timer_1_InterruptOnCaptureCount)
              #if (!Timer_1_ControlRegRemoved)   /* Remove API if control register is removed */
              
              
              /*******************************************************************************
              * Function Name: Timer_1_SetInterruptCount
              ********************************************************************************
              *
              * Summary:
              *  This function sets the capture count before an interrupt is triggered.
              *
              * Parameters:
              *  interruptCount:  A value between 0 and 3 is valid.  If the value is 0, then
              *                   an interrupt will occur each time a capture occurs.
              *                   A value of 1 to 3 will cause the interrupt
              *                   to delay by the same number of captures.
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void Timer_1_SetInterruptCount(uint8 interruptCount) 
              {
                  /* This must only set to two bits of the control register associated */
                  interruptCount &= Timer_1_CTRL_INTCNT_MASK;
              
                  /* Clear the Current Setting */
                  Timer_1_CONTROL &= ~Timer_1_CTRL_INTCNT_MASK;
                  /* Write The New Setting */
                  Timer_1_CONTROL |= interruptCount;
              }
              #endif /* Remove API if control register is removed */
              #endif /* Timer_1_InterruptOnCaptureCount */
              
C51 COMPILER V9.03   TIMER_1                                                               03/06/2015 22:15:43 PAGE 12  

              
              #if (Timer_1_UsingHWCaptureCounter)
              
              
              /*******************************************************************************
              * Function Name: Timer_1_SetCaptureCount
              ********************************************************************************
              *
              * Summary:
              *  This function sets the capture count
              *
              * Parameters:
              *  captureCount: A value between 2 and 127 inclusive is valid.  A value of 1
              *                to 127 will cause the interrupt to delay by the same number of
              *                captures.
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void Timer_1_SetCaptureCount(uint8 captureCount) 
              {
                  Timer_1_CAP_COUNT = captureCount;
              }
              
              
              /*******************************************************************************
              * Function Name: Timer_1_ReadCaptureCount
              ********************************************************************************
              *
              * Summary:
              *  This function reads the capture count setting
              *
              * Parameters:
              *  void
              *
              * Return:
              *  Returns the Capture Count Setting
              *
              *******************************************************************************/
              uint8 Timer_1_ReadCaptureCount(void) 
              {
                  return Timer_1_CAP_COUNT ;
              }
              #endif /* Timer_1_UsingHWCaptureCounter */
              
              
              /*******************************************************************************
              * Function Name: Timer_1_ClearFIFO
              ********************************************************************************
              *
              * Summary:
              *  This function clears all capture data from the capture FIFO
              *
              * Parameters:
              *  void
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void Timer_1_ClearFIFO(void) 
C51 COMPILER V9.03   TIMER_1                                                               03/06/2015 22:15:43 PAGE 13  

              {
                  while(Timer_1_ReadStatusRegister() & Timer_1_STATUS_FIFONEMP)
                  {
                      Timer_1_ReadCapture();
                  }
              }
              
              #endif /* UDB Specific Functions */
 742          
 743          
 744          /* [] END OF FILE */
C51 COMPILER V9.03   TIMER_1                                                               03/06/2015 22:15:43 PAGE 14  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Timer_1_Init (BEGIN)
                                           ; SOURCE LINE # 43
                                           ; SOURCE LINE # 44
                                           ; SOURCE LINE # 52
0000 904F00            MOV     DPTR,#04F00H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5401              ANL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 60
000B 904F02            MOV     DPTR,#04F02H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54FC              ANL     A,#0FCH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
0016 904F0B            MOV     DPTR,#04F0BH
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 54CF              ANL     A,#0CFH
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
0021 904F0B            MOV     DPTR,#04F0BH
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 4430              ORL     A,#030H
0029 FF                MOV     R7,A
002A EF                MOV     A,R7
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 110
002C 904F0B            MOV     DPTR,#04F0BH
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 54F0              ANL     A,#0F0H
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 111
0037 904F0B            MOV     DPTR,#04F0BH
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C EF                MOV     A,R7
003D 440F              ORL     A,#0FH
003F FF                MOV     R7,A
0040 EF                MOV     A,R7
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 114
0042 904F01            MOV     DPTR,#04F01H
C51 COMPILER V9.03   TIMER_1                                                               03/06/2015 22:15:43 PAGE 15  

0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 EF                MOV     A,R7
0048 4401              ORL     A,#01H
004A FF                MOV     R7,A
004B EF                MOV     A,R7
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 118
004D 7FFF              MOV     R7,#0FFH
004F 120000      R     LCALL   _Timer_1_WritePeriod
                                           ; SOURCE LINE # 119
0052 7FFF              MOV     R7,#0FFH
0054 120000      R     LCALL   _Timer_1_WriteCounter
                                           ; SOURCE LINE # 161
0057 7F00              MOV     R7,#00H
0059 120000      R     LCALL   _Timer_1_SetInterruptMode
                                           ; SOURCE LINE # 162
005C 22                RET     
             ; FUNCTION Timer_1_Init (END)

             ; FUNCTION Timer_1_Enable (BEGIN)
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 183
0000 9043A3            MOV     DPTR,#043A3H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4401              ORL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 184
000B 9043B3            MOV     DPTR,#043B3H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 4401              ORL     A,#01H
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 189
0016 904F00            MOV     DPTR,#04F00H
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 4401              ORL     A,#01H
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 191
0021 22                RET     
             ; FUNCTION Timer_1_Enable (END)

             ; FUNCTION Timer_1_Start (BEGIN)
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
0000 900000      R     MOV     DPTR,#Timer_1_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
C51 COMPILER V9.03   TIMER_1                                                               03/06/2015 22:15:43 PAGE 16  

0006 7009              JNZ     ?C0003
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
0008 120000      R     LCALL   Timer_1_Init
                                           ; SOURCE LINE # 220
000B 900000      R     MOV     DPTR,#Timer_1_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 221
0011         ?C0003:
                                           ; SOURCE LINE # 224
0011 120000      R     LCALL   Timer_1_Enable
                                           ; SOURCE LINE # 225
0014 22                RET     
             ; FUNCTION Timer_1_Start (END)

             ; FUNCTION Timer_1_Stop (BEGIN)
                                           ; SOURCE LINE # 246
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 250
0000 904F00            MOV     DPTR,#04F00H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 255
000B 9043A3            MOV     DPTR,#043A3H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54FE              ANL     A,#0FEH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 256
0016 9043B3            MOV     DPTR,#043B3H
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 54FE              ANL     A,#0FEH
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
0021 22                RET     
             ; FUNCTION Timer_1_Stop (END)

             ; FUNCTION _Timer_1_SetInterruptMode (BEGIN)
                                           ; SOURCE LINE # 278
0000 900000      R     MOV     DPTR,#interruptMode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 279
                                           ; SOURCE LINE # 280
0005 900000      R     MOV     DPTR,#interruptMode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 904F03            MOV     DPTR,#04F03H
000D EF                MOV     A,R7
C51 COMPILER V9.03   TIMER_1                                                               03/06/2015 22:15:43 PAGE 17  

000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 281
000F 22                RET     
             ; FUNCTION _Timer_1_SetInterruptMode (END)

             ; FUNCTION Timer_1_SoftwareCapture (BEGIN)
                                           ; SOURCE LINE # 301
                                           ; SOURCE LINE # 302
                                           ; SOURCE LINE # 304
0000 904F06            MOV     DPTR,#04F06H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 306
0005 22                RET     
             ; FUNCTION Timer_1_SoftwareCapture (END)

             ; FUNCTION Timer_1_ReadStatusRegister (BEGIN)
                                           ; SOURCE LINE # 328
                                           ; SOURCE LINE # 329
                                           ; SOURCE LINE # 330
0000 904F03            MOV     DPTR,#04F03H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 331
0005         ?C0008:
0005 22                RET     
             ; FUNCTION Timer_1_ReadStatusRegister (END)

             ; FUNCTION Timer_1_ReadControlRegister (BEGIN)
                                           ; SOURCE LINE # 351
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 353
0000 904F00            MOV     DPTR,#04F00H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 354
0005         ?C0009:
0005 22                RET     
             ; FUNCTION Timer_1_ReadControlRegister (END)

             ; FUNCTION _Timer_1_WriteControlRegister (BEGIN)
                                           ; SOURCE LINE # 370
0000 900000      R     MOV     DPTR,#control
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 371
                                           ; SOURCE LINE # 372
0005 900000      R     MOV     DPTR,#control
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 904F00            MOV     DPTR,#04F00H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 373
000F 22                RET     
             ; FUNCTION _Timer_1_WriteControlRegister (END)

             ; FUNCTION Timer_1_ReadPeriod (BEGIN)
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 392
                                           ; SOURCE LINE # 393
0000 904F04            MOV     DPTR,#04F04H
C51 COMPILER V9.03   TIMER_1                                                               03/06/2015 22:15:43 PAGE 18  

0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 394
0005         ?C0011:
0005 22                RET     
             ; FUNCTION Timer_1_ReadPeriod (END)

             ; FUNCTION _Timer_1_WritePeriod (BEGIN)
                                           ; SOURCE LINE # 413
0000 900000      R     MOV     DPTR,#period
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 414
                                           ; SOURCE LINE # 416
0005 900000      R     MOV     DPTR,#period
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 7E00              MOV     R6,#00H
000C 900000      R     MOV     DPTR,#period_temp
000F EE                MOV     A,R6
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 EF                MOV     A,R7
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 417
0014 7B02              MOV     R3,#02H
0016 7A4F              MOV     R2,#04FH
0018 7904              MOV     R1,#04H
001A 900000      R     MOV     DPTR,#period_temp
001D E0                MOVX    A,@DPTR
001E FC                MOV     R4,A
001F A3                INC     DPTR
0020 E0                MOVX    A,@DPTR
0021 FD                MOV     R5,A
0022 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 421
0025 22                RET     
             ; FUNCTION _Timer_1_WritePeriod (END)

             ; FUNCTION Timer_1_ReadCapture (BEGIN)
                                           ; SOURCE LINE # 438
                                           ; SOURCE LINE # 439
                                           ; SOURCE LINE # 440
0000 904F08            MOV     DPTR,#04F08H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 441
0005         ?C0013:
0005 22                RET     
             ; FUNCTION Timer_1_ReadCapture (END)

             ; FUNCTION _Timer_1_WriteCounter (BEGIN)
                                           ; SOURCE LINE # 458
0000 900000      R     MOV     DPTR,#counter
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 460
                                           ; SOURCE LINE # 462
0005 900000      R     MOV     DPTR,#counter
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#counter
C51 COMPILER V9.03   TIMER_1                                                               03/06/2015 22:15:43 PAGE 19  

000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 472
000F 22                RET     
             ; FUNCTION _Timer_1_WriteCounter (END)

             ; FUNCTION Timer_1_ReadCounter (BEGIN)
                                           ; SOURCE LINE # 489
                                           ; SOURCE LINE # 490
                                           ; SOURCE LINE # 495
0000 904F06            MOV     DPTR,#04F06H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 498
0005 904F08            MOV     DPTR,#04F08H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
                                           ; SOURCE LINE # 499
000A         ?C0015:
000A 22                RET     
             ; FUNCTION Timer_1_ReadCounter (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    309    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
