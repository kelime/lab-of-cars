C51 COMPILER V9.03   WAIT_COUNTER                                                          04/28/2015 04:56:13 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE WAIT_COUNTER
OBJECT MODULE PLACED IN .\DP8051_Keil_903\Debug\Wait_Counter.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\2.1\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\Wait_Counter.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_903\Debug\Wait_Counter.lst) CD DB 
                    -NOIP OT(2,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051_Keil_903\Debug\Wait_Counter.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: Wait_Counter.c  
   3          * Version 2.20
   4          *
   5          *  Description:
   6          *     The Counter component consists of a 8, 16, 24 or 32-bit counter with
   7          *     a selectable period between 2 and 2^Width - 1.  
   8          *
   9          *   Note:
  10          *     None
  11          *
  12          *******************************************************************************
  13          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions, 
  15          * disclaimers, and limitations in the end user license agreement accompanying 
  16          * the software package with which this file was provided.
  17          ********************************************************************************/
  18          
  19          #include "Wait_Counter.h"
  20          
  21          uint8 Wait_Counter_initVar = 0u;
  22          
  23          
  24          /*******************************************************************************
  25          * Function Name: Wait_Counter_Init
  26          ********************************************************************************
  27          * Summary:
  28          *     Initialize to the schematic state
  29          * 
  30          * Parameters:  
  31          *  void  
  32          *
  33          * Return: 
  34          *  void
  35          *
  36          *******************************************************************************/
  37          void Wait_Counter_Init(void) 
  38          {
  39   1              #if (!Wait_Counter_UsingFixedFunction && !Wait_Counter_ControlRegRemoved)
                          uint8 ctrl;
                      #endif /* (!Wait_Counter_UsingFixedFunction && !Wait_Counter_ControlRegRemoved) */
  42   1              
  43   1              #if(!Wait_Counter_UsingFixedFunction) 
                          /* Interrupt State Backup for Critical Region*/
                          uint8 Wait_Counter_interruptState;
                      #endif /* (!Wait_Counter_UsingFixedFunction) */
  47   1              
  48   1              #if (Wait_Counter_UsingFixedFunction)
  49   1                  /* Clear all bits but the enable bit (if it's already set for Timer operation */
  50   1                  Wait_Counter_CONTROL &= Wait_Counter_CTRL_ENABLE;
  51   1                  
  52   1                  /* Clear the mode bits for continuous run mode */
  53   1                  #if (CY_PSOC5A)
C51 COMPILER V9.03   WAIT_COUNTER                                                          04/28/2015 04:56:13 PAGE 2   

                              Wait_Counter_CONTROL2 &= ~Wait_Counter_CTRL_MODE_MASK;
                          #endif /* (CY_PSOC5A) */
  56   1                  #if (CY_PSOC3 || CY_PSOC5LP)
  57   1                      Wait_Counter_CONTROL3 &= ~Wait_Counter_CTRL_MODE_MASK;                
  58   1                  #endif /* (CY_PSOC3 || CY_PSOC5LP) */
  59   1                  /* Check if One Shot mode is enabled i.e. RunMode !=0*/
  60   1                  #if (Wait_Counter_RunModeUsed != 0x0u)
  61   1                      /* Set 3rd bit of Control register to enable one shot mode */
  62   1                      Wait_Counter_CONTROL |= Wait_Counter_ONESHOT;
  63   1                  #endif /* (Wait_Counter_RunModeUsed != 0x0u) */
  64   1                  
  65   1                  /* Set the IRQ to use the status register interrupts */
  66   1                  Wait_Counter_CONTROL2 |= Wait_Counter_CTRL2_IRQ_SEL;
  67   1                  
  68   1                  /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
  69   1                  Wait_Counter_RT1 &= ~Wait_Counter_RT1_MASK;
  70   1                  Wait_Counter_RT1 |= Wait_Counter_SYNC;     
  71   1                          
  72   1                  /*Enable DSI Sync all all inputs of the Timer*/
  73   1                  Wait_Counter_RT1 &= ~(Wait_Counter_SYNCDSI_MASK);
  74   1                  Wait_Counter_RT1 |= Wait_Counter_SYNCDSI_EN;
  75   1      
  76   1              #else
                          #if(!Wait_Counter_ControlRegRemoved)
                          /* Set the default compare mode defined in the parameter */
                          ctrl = Wait_Counter_CONTROL & ~Wait_Counter_CTRL_CMPMODE_MASK;
                          Wait_Counter_CONTROL = ctrl | Wait_Counter_DEFAULT_COMPARE_MODE;
                          
                          /* Set the default capture mode defined in the parameter */
                          ctrl = Wait_Counter_CONTROL & ~Wait_Counter_CTRL_CAPMODE_MASK;
                          Wait_Counter_CONTROL = ctrl | Wait_Counter_DEFAULT_CAPTURE_MODE;
                          #endif /* (!Wait_Counter_ControlRegRemoved) */
                      #endif /* (Wait_Counter_UsingFixedFunction) */
  87   1              
  88   1              /* Clear all data in the FIFO's */
  89   1              #if (!Wait_Counter_UsingFixedFunction)
                          Wait_Counter_ClearFIFO();
                      #endif /* (!Wait_Counter_UsingFixedFunction) */
  92   1              
  93   1              /* Set Initial values from Configuration */
  94   1              Wait_Counter_WritePeriod(Wait_Counter_INIT_PERIOD_VALUE);
  95   1              #if (!(Wait_Counter_UsingFixedFunction && (CY_PSOC5A)))
  96   1                  Wait_Counter_WriteCounter(Wait_Counter_INIT_COUNTER_VALUE);
  97   1              #endif /* (!(Wait_Counter_UsingFixedFunction && (CY_PSOC5A))) */
  98   1              Wait_Counter_SetInterruptMode(Wait_Counter_INIT_INTERRUPTS_MASK);
  99   1              
 100   1              #if (!Wait_Counter_UsingFixedFunction)
                          /* Read the status register to clear the unwanted interrupts */
                          Wait_Counter_ReadStatusRegister();
                          /* Set the compare value (only available to non-fixed function implementation */
                          Wait_Counter_WriteCompare(Wait_Counter_INIT_COMPARE_VALUE);
                          /* Use the interrupt output of the status register for IRQ output */
                          
                          /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region critical*/
                          /* Enter Critical Region*/
                          Wait_Counter_interruptState = CyEnterCriticalSection();
                          
                          Wait_Counter_STATUS_AUX_CTRL |= Wait_Counter_STATUS_ACTL_INT_EN_MASK;
                          
                          /* Exit Critical Region*/
                          CyExitCriticalSection(Wait_Counter_interruptState);
                          
C51 COMPILER V9.03   WAIT_COUNTER                                                          04/28/2015 04:56:13 PAGE 3   

                      #endif /* (!Wait_Counter_UsingFixedFunction) */
 117   1      }
 118          
 119          
 120          /*******************************************************************************
 121          * Function Name: Wait_Counter_Enable
 122          ********************************************************************************
 123          * Summary:
 124          *     Enable the Counter
 125          * 
 126          * Parameters:  
 127          *  void  
 128          *
 129          * Return: 
 130          *  void
 131          *
 132          * Side Effects: 
 133          *   If the Enable mode is set to Hardware only then this function has no effect 
 134          *   on the operation of the counter.
 135          *
 136          *******************************************************************************/
 137          void Wait_Counter_Enable(void) 
 138          {
 139   1          /* Globally Enable the Fixed Function Block chosen */
 140   1          #if (Wait_Counter_UsingFixedFunction)
 141   1              Wait_Counter_GLOBAL_ENABLE |= Wait_Counter_BLOCK_EN_MASK;
 142   1              Wait_Counter_GLOBAL_STBY_ENABLE |= Wait_Counter_BLOCK_STBY_EN_MASK;
 143   1          #endif /* (Wait_Counter_UsingFixedFunction) */  
 144   1              
 145   1          /* Enable the counter from the control register  */
 146   1          /* If Fixed Function then make sure Mode is set correctly */
 147   1          /* else make sure reset is clear */
 148   1          #if(!Wait_Counter_ControlRegRemoved || Wait_Counter_UsingFixedFunction)
 149   1              Wait_Counter_CONTROL |= Wait_Counter_CTRL_ENABLE;                
 150   1          #endif /* (!Wait_Counter_ControlRegRemoved || Wait_Counter_UsingFixedFunction) */
 151   1          
 152   1      }
 153          
 154          
 155          /*******************************************************************************
 156          * Function Name: Wait_Counter_Start
 157          ********************************************************************************
 158          * Summary:
 159          *  Enables the counter for operation 
 160          *
 161          * Parameters:  
 162          *  void  
 163          *
 164          * Return: 
 165          *  void
 166          *
 167          * Global variables:
 168          *  Wait_Counter_initVar: Is modified when this function is called for the  
 169          *   first time. Is used to ensure that initialization happens only once.
 170          *
 171          *******************************************************************************/
 172          void Wait_Counter_Start(void) 
 173          {
 174   1          if(Wait_Counter_initVar == 0u)
 175   1          {
 176   2              Wait_Counter_Init();
 177   2              
C51 COMPILER V9.03   WAIT_COUNTER                                                          04/28/2015 04:56:13 PAGE 4   

 178   2              Wait_Counter_initVar = 1u; /* Clear this bit for Initialization */        
 179   2          }
 180   1          
 181   1          /* Enable the Counter */
 182   1          Wait_Counter_Enable();        
 183   1      }
 184          
 185          
 186          /*******************************************************************************
 187          * Function Name: Wait_Counter_Stop
 188          ********************************************************************************
 189          * Summary:
 190          * Halts the counter, but does not change any modes or disable interrupts.
 191          *
 192          * Parameters:  
 193          *  void  
 194          *
 195          * Return: 
 196          *  void
 197          *
 198          * Side Effects: If the Enable mode is set to Hardware only then this function
 199          *               has no effect on the operation of the counter.
 200          *
 201          *******************************************************************************/
 202          void Wait_Counter_Stop(void) 
 203          {
 204   1          /* Disable Counter */
 205   1          #if(!Wait_Counter_ControlRegRemoved || Wait_Counter_UsingFixedFunction)
 206   1              Wait_Counter_CONTROL &= ~Wait_Counter_CTRL_ENABLE;        
 207   1          #endif /* (!Wait_Counter_ControlRegRemoved || Wait_Counter_UsingFixedFunction) */
 208   1          
 209   1          /* Globally disable the Fixed Function Block chosen */
 210   1          #if (Wait_Counter_UsingFixedFunction)
 211   1              Wait_Counter_GLOBAL_ENABLE &= ~Wait_Counter_BLOCK_EN_MASK;
 212   1              Wait_Counter_GLOBAL_STBY_ENABLE &= ~Wait_Counter_BLOCK_STBY_EN_MASK;
 213   1          #endif /* (Wait_Counter_UsingFixedFunction) */
 214   1      }
 215          
 216          
 217          /*******************************************************************************
 218          * Function Name: Wait_Counter_SetInterruptMode
 219          ********************************************************************************
 220          * Summary:
 221          * Configures which interrupt sources are enabled to generate the final interrupt
 222          *
 223          * Parameters:  
 224          *  InterruptsMask: This parameter is an or'd collection of the status bits
 225          *                   which will be allowed to generate the counters interrupt.   
 226          *
 227          * Return: 
 228          *  void
 229          *
 230          *******************************************************************************/
 231          void Wait_Counter_SetInterruptMode(uint8 interruptsMask) 
 232          {
 233   1          Wait_Counter_STATUS_MASK = interruptsMask;
 234   1      }
 235          
 236          
 237          /*******************************************************************************
 238          * Function Name: Wait_Counter_ReadStatusRegister
 239          ********************************************************************************
C51 COMPILER V9.03   WAIT_COUNTER                                                          04/28/2015 04:56:13 PAGE 5   

 240          * Summary:
 241          *   Reads the status register and returns it's state. This function should use
 242          *       defined types for the bit-field information as the bits in this
 243          *       register may be permuteable.
 244          *
 245          * Parameters:  
 246          *  void
 247          *
 248          * Return: 
 249          *  (uint8) The contents of the status register
 250          *
 251          * Side Effects:
 252          *   Status register bits may be clear on read. 
 253          *
 254          *******************************************************************************/
 255          uint8   Wait_Counter_ReadStatusRegister(void) 
 256          {
 257   1          return Wait_Counter_STATUS;
 258   1      }
 259          
 260          
 261          #if(!Wait_Counter_ControlRegRemoved)
 262          /*******************************************************************************
 263          * Function Name: Wait_Counter_ReadControlRegister
 264          ********************************************************************************
 265          * Summary:
 266          *   Reads the control register and returns it's state. This function should use
 267          *       defined types for the bit-field information as the bits in this
 268          *       register may be permuteable.
 269          *
 270          * Parameters:  
 271          *  void
 272          *
 273          * Return: 
 274          *  (uint8) The contents of the control register
 275          *
 276          *******************************************************************************/
 277          uint8   Wait_Counter_ReadControlRegister(void) 
 278          {
 279   1          return Wait_Counter_CONTROL;
 280   1      }
 281          
 282          
 283          /*******************************************************************************
 284          * Function Name: Wait_Counter_WriteControlRegister
 285          ********************************************************************************
 286          * Summary:
 287          *   Sets the bit-field of the control register.  This function should use
 288          *       defined types for the bit-field information as the bits in this
 289          *       register may be permuteable.
 290          *
 291          * Parameters:  
 292          *  void
 293          *
 294          * Return: 
 295          *  (uint8) The contents of the control register
 296          *
 297          *******************************************************************************/
 298          void    Wait_Counter_WriteControlRegister(uint8 control) 
 299          {
 300   1          Wait_Counter_CONTROL = control;
 301   1      }
C51 COMPILER V9.03   WAIT_COUNTER                                                          04/28/2015 04:56:13 PAGE 6   

 302          
 303          #endif  /* (!Wait_Counter_ControlRegRemoved) */
 304          
 305          
 306          #if (!(Wait_Counter_UsingFixedFunction && (CY_PSOC5A)))
 307          /*******************************************************************************
 308          * Function Name: Wait_Counter_WriteCounter
 309          ********************************************************************************
 310          * Summary:
 311          *   This funtion is used to set the counter to a specific value
 312          *
 313          * Parameters:  
 314          *  counter:  New counter value. 
 315          *
 316          * Return: 
 317          *  void 
 318          *
 319          *******************************************************************************/
 320          void Wait_Counter_WriteCounter(uint8 counter) \
 321                                             
 322          {
 323   1          #if(Wait_Counter_UsingFixedFunction)
 324   1              /* assert if block is already enabled */
 325   1              CYASSERT (!(Wait_Counter_GLOBAL_ENABLE & Wait_Counter_BLOCK_EN_MASK));
 326   1              /* If block is disabled, enable it and then write the counter */
 327   1              Wait_Counter_GLOBAL_ENABLE |= Wait_Counter_BLOCK_EN_MASK;
 328   1              CY_SET_REG16(Wait_Counter_COUNTER_LSB_PTR, (uint16)counter);
 329   1              Wait_Counter_GLOBAL_ENABLE &= ~Wait_Counter_BLOCK_EN_MASK;
 330   1          #else
                      CY_SET_REG8(Wait_Counter_COUNTER_LSB_PTR, counter);
                  #endif /* (Wait_Counter_UsingFixedFunction) */
 333   1      }
 334          #endif /* (!(Wait_Counter_UsingFixedFunction && (CY_PSOC5A))) */
 335          
 336          
 337          /*******************************************************************************
 338          * Function Name: Wait_Counter_ReadCounter
 339          ********************************************************************************
 340          * Summary:
 341          * Returns the current value of the counter.  It doesn't matter
 342          * if the counter is enabled or running.
 343          *
 344          * Parameters:  
 345          *  void:  
 346          *
 347          * Return: 
 348          *  (uint8) The present value of the counter.
 349          *
 350          *******************************************************************************/
 351          uint8 Wait_Counter_ReadCounter(void) 
 352          {
 353   1          /* Force capture by reading Accumulator */
 354   1          /* Must first do a software capture to be able to read the counter */
 355   1          /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 356   1          CY_GET_REG8(Wait_Counter_COUNTER_LSB_PTR);
 357   1          
 358   1          /* Read the data from the FIFO (or capture register for Fixed Function)*/
 359   1          return (CY_GET_REG8(Wait_Counter_STATICCOUNT_LSB_PTR));
 360   1      }
 361          
 362          
 363          /*******************************************************************************
C51 COMPILER V9.03   WAIT_COUNTER                                                          04/28/2015 04:56:13 PAGE 7   

 364          * Function Name: Wait_Counter_ReadCapture
 365          ********************************************************************************
 366          * Summary:
 367          *   This function returns the last value captured.
 368          *
 369          * Parameters:  
 370          *  void
 371          *
 372          * Return: 
 373          *  (uint8) Present Capture value.
 374          *
 375          *******************************************************************************/
 376          uint8 Wait_Counter_ReadCapture(void) 
 377          {
 378   1         return ( CY_GET_REG8(Wait_Counter_STATICCOUNT_LSB_PTR) );  
 379   1      }
 380          
 381          
 382          /*******************************************************************************
 383          * Function Name: Wait_Counter_WritePeriod
 384          ********************************************************************************
 385          * Summary:
 386          * Changes the period of the counter.  The new period 
 387          * will be loaded the next time terminal count is detected.
 388          *
 389          * Parameters:  
 390          *  period: (uint8) A value of 0 will result in
 391          *         the counter remaining at zero.  
 392          *
 393          * Return: 
 394          *  void
 395          *
 396          *******************************************************************************/
 397          void Wait_Counter_WritePeriod(uint8 period) 
 398          {
 399   1          #if(Wait_Counter_UsingFixedFunction)
 400   1              CY_SET_REG16(Wait_Counter_PERIOD_LSB_PTR,(uint16)period);
 401   1          #else
                      CY_SET_REG8(Wait_Counter_PERIOD_LSB_PTR,period);
                  #endif /* (Wait_Counter_UsingFixedFunction) */
 404   1      }
 405          
 406          
 407          /*******************************************************************************
 408          * Function Name: Wait_Counter_ReadPeriod
 409          ********************************************************************************
 410          * Summary:
 411          * Reads the current period value without affecting counter operation.
 412          *
 413          * Parameters:  
 414          *  void:  
 415          *
 416          * Return: 
 417          *  (uint8) Present period value.
 418          *
 419          *******************************************************************************/
 420          uint8 Wait_Counter_ReadPeriod(void) 
 421          {
 422   1         return ( CY_GET_REG8(Wait_Counter_PERIOD_LSB_PTR));
 423   1      }
 424          
 425          
C51 COMPILER V9.03   WAIT_COUNTER                                                          04/28/2015 04:56:13 PAGE 8   

 426          #if (!Wait_Counter_UsingFixedFunction)
              /*******************************************************************************
              * Function Name: Wait_Counter_WriteCompare
              ********************************************************************************
              * Summary:
              * Changes the compare value.  The compare output will 
              * reflect the new value on the next UDB clock.  The compare output will be 
              * driven high when the present counter value compares true based on the 
              * configured compare mode setting. 
              *
              * Parameters:  
              *  Compare:  New compare value. 
              *
              * Return: 
              *  void
              *
              *******************************************************************************/
              void Wait_Counter_WriteCompare(uint8 compare) \
                                                 
              {
                  #if(Wait_Counter_UsingFixedFunction)
                      CY_SET_REG16(Wait_Counter_COMPARE_LSB_PTR,(uint16)compare);
                  #else
                      CY_SET_REG8(Wait_Counter_COMPARE_LSB_PTR,compare);
                  #endif /* (Wait_Counter_UsingFixedFunction) */
              }
              
              
              /*******************************************************************************
              * Function Name: Wait_Counter_ReadCompare
              ********************************************************************************
              * Summary:
              * Returns the compare value.
              *
              * Parameters:  
              *  void:
              *
              * Return: 
              *  (uint8) Present compare value.
              *
              *******************************************************************************/
              uint8 Wait_Counter_ReadCompare(void) 
              {
                 return ( CY_GET_REG8(Wait_Counter_COMPARE_LSB_PTR));
              }
              
              
              #if (Wait_Counter_COMPARE_MODE_SOFTWARE)
              /*******************************************************************************
              * Function Name: Wait_Counter_SetCompareMode
              ********************************************************************************
              * Summary:
              *  Sets the software controlled Compare Mode.
              *
              * Parameters:
              *  compareMode:  Compare Mode Enumerated Type.
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void Wait_Counter_SetCompareMode(uint8 compareMode) 
C51 COMPILER V9.03   WAIT_COUNTER                                                          04/28/2015 04:56:13 PAGE 9   

              {
                  /* Clear the compare mode bits in the control register */
                  Wait_Counter_CONTROL &= ~Wait_Counter_CTRL_CMPMODE_MASK;
                  
                  /* Write the new setting */
                  Wait_Counter_CONTROL |= (compareMode << Wait_Counter_CTRL_CMPMODE0_SHIFT);
              }
              #endif  /* (Wait_Counter_COMPARE_MODE_SOFTWARE) */
              
              
              #if (Wait_Counter_CAPTURE_MODE_SOFTWARE)
              /*******************************************************************************
              * Function Name: Wait_Counter_SetCaptureMode
              ********************************************************************************
              * Summary:
              *  Sets the software controlled Capture Mode.
              *
              * Parameters:
              *  captureMode:  Capture Mode Enumerated Type.
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void Wait_Counter_SetCaptureMode(uint8 captureMode) 
              {
                  /* Clear the capture mode bits in the control register */
                  Wait_Counter_CONTROL &= ~Wait_Counter_CTRL_CAPMODE_MASK;
                  
                  /* Write the new setting */
                  Wait_Counter_CONTROL |= (captureMode << Wait_Counter_CTRL_CAPMODE0_SHIFT);
              }
              #endif  /* (Wait_Counter_CAPTURE_MODE_SOFTWARE) */
              
              
              /*******************************************************************************
              * Function Name: Wait_Counter_ClearFIFO
              ********************************************************************************
              * Summary:
              *   This function clears all capture data from the capture FIFO
              *
              * Parameters:  
              *  void:
              *
              * Return: 
              *  None
              *
              *******************************************************************************/
              void Wait_Counter_ClearFIFO(void) 
              {
              
                  while(Wait_Counter_ReadStatusRegister() & Wait_Counter_STATUS_FIFONEMP)
                  {
                      Wait_Counter_ReadCapture();
                  }
              
              }
              #endif  /* (!Wait_Counter_UsingFixedFunction) */
 546          
 547          
 548          /* [] END OF FILE */
 549          
C51 COMPILER V9.03   WAIT_COUNTER                                                          04/28/2015 04:56:13 PAGE 10  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Wait_Counter_Init (BEGIN)
                                           ; SOURCE LINE # 37
                                           ; SOURCE LINE # 38
                                           ; SOURCE LINE # 50
0000 904F00            MOV     DPTR,#04F00H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5401              ANL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 57
000B 904F02            MOV     DPTR,#04F02H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54FC              ANL     A,#0FCH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 62
0016 904F00            MOV     DPTR,#04F00H
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 4404              ORL     A,#04H
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 66
0021 904F01            MOV     DPTR,#04F01H
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 4401              ORL     A,#01H
0029 FF                MOV     R7,A
002A EF                MOV     A,R7
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 69
002C 904F0B            MOV     DPTR,#04F0BH
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 54CF              ANL     A,#0CFH
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 70
0037 904F0B            MOV     DPTR,#04F0BH
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C EF                MOV     A,R7
003D 4430              ORL     A,#030H
003F FF                MOV     R7,A
0040 EF                MOV     A,R7
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 73
0042 904F0B            MOV     DPTR,#04F0BH
C51 COMPILER V9.03   WAIT_COUNTER                                                          04/28/2015 04:56:13 PAGE 11  

0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 EF                MOV     A,R7
0048 54F0              ANL     A,#0F0H
004A FF                MOV     R7,A
004B EF                MOV     A,R7
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 74
004D 904F0B            MOV     DPTR,#04F0BH
0050 E0                MOVX    A,@DPTR
0051 FF                MOV     R7,A
0052 EF                MOV     A,R7
0053 440F              ORL     A,#0FH
0055 FF                MOV     R7,A
0056 EF                MOV     A,R7
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 94
0058 7F6E              MOV     R7,#06EH
005A 120000      R     LCALL   _Wait_Counter_WritePeriod
                                           ; SOURCE LINE # 96
005D 7F6E              MOV     R7,#06EH
005F 120000      R     LCALL   _Wait_Counter_WriteCounter
                                           ; SOURCE LINE # 98
0062 7F08              MOV     R7,#08H
0064 120000      R     LCALL   _Wait_Counter_SetInterruptMode
                                           ; SOURCE LINE # 117
0067 22                RET     
             ; FUNCTION Wait_Counter_Init (END)

             ; FUNCTION Wait_Counter_Enable (BEGIN)
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 141
0000 9043A3            MOV     DPTR,#043A3H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4401              ORL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 142
000B 9043B3            MOV     DPTR,#043B3H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 4401              ORL     A,#01H
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 149
0016 904F00            MOV     DPTR,#04F00H
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 4401              ORL     A,#01H
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 152
0021 22                RET     
             ; FUNCTION Wait_Counter_Enable (END)
C51 COMPILER V9.03   WAIT_COUNTER                                                          04/28/2015 04:56:13 PAGE 12  


             ; FUNCTION Wait_Counter_Start (BEGIN)
                                           ; SOURCE LINE # 172
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 174
0000 900000      R     MOV     DPTR,#Wait_Counter_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7009              JNZ     ?C0003
                                           ; SOURCE LINE # 175
                                           ; SOURCE LINE # 176
0008 120000      R     LCALL   Wait_Counter_Init
                                           ; SOURCE LINE # 178
000B 900000      R     MOV     DPTR,#Wait_Counter_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 179
0011         ?C0003:
                                           ; SOURCE LINE # 182
0011 120000      R     LCALL   Wait_Counter_Enable
                                           ; SOURCE LINE # 183
0014 22                RET     
             ; FUNCTION Wait_Counter_Start (END)

             ; FUNCTION Wait_Counter_Stop (BEGIN)
                                           ; SOURCE LINE # 202
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 206
0000 904F00            MOV     DPTR,#04F00H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 211
000B 9043A3            MOV     DPTR,#043A3H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54FE              ANL     A,#0FEH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 212
0016 9043B3            MOV     DPTR,#043B3H
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 54FE              ANL     A,#0FEH
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 214
0021 22                RET     
             ; FUNCTION Wait_Counter_Stop (END)

             ; FUNCTION _Wait_Counter_SetInterruptMode (BEGIN)
                                           ; SOURCE LINE # 231
0000 900000      R     MOV     DPTR,#interruptsMask
C51 COMPILER V9.03   WAIT_COUNTER                                                          04/28/2015 04:56:13 PAGE 13  

0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 232
                                           ; SOURCE LINE # 233
0005 900000      R     MOV     DPTR,#interruptsMask
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 904F03            MOV     DPTR,#04F03H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 234
000F 22                RET     
             ; FUNCTION _Wait_Counter_SetInterruptMode (END)

             ; FUNCTION Wait_Counter_ReadStatusRegister (BEGIN)
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
0000 904F03            MOV     DPTR,#04F03H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 258
0005         ?C0007:
0005 22                RET     
             ; FUNCTION Wait_Counter_ReadStatusRegister (END)

             ; FUNCTION Wait_Counter_ReadControlRegister (BEGIN)
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 279
0000 904F00            MOV     DPTR,#04F00H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 280
0005         ?C0008:
0005 22                RET     
             ; FUNCTION Wait_Counter_ReadControlRegister (END)

             ; FUNCTION _Wait_Counter_WriteControlRegister (BEGIN)
                                           ; SOURCE LINE # 298
0000 900000      R     MOV     DPTR,#control
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 299
                                           ; SOURCE LINE # 300
0005 900000      R     MOV     DPTR,#control
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 904F00            MOV     DPTR,#04F00H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 301
000F 22                RET     
             ; FUNCTION _Wait_Counter_WriteControlRegister (END)

             ; FUNCTION _Wait_Counter_WriteCounter (BEGIN)
                                           ; SOURCE LINE # 320
0000 900000      R     MOV     DPTR,#counter
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 322
                                           ; SOURCE LINE # 325
C51 COMPILER V9.03   WAIT_COUNTER                                                          04/28/2015 04:56:13 PAGE 14  

0005 9043A3            MOV     DPTR,#043A3H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5401              ANL     A,#01H
000D FF                MOV     R7,A
000E 7E00              MOV     R6,#00H
0010 EF                MOV     A,R7
0011 4E                ORL     A,R6
0012 601C              JZ      ?C0010
0014 9043A3            MOV     DPTR,#043A3H
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 EF                MOV     A,R7
001A 5401              ANL     A,#01H
001C FF                MOV     R7,A
001D 7E00              MOV     R6,#00H
001F EF                MOV     A,R7
0020 4E                ORL     A,R6
0021 7004              JNZ     ?C0011
0023 7F01              MOV     R7,#01H
0025 8002              SJMP    ?C0012
0027         ?C0011:
0027 7F00              MOV     R7,#00H
0029         ?C0012:
0029 E4                CLR     A
002A FC                MOV     R4,A
002B FD                MOV     R5,A
002C FE                MOV     R6,A
002D 120000      E     LCALL   _?CyHalt
0030         ?C0010:
                                           ; SOURCE LINE # 327
0030 9043A3            MOV     DPTR,#043A3H
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 4401              ORL     A,#01H
0038 FF                MOV     R7,A
0039 EF                MOV     A,R7
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 328
003B 7B02              MOV     R3,#02H
003D 7A4F              MOV     R2,#04FH
003F 7906              MOV     R1,#06H
0041 900000      R     MOV     DPTR,#counter
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 EF                MOV     A,R7
0047 FD                MOV     R5,A
0048 7C00              MOV     R4,#00H
004A 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 329
004D 9043A3            MOV     DPTR,#043A3H
0050 E0                MOVX    A,@DPTR
0051 FF                MOV     R7,A
0052 EF                MOV     A,R7
0053 54FE              ANL     A,#0FEH
0055 FF                MOV     R7,A
0056 EF                MOV     A,R7
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 333
0058 22                RET     
C51 COMPILER V9.03   WAIT_COUNTER                                                          04/28/2015 04:56:13 PAGE 15  

             ; FUNCTION _Wait_Counter_WriteCounter (END)

             ; FUNCTION Wait_Counter_ReadCounter (BEGIN)
                                           ; SOURCE LINE # 351
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 356
0000 904F06            MOV     DPTR,#04F06H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 359
0005 904F08            MOV     DPTR,#04F08H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
                                           ; SOURCE LINE # 360
000A         ?C0014:
000A 22                RET     
             ; FUNCTION Wait_Counter_ReadCounter (END)

             ; FUNCTION Wait_Counter_ReadCapture (BEGIN)
                                           ; SOURCE LINE # 376
                                           ; SOURCE LINE # 377
                                           ; SOURCE LINE # 378
0000 904F08            MOV     DPTR,#04F08H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 379
0005         ?C0015:
0005 22                RET     
             ; FUNCTION Wait_Counter_ReadCapture (END)

             ; FUNCTION _Wait_Counter_WritePeriod (BEGIN)
                                           ; SOURCE LINE # 397
0000 900000      R     MOV     DPTR,#period
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 398
                                           ; SOURCE LINE # 400
0005 7B02              MOV     R3,#02H
0007 7A4F              MOV     R2,#04FH
0009 7904              MOV     R1,#04H
000B 900000      R     MOV     DPTR,#period
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 FD                MOV     R5,A
0012 7C00              MOV     R4,#00H
0014 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 404
0017 22                RET     
             ; FUNCTION _Wait_Counter_WritePeriod (END)

             ; FUNCTION Wait_Counter_ReadPeriod (BEGIN)
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 421
                                           ; SOURCE LINE # 422
0000 904F04            MOV     DPTR,#04F04H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 423
0005         ?C0017:
0005 22                RET     
             ; FUNCTION Wait_Counter_ReadPeriod (END)
C51 COMPILER V9.03   WAIT_COUNTER                                                          04/28/2015 04:56:13 PAGE 16  




MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    373    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
