C51 COMPILER V9.03   TIMER_1_PM                                                            03/06/2015 22:15:44 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE TIMER_1_PM
OBJECT MODULE PLACED IN .\DP8051_Keil_903\Debug\Timer_1_PM.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\2.1\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\Timer_1_PM.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_903\Debug\Timer_1_PM.lst) CD DB NOIP
                    - OT(2,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051_Keil_903\Debug\Timer_1_PM.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: Timer_1_PM.c
   3          * Version 2.30
   4          *
   5          *  Description:
   6          *     This file provides the power management source code to API for the
   7          *     Timer.
   8          *
   9          *   Note:
  10          *     None
  11          *
  12          *******************************************************************************
  13          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions,
  15          * disclaimers, and limitations in the end user license agreement accompanying
  16          * the software package with which this file was provided.
  17          ********************************************************************************/
  18          
  19          #include "Timer_1.h"
  20          static Timer_1_backupStruct Timer_1_backup;
  21          
  22          
  23          /*******************************************************************************
  24          * Function Name: Timer_1_SaveConfig
  25          ********************************************************************************
  26          *
  27          * Summary:
  28          *     Save the current user configuration
  29          *
  30          * Parameters:
  31          *  void
  32          *
  33          * Return:
  34          *  void
  35          *
  36          * Global variables:
  37          *  Timer_1_backup:  Variables of this global structure are modified to
  38          *  store the values of non retention configuration registers when Sleep() API is
  39          *  called.
  40          *
  41          *******************************************************************************/
  42          void Timer_1_SaveConfig(void) 
  43          {
  44   1          #if (!Timer_1_UsingFixedFunction)
                      /* Backup the UDB non-rentention registers for PSoC5A*/
                      #if (CY_PSOC5A)
                          Timer_1_backup.TimerUdb = Timer_1_ReadCounter();
                          Timer_1_backup.TimerPeriod = Timer_1_ReadPeriod();
                          Timer_1_backup.InterruptMaskValue = Timer_1_STATUS_MASK;
                          #if (Timer_1_UsingHWCaptureCounter)
                              Timer_1_backup.TimerCaptureCounter = Timer_1_ReadCaptureCount();
                          #endif /* Backup the UDB non-rentention register capture counter for PSoC5A */
                      #endif /* Backup the UDB non-rentention registers for PSoC5A */
C51 COMPILER V9.03   TIMER_1_PM                                                            03/06/2015 22:15:44 PAGE 2   

              
                      #if (CY_PSOC3 || CY_PSOC5LP)
                          Timer_1_backup.TimerUdb = Timer_1_ReadCounter();
                          Timer_1_backup.InterruptMaskValue = Timer_1_STATUS_MASK;
                          #if (Timer_1_UsingHWCaptureCounter)
                              Timer_1_backup.TimerCaptureCounter = Timer_1_ReadCaptureCount();
                          #endif /* Back Up capture counter register  */
                      #endif /* Backup non retention registers, interrupt mask and capture counter for PSoC3 or PSoC5LP 
             -*/
              
                      #if(!Timer_1_ControlRegRemoved)
                          Timer_1_backup.TimerControlRegister = Timer_1_ReadControlRegister();
                      #endif /* Backup the enable state of the Timer component */
                  #endif /* Backup non retention registers in UDB implementation. All fixed function registers are reten
             -tion */
  67   1      }
  68          
  69          
  70          /*******************************************************************************
  71          * Function Name: Timer_1_RestoreConfig
  72          ********************************************************************************
  73          *
  74          * Summary:
  75          *  Restores the current user configuration.
  76          *
  77          * Parameters:
  78          *  void
  79          *
  80          * Return:
  81          *  void
  82          *
  83          * Global variables:
  84          *  Timer_1_backup:  Variables of this global structure are used to
  85          *  restore the values of non retention registers on wakeup from sleep mode.
  86          *
  87          *******************************************************************************/
  88          void Timer_1_RestoreConfig(void) 
  89          {   
  90   1          #if (!Timer_1_UsingFixedFunction)
                      /* Restore the UDB non-rentention registers for PSoC5A */
                      #if (CY_PSOC5A)
                          /* Interrupt State Backup for Critical Region*/
                          uint8 Timer_1_interruptState;
              
                          Timer_1_WriteCounter(Timer_1_backup.TimerUdb);
                          Timer_1_WritePeriod(Timer_1_backup.TimerPeriod);
                          /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region critical*/
                          /* Enter Critical Region*/
                          Timer_1_interruptState = CyEnterCriticalSection();
                          /* Use the interrupt output of the status register for IRQ output */
                          Timer_1_STATUS_AUX_CTRL |= Timer_1_STATUS_ACTL_INT_EN_MASK;
                          /* Exit Critical Region*/
                          CyExitCriticalSection(Timer_1_interruptState);
                          Timer_1_STATUS_MASK =Timer_1_backup.InterruptMaskValue;
                          #if (Timer_1_UsingHWCaptureCounter)
                              Timer_1_SetCaptureCount(Timer_1_backup.TimerCaptureCounter);
                          #endif /* Restore the UDB non-rentention register capture counter for PSoC5A */
                      #endif /* Restore the UDB non-rentention registers for PSoC5A */
              
                      #if (CY_PSOC3 || CY_PSOC5LP)
                          Timer_1_WriteCounter(Timer_1_backup.TimerUdb);
                          Timer_1_STATUS_MASK =Timer_1_backup.InterruptMaskValue;
C51 COMPILER V9.03   TIMER_1_PM                                                            03/06/2015 22:15:44 PAGE 3   

                          #if (Timer_1_UsingHWCaptureCounter)
                              Timer_1_SetCaptureCount(Timer_1_backup.TimerCaptureCounter);
                          #endif /* Restore Capture counter register*/
                      #endif /* Restore up non retention registers, interrupt mask and capture counter for PSoC3 or PSoC
             -5LP */
              
                      #if(!Timer_1_ControlRegRemoved)
                          Timer_1_WriteControlRegister(Timer_1_backup.TimerControlRegister);
                      #endif /* Restore the enable state of the Timer component */
                  #endif /* Restore non retention registers in the UDB implementation only */
 123   1      }
 124          
 125          
 126          /*******************************************************************************
 127          * Function Name: Timer_1_Sleep
 128          ********************************************************************************
 129          *
 130          * Summary:
 131          *     Stop and Save the user configuration
 132          *
 133          * Parameters:
 134          *  void
 135          *
 136          * Return:
 137          *  void
 138          *
 139          * Global variables:
 140          *  Timer_1_backup.TimerEnableState:  Is modified depending on the
 141          *  enable state of the block before entering sleep mode.
 142          *
 143          *******************************************************************************/
 144          void Timer_1_Sleep(void) 
 145          {
 146   1          #if(!Timer_1_ControlRegRemoved)
 147   1              /* Save Counter's enable state */
 148   1              if(Timer_1_CTRL_ENABLE == (Timer_1_CONTROL & Timer_1_CTRL_ENABLE))
 149   1              {
 150   2                  /* Timer is enabled */
 151   2                  Timer_1_backup.TimerEnableState = 1u;
 152   2              }
 153   1              else
 154   1              {
 155   2                  /* Timer is disabled */
 156   2                  Timer_1_backup.TimerEnableState = 0u;
 157   2              }
 158   1          #endif /* Back up enable state from the Timer control register */
 159   1          Timer_1_Stop();
 160   1          Timer_1_SaveConfig();
 161   1      }
 162          
 163          
 164          /*******************************************************************************
 165          * Function Name: Timer_1_Wakeup
 166          ********************************************************************************
 167          *
 168          * Summary:
 169          *  Restores and enables the user configuration
 170          *
 171          * Parameters:
 172          *  void
 173          *
 174          * Return:
C51 COMPILER V9.03   TIMER_1_PM                                                            03/06/2015 22:15:44 PAGE 4   

 175          *  void
 176          *
 177          * Global variables:
 178          *  Timer_1_backup.enableState:  Is used to restore the enable state of
 179          *  block on wakeup from sleep mode.
 180          *
 181          *******************************************************************************/
 182          void Timer_1_Wakeup(void) 
 183          {
 184   1          Timer_1_RestoreConfig();
 185   1          #if(!Timer_1_ControlRegRemoved)
 186   1              if(Timer_1_backup.TimerEnableState == 1u)
 187   1              {     /* Enable Timer's operation */
 188   2                      Timer_1_Enable();
 189   2              } /* Do nothing if Timer was disabled before */
 190   1          #endif /* Remove this code section if Control register is removed */
 191   1      }
 192          
 193          
 194          /* [] END OF FILE */
C51 COMPILER V9.03   TIMER_1_PM                                                            03/06/2015 22:15:44 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Timer_1_SaveConfig (BEGIN)
                                           ; SOURCE LINE # 42
                                           ; SOURCE LINE # 43
                                           ; SOURCE LINE # 67
0000 22                RET     
             ; FUNCTION Timer_1_SaveConfig (END)

             ; FUNCTION Timer_1_RestoreConfig (BEGIN)
                                           ; SOURCE LINE # 88
                                           ; SOURCE LINE # 89
                                           ; SOURCE LINE # 123
0000 22                RET     
             ; FUNCTION Timer_1_RestoreConfig (END)

             ; FUNCTION Timer_1_Sleep (BEGIN)
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 148
0000 904F00            MOV     DPTR,#04F00H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5401              ANL     A,#01H
0008 FF                MOV     R7,A
0009 7E00              MOV     R6,#00H
000B EF                MOV     A,R7
000C 6401              XRL     A,#01H
000E 4E                ORL     A,R6
000F 7008              JNZ     ?C0003
                                           ; SOURCE LINE # 149
                                           ; SOURCE LINE # 151
0011 900000      R     MOV     DPTR,#Timer_1_backup
0014 7401              MOV     A,#01H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 152
0017 8005              SJMP    ?C0004
0019         ?C0003:
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 156
0019 900000      R     MOV     DPTR,#Timer_1_backup
001C E4                CLR     A
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 157
001E         ?C0004:
                                           ; SOURCE LINE # 159
001E 120000      E     LCALL   Timer_1_Stop
                                           ; SOURCE LINE # 160
0021 120000      R     LCALL   Timer_1_SaveConfig
                                           ; SOURCE LINE # 161
0024 22                RET     
             ; FUNCTION Timer_1_Sleep (END)

             ; FUNCTION Timer_1_Wakeup (BEGIN)
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 183
                                           ; SOURCE LINE # 184
0000 120000      R     LCALL   Timer_1_RestoreConfig
                                           ; SOURCE LINE # 186
0003 900000      R     MOV     DPTR,#Timer_1_backup
C51 COMPILER V9.03   TIMER_1_PM                                                            03/06/2015 22:15:44 PAGE 6   

0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 EF                MOV     A,R7
0009 B40103            CJNE    A,#01H,?C0007
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 188
000C 120000      E     LCALL   Timer_1_Enable
                                           ; SOURCE LINE # 189
                                           ; SOURCE LINE # 191
000F         ?C0007:
000F 22                RET     
             ; FUNCTION Timer_1_Wakeup (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     55    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
