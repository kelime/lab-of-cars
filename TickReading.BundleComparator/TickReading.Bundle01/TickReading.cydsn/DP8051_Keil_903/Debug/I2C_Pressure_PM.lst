C51 COMPILER V9.03   I2C_PRESSURE_PM                                                       05/06/2015 20:00:59 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE I2C_PRESSURE_PM
OBJECT MODULE PLACED IN .\DP8051_Keil_903\Debug\I2C_Pressure_PM.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\2.1\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\I2C_Pressure_PM.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_903\Debug\I2C_Pressure_PM.lst) 
                    -CD DB NOIP OT(2,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051_Keil_903\Debug\I2C_Pressure_PM.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: I2C_Pressure_PM.c
   3          * Version 3.10
   4          *
   5          * Description:
   6          *  This file provides Low power mode APIs for I2C component.
   7          *
   8          * Note:
   9          *  None
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include "I2C_Pressure.h"
  19          
  20          I2C_Pressure_BACKUP_STRUCT I2C_Pressure_backup =
  21          {   
  22              0u, /* enableState */
  23              
  24              #if (I2C_Pressure_IMPLEMENTATION == I2C_Pressure_FF)
  25                  I2C_Pressure_DEFAULT_XCFG,  /* xcfg */
  26                  I2C_Pressure_DEFAULT_CFG,   /* cfg */
  27                  
  28                  #if (I2C_Pressure_MODE & I2C_Pressure_MODE_SLAVE)
                          I2C_Pressure_DEFAULT_ADDR, /* addr */
                      #endif  /* End (I2C_Pressure_MODE & I2C_Pressure_MODE_SLAVE) */
  31                  
  32                  #if (CY_PSOC5A)
                         I2C_Pressure_DEFAULT_DIVIDE_FACTOR,
                      #else
  35                      LO8(I2C_Pressure_DEFAULT_DIVIDE_FACTOR), /*  clk_div1 */
  36                      HI8(I2C_Pressure_DEFAULT_DIVIDE_FACTOR), /*  clk_div2 */
  37                  #endif  /* End (CY_PSOC5A) */
  38                  
  39              #else /* (I2C_Pressure_IMPLEMENTATION == I2C_Pressure_UDB) */
                      I2C_Pressure_DEFAULT_CFG,    /* control */
                      
                      #if (CY_UDB_V0)
                          I2C_Pressure_INT_ENABLE_MASK, /* int_mask */
                          
                          #if (I2C_Pressure_MODE & I2C_Pressure_MODE_SLAVE)
                              I2C_Pressure_DEFAULT_ADDR, /* addr */
                          #endif  /* End (I2C_Pressure_MODE & I2C_Pressure_MODE_SLAVE) */
                      #else
                          /* Retention registers for CY_UDB V1 in PSoC3 and PSoC5LP:
                              - Status Int mask: int_mask;
                              - D0 register: addr;
                              - Auxiliary Control: aux_ctl;
                              - Period Register: always 7;
C51 COMPILER V9.03   I2C_PRESSURE_PM                                                       05/06/2015 20:00:59 PAGE 2   

                              - D0 and D1: clock generator 7, 15;
                          */
                      #endif  /* End (CY_UDB_V0) */
                  #endif  /* End ((I2C_Pressure_IMPLEMENTATION == I2C_Pressure_FF) */
  58          };
  59          
  60          
  61          /*******************************************************************************
  62          * Function Name: I2C_Pressure_SaveConfig
  63          ********************************************************************************
  64          *
  65          * Summary:
  66          *  Wakeup on address match enabled: disables I2C Master(if was enabled before go
  67          *  to sleep), enables I2C backup regulator. Waits while on-going transaction be 
  68          *  will completed and I2C will be ready go to sleep. All incoming transaction 
  69          *  will be NACKed till power down will be asserted. The address match event 
  70          *  wakes up the chip. 
  71          *  Wakeup on address match disabled: saves I2C configuration and non-retention 
  72          *  register values.
  73          *
  74          * Parameters:
  75          *  None
  76          *
  77          * Return:
  78          *  None
  79          *
  80          * Global Variables:
  81          *  I2C_Pressure_backup - used to save component configuration and none-retention
  82          *  registers before enter sleep mode.
  83          *
  84          * Reentrant:
  85          *  No
  86          *
  87          *******************************************************************************/
  88          void I2C_Pressure_SaveConfig(void) 
  89          {
  90   1          #if (I2C_Pressure_IMPLEMENTATION == I2C_Pressure_FF)
  91   1              #if (I2C_Pressure_ENABLE_WAKEUP)
                          uint8 enableInterrupts;
                      #endif  /* End (I2C_Pressure_ENABLE_WAKEUP) */
  94   1              
  95   1              /* Store regiters in either Sleep mode */
  96   1              I2C_Pressure_backup.cfg  = I2C_Pressure_CFG_REG;
  97   1              I2C_Pressure_backup.xcfg = I2C_Pressure_XCFG_REG;
  98   1              
  99   1                  #if (0u != (I2C_Pressure_MODE & I2C_Pressure_MODE_SLAVE))
                              I2C_Pressure_backup.addr = I2C_Pressure_ADDR_REG;
                          #endif  /* End (0u != (I2C_Pressure_MODE & I2C_Pressure_MODE_SLAVE)) */
 102   1                  
 103   1                  #if (CY_PSOC5A)
                              I2C_Pressure_backup.clk_div  = I2C_Pressure_CLKDIV_REG;
                          
                          #else
 107   1                      I2C_Pressure_backup.clk_div1  = I2C_Pressure_CLKDIV1_REG;
 108   1                      I2C_Pressure_backup.clk_div2  = I2C_Pressure_CLKDIV2_REG;
 109   1                  #endif  /* End (CY_PSOC5A) */
 110   1              
 111   1              #if (I2C_Pressure_ENABLE_WAKEUP)
                          /* Need to disable Master */
                          #if (0u != (I2C_Pressure_MODE & I2C_Pressure_MODE_MASTER))
                              if (0u != (I2C_Pressure_CFG_REG & I2C_Pressure_ENABLE_MASTER))
                              {
C51 COMPILER V9.03   I2C_PRESSURE_PM                                                       05/06/2015 20:00:59 PAGE 3   

                                  I2C_Pressure_CFG_REG &= ~I2C_Pressure_ENABLE_MASTER;
                                  
                                  /* Store state of I2C Master */
                                  I2C_Pressure_backup.enableState = I2C_Pressure_ENABLE_MASTER;
                              }
                          #endif  /* ((0u != (I2C_Pressure_MODE & I2C_Pressure_MODE_MASTER)) */
                          
                          /* Enable the I2C regulator backup */
                          enableInterrupts = CyEnterCriticalSection();
                          I2C_Pressure_PWRSYS_CR1_REG |= I2C_Pressure_PWRSYS_CR1_I2C_REG_BACKUP;
                          CyExitCriticalSection(enableInterrupts);
                          
                          /* 1) Set force NACK to ignore I2C transactions 
                             2) Wait while I2C will be ready go to Sleep 
                             3) These bits are cleared on wake up */
                          I2C_Pressure_XCFG_REG |= I2C_Pressure_XCFG_FORCE_NACK;
                          while (0u == (I2C_Pressure_XCFG_REG  & I2C_Pressure_XCFG_RDY_TO_SLEEP));
                          
                      #endif  /* End (I2C_Pressure_ENABLE_WAKEUP) */
 135   1              
 136   1          #else
                      /* Store only address match bit */
                      I2C_Pressure_backup.control = (I2C_Pressure_CFG_REG & I2C_Pressure_CTRL_ANY_ADDRESS_MASK);
                      
                      #if (CY_UDB_V0)
                          /* Store interrupt mask bits */
                          I2C_Pressure_backup.int_mask = I2C_Pressure_INT_MASK_REG;
                          
                          #if (I2C_Pressure_MODE & I2C_Pressure_MODE_SLAVE)
                              /* Store slave address */
                              I2C_Pressure_backup.addr = I2C_Pressure_ADDR_REG;
                          #endif  /* End (I2C_Pressure_MODE & I2C_Pressure_MODE_SLAVE) */
              
                      #endif  /* End (CY_UDB_V0) */
                      
                  #endif  /* End (I2C_Pressure_IMPLEMENTATION == I2C_Pressure_FF) */
 152   1          
 153   1          /* Disable interrupts */
 154   1          I2C_Pressure_DisableInt();
 155   1      }
 156          
 157          
 158          /*******************************************************************************
 159          * Function Name: I2C_Pressure_Sleep
 160          ********************************************************************************
 161          *
 162          * Summary:
 163          *  Wakeup on address match enabled: All incoming transaction will be NACKed till 
 164          *  power down will be asserted. The address match event wakes up the chip.
 165          *  Wakeup on address match disabled: Disables active mode power template bits or 
 166          *  clock gating as appropriate. Saves I2C configuration and non-retention 
 167          *  register values. 
 168          *  Disables I2C interrupt.
 169          *
 170          * Parameters:
 171          *  None
 172          *
 173          * Return:
 174          *  None
 175          *
 176          * Reentrant:
 177          *  No
C51 COMPILER V9.03   I2C_PRESSURE_PM                                                       05/06/2015 20:00:59 PAGE 4   

 178          *
 179          *******************************************************************************/
 180          void I2C_Pressure_Sleep(void) 
 181          {
 182   1          #if (I2C_Pressure_ENABLE_WAKEUP)
                      /* The I2C block should be always enabled if used as wakeup source */
                      I2C_Pressure_backup.enableState = 0u;
                      
                  #else
 187   1              /* Store I2C enable state */
 188   1              if (I2C_Pressure_IS_I2C_ENABLE(I2C_Pressure_I2C_ENABLE_REG))
 189   1              {
 190   2                  I2C_Pressure_backup.enableState = 1u;
 191   2                  I2C_Pressure_Stop();
 192   2              }
 193   1              else
 194   1              {
 195   2                  I2C_Pressure_backup.enableState = 0u;
 196   2              }
 197   1          #endif  /* End (I2C_Pressure_ENABLE_WAKEUP) */
 198   1          
 199   1          I2C_Pressure_SaveConfig();
 200   1      }
 201          
 202          
 203          /*******************************************************************************
 204          * Function Name: I2C_Pressure_RestoreConfig
 205          ********************************************************************************
 206          *
 207          * Summary:
 208          *  Wakeup on address match enabled: enables I2C Master (if was enabled before go
 209          *  to sleep), disables I2C backup regulator.
 210          *  Wakeup on address match disabled: Restores I2C configuration and 
 211          *  non-retention register values.
 212          *
 213          * Parameters:
 214          *  None
 215          *
 216          * Return:
 217          *  None
 218          *
 219          * Global Variables:
 220          *  I2C_Pressure_backup - used to save component configuration and 
 221          *  none-retention registers before exit sleep mode.
 222          *
 223          *******************************************************************************/
 224          void I2C_Pressure_RestoreConfig(void) 
 225          {
 226   1          #if (I2C_Pressure_IMPLEMENTATION == I2C_Pressure_FF)
 227   1              #if (I2C_Pressure_ENABLE_WAKEUP)
                          uint8 enableInterrupts;
                          
                          /* Disable the I2C regulator backup */
                          enableInterrupts = CyEnterCriticalSection();
                          if (0u != (I2C_Pressure_PWRSYS_CR1_I2C_REG_BACKUP & I2C_Pressure_PWRSYS_CR1_REG))
                          {
                              I2C_Pressure_PWRSYS_CR1_REG &= ~I2C_Pressure_PWRSYS_CR1_I2C_REG_BACKUP;
                              CyExitCriticalSection(enableInterrupts);
                              
                              /* Need to re-enable Master */
                              #if (0u != (I2C_Pressure_MODE & I2C_Pressure_MODE_MASTER))
                                  if (I2C_Pressure_backup.enableState != 0u)
C51 COMPILER V9.03   I2C_PRESSURE_PM                                                       05/06/2015 20:00:59 PAGE 5   

                                  {
                                      I2C_Pressure_CFG_REG |= I2C_Pressure_ENABLE_MASTER;
                                      
                                      /* Clear state of I2C Master */
                                      I2C_Pressure_backup.enableState = 0u;
                                  }
                              #endif  /* End (0u != (I2C_Pressure_CFG_REG & I2C_Pressure_ENABLE_MASTER)) */
                          }
                          else
                          {
                              /* Disable power to I2C block before register restore */
                              I2C_Pressure_ACT_PWRMGR_REG  &= ~I2C_Pressure_ACT_PWR_EN;
                              I2C_Pressure_STBY_PWRMGR_REG &= ~I2C_Pressure_STBY_PWR_EN;
                               
                              /* The I2C_Pressure_PWRSYS_CR1_I2C_REG_BACKUP already cleaned by PM APIs */
                              CyExitCriticalSection(enableInterrupts);
                              
                              /* Enable component after restore complete */
                              I2C_Pressure_backup.enableState = 1u;
                              
                      #endif  /* End (I2C_Pressure_ENABLE_WAKEUP) */
 261   1              
 262   1                      /* Restore component registers */
 263   1                      I2C_Pressure_XCFG_REG = I2C_Pressure_backup.xcfg;
 264   1                      I2C_Pressure_CFG_REG  = I2C_Pressure_backup.cfg;
 265   1                      
 266   1                      #if (0u != (I2C_Pressure_MODE & I2C_Pressure_MODE_SLAVE))
                                  I2C_Pressure_ADDR_REG = I2C_Pressure_backup.addr;
                              #endif  /* End (0u != (I2C_Pressure_MODE & I2C_Pressure_MODE_SLAVE)) */
 269   1                      
 270   1                      #if (CY_PSOC5A)
                                  I2C_Pressure_CLKDIV_REG =I2C_Pressure_backup.clk_div;
                              
                              #else
 274   1                          I2C_Pressure_CLKDIV1_REG = I2C_Pressure_backup.clk_div1;
 275   1                          I2C_Pressure_CLKDIV2_REG = I2C_Pressure_backup.clk_div2;
 276   1                      #endif  /* End (CY_PSOC5A) */
 277   1                 
 278   1              #if (I2C_Pressure_ENABLE_WAKEUP)
                          }
                      #endif  /* End (I2C_Pressure_ENABLE_WAKEUP) */
 281   1              
 282   1          #else
                      
                      #if (CY_UDB_V0)
                          uint8 enableInterrupts;
                          
                          /* Enable interrupts from block */
                          enableInterrupts = CyEnterCriticalSection();
                          I2C_Pressure_INT_ENABLE_REG |= I2C_Pressure_INT_ENABLE_MASK;
                          CyExitCriticalSection(enableInterrupts);
                          
                          /* Restore interrupt mask bits */
                          I2C_Pressure_INT_MASK_REG |= I2C_Pressure_backup.int_mask;
                          
                          #if (0u != (I2C_Pressure_MODE & I2C_Pressure_MODE_MASTER))
                              /* Restore Master Clock generator */
                              I2C_Pressure_MCLK_PRD_REG = I2C_Pressure_MCLK_PERIOD_VALUE;
                              I2C_Pressure_MCLK_CMP_REG = I2C_Pressure_MCLK_COMPARE_VALUE;
                          #endif /* End (0u != (I2C_Pressure_MODE & I2C_Pressure_MODE_MASTER)) */
                          
                          #if (0u != (I2C_Pressure_MODE & I2C_Pressure_MODE_SLAVE))
C51 COMPILER V9.03   I2C_PRESSURE_PM                                                       05/06/2015 20:00:59 PAGE 6   

                              /* Store slave address */
                              I2C_Pressure_ADDR_REG = I2C_Pressure_backup.addr;
                              
                              /* Restore slave bit counter period */
                              I2C_Pressure_PERIOD_REG = I2C_Pressure_PERIOD_VALUE;
                          #endif  /* End (0u != (I2C_Pressure_MODE & I2C_Pressure_MODE_SLAVE)) */
                          
                      #endif  /* End (CY_UDB_V0) */
                      
                      /* Restore CFG register */
                      I2C_Pressure_CFG_REG = I2C_Pressure_backup.control;
                      
                  #endif  /* End (I2C_Pressure_IMPLEMENTATION == I2C_Pressure_FF) */
 315   1          
 316   1          /* Enable interrupts */
 317   1          I2C_Pressure_EnableInt();
 318   1      }
 319          
 320          
 321          /*******************************************************************************
 322          * Function Name: I2C_Pressure_Wakeup
 323          ********************************************************************************
 324          *
 325          * Summary:
 326          *  Wakeup on address match enabled: enables I2C Master (if was enabled before go
 327          *  to sleep) and disables I2C backup regulator.
 328          *  Wakeup on address match disabled: Restores I2C configuration and non-retention 
 329          *  register values. Restores Active mode power template bits or clock gating as 
 330          *  appropriate.
 331          *  The I2C interrupt remains disabled after function call.
 332          *
 333          * Parameters:
 334          *  None
 335          *
 336          * Return:
 337          *  None
 338          *
 339          * Reentrant:
 340          *  No
 341          *
 342          *******************************************************************************/
 343          void I2C_Pressure_Wakeup(void) 
 344          {
 345   1          /* Restore I2C register settings */
 346   1          I2C_Pressure_RestoreConfig();
 347   1          
 348   1          /* Restore I2C Enable state */
 349   1          if (0u != I2C_Pressure_backup.enableState)
 350   1          {
 351   2              I2C_Pressure_Enable();
 352   2          }
 353   1      }
 354          
 355          
 356          /* [] END OF FILE */
C51 COMPILER V9.03   I2C_PRESSURE_PM                                                       05/06/2015 20:00:59 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION I2C_Pressure_SaveConfig (BEGIN)
                                           ; SOURCE LINE # 88
                                           ; SOURCE LINE # 89
                                           ; SOURCE LINE # 96
0000 9049D6            MOV     DPTR,#049D6H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      R     MOV     DPTR,#I2C_Pressure_backup+02H
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 97
000A 9049C8            MOV     DPTR,#049C8H
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F 900000      R     MOV     DPTR,#I2C_Pressure_backup+01H
0012 EF                MOV     A,R7
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
0014 9049DB            MOV     DPTR,#049DBH
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 900000      R     MOV     DPTR,#I2C_Pressure_backup+03H
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 108
001E 9049DC            MOV     DPTR,#049DCH
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 900000      R     MOV     DPTR,#I2C_Pressure_backup+04H
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
0028 7F0F              MOV     R7,#0FH
002A 120000      E     LCALL   _?CyIntDisable
                                           ; SOURCE LINE # 155
002D 22                RET     
             ; FUNCTION I2C_Pressure_SaveConfig (END)

             ; FUNCTION I2C_Pressure_Sleep (BEGIN)
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 181
                                           ; SOURCE LINE # 188
0000 9043A5            MOV     DPTR,#043A5H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5404              ANL     A,#04H
0008 FF                MOV     R7,A
0009 7E00              MOV     R6,#00H
000B EF                MOV     A,R7
000C 4E                ORL     A,R6
000D 600B              JZ      ?C0002
                                           ; SOURCE LINE # 189
                                           ; SOURCE LINE # 190
000F 900000      R     MOV     DPTR,#I2C_Pressure_backup
0012 7401              MOV     A,#01H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 191
0015 120000      E     LCALL   I2C_Pressure_Stop
C51 COMPILER V9.03   I2C_PRESSURE_PM                                                       05/06/2015 20:00:59 PAGE 8   

                                           ; SOURCE LINE # 192
0018 8005              SJMP    ?C0003
001A         ?C0002:
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 195
001A 900000      R     MOV     DPTR,#I2C_Pressure_backup
001D E4                CLR     A
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 196
001F         ?C0003:
                                           ; SOURCE LINE # 199
001F 120000      R     LCALL   I2C_Pressure_SaveConfig
                                           ; SOURCE LINE # 200
0022 22                RET     
             ; FUNCTION I2C_Pressure_Sleep (END)

             ; FUNCTION I2C_Pressure_RestoreConfig (BEGIN)
                                           ; SOURCE LINE # 224
                                           ; SOURCE LINE # 225
                                           ; SOURCE LINE # 263
0000 900000      R     MOV     DPTR,#I2C_Pressure_backup+01H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 9049C8            MOV     DPTR,#049C8H
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 264
000A 900000      R     MOV     DPTR,#I2C_Pressure_backup+02H
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F 9049D6            MOV     DPTR,#049D6H
0012 EF                MOV     A,R7
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 274
0014 900000      R     MOV     DPTR,#I2C_Pressure_backup+03H
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 9049DB            MOV     DPTR,#049DBH
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 275
001E 900000      R     MOV     DPTR,#I2C_Pressure_backup+04H
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 9049DC            MOV     DPTR,#049DCH
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 317
0028 7F0F              MOV     R7,#0FH
002A 120000      E     LCALL   _?CyIntEnable
                                           ; SOURCE LINE # 318
002D 22                RET     
             ; FUNCTION I2C_Pressure_RestoreConfig (END)

             ; FUNCTION I2C_Pressure_Wakeup (BEGIN)
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 344
                                           ; SOURCE LINE # 346
0000 120000      R     LCALL   I2C_Pressure_RestoreConfig
                                           ; SOURCE LINE # 349
0003 900000      R     MOV     DPTR,#I2C_Pressure_backup
0006 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   I2C_PRESSURE_PM                                                       05/06/2015 20:00:59 PAGE 9   

0007 FF                MOV     R7,A
0008 EF                MOV     A,R7
0009 6003              JZ      ?C0007
                                           ; SOURCE LINE # 350
                                           ; SOURCE LINE # 351
000B 120000      E     LCALL   I2C_Pressure_Enable
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 353
000E         ?C0007:
000E 22                RET     
             ; FUNCTION I2C_Pressure_Wakeup (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    142    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
