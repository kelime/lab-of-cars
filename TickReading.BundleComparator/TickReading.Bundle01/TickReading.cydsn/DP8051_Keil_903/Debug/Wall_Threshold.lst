C51 COMPILER V9.03   WALL_THRESHOLD                                                        05/06/2015 20:01:02 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE WALL_THRESHOLD
OBJECT MODULE PLACED IN .\DP8051_Keil_903\Debug\Wall_Threshold.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\2.1\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\Wall_Threshold.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_903\Debug\Wall_Threshold.lst) CD
                    - DB NOIP OT(2,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051_Keil_903\Debug\Wall_Threshold.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: Wall_Threshold.c  
   3          * Version 1.80
   4          *
   5          * Description:
   6          *  This file provides the source code to the API for the 8-bit Voltage DAC 
   7          *  (VDAC8) User Module.
   8          *
   9          * Note:
  10          *  Any unusual or non-standard behavior should be noted here. Other-
  11          *  wise, this section should remain blank.
  12          *
  13          ********************************************************************************
  14          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  15          * You may use this file only in accordance with the license, terms, conditions, 
  16          * disclaimers, and limitations in the end user license agreement accompanying 
  17          * the software package with which this file was provided.
  18          *******************************************************************************/
  19          
  20          #include "cytypes.h"
  21          #include "Wall_Threshold.h"
  22          
  23          #if (CY_PSOC5A)
              #include <CyLib.h>
              #endif /* CY_PSOC5A */
  26          
  27          uint8 Wall_Threshold_initVar = 0;
  28          
  29          #if (CY_PSOC5A)
                  uint8 Wall_Threshold_restoreVal = 0;
                  uint8 Wall_Threshold_intrStatus = 0u;
              #endif /* CY_PSOC5A */
  33          
  34          #if (CY_PSOC5A)
                  static Wall_Threshold_backupStruct Wall_Threshold_backup;
              #endif /* CY_PSOC5A */
  37          
  38          
  39          /*******************************************************************************
  40          * Function Name: Wall_Threshold_Init
  41          ********************************************************************************
  42          * Summary:
  43          *  Initialize to the schematic state.
  44          * 
  45          * Parameters:
  46          *  void:
  47          *
  48          * Return:
  49          *  void
  50          *
  51          * Theory:
  52          *
  53          * Side Effects:
C51 COMPILER V9.03   WALL_THRESHOLD                                                        05/06/2015 20:01:02 PAGE 2   

  54          *
  55          *******************************************************************************/
  56          void Wall_Threshold_Init(void) 
  57          {
  58   1          Wall_Threshold_CR0 = (Wall_Threshold_MODE_V );
  59   1      
  60   1          /* Set default data source */
  61   1          if(Wall_Threshold_DEFAULT_DATA_SRC != 0 )
  62   1          {
  63   2              Wall_Threshold_CR1 = (Wall_Threshold_DEFAULT_CNTL | Wall_Threshold_DACBUS_ENABLE) ;
  64   2          }
  65   1          else
  66   1          {
  67   2              Wall_Threshold_CR1 = (Wall_Threshold_DEFAULT_CNTL | Wall_Threshold_DACBUS_DISABLE) ;
  68   2          }
  69   1      
  70   1          /* Set default strobe mode */
  71   1          if(Wall_Threshold_DEFAULT_STRB != 0)
  72   1          {
  73   2              Wall_Threshold_Strobe |= Wall_Threshold_STRB_EN ;
  74   2          }
  75   1      
  76   1          /* Set default range */
  77   1          Wall_Threshold_SetRange(Wall_Threshold_DEFAULT_RANGE); 
  78   1      
  79   1          /* Set default speed */
  80   1          Wall_Threshold_SetSpeed(Wall_Threshold_DEFAULT_SPEED);
  81   1      }
  82          
  83          
  84          /*******************************************************************************
  85          * Function Name: Wall_Threshold_Enable
  86          ********************************************************************************
  87          * Summary:
  88          *  Enable the VDAC8
  89          * 
  90          * Parameters:
  91          *  void
  92          *
  93          * Return:
  94          *  void
  95          *
  96          * Theory:
  97          *
  98          * Side Effects:
  99          *
 100          *******************************************************************************/
 101          void Wall_Threshold_Enable(void) 
 102          {
 103   1          Wall_Threshold_PWRMGR |= Wall_Threshold_ACT_PWR_EN;
 104   1          Wall_Threshold_STBY_PWRMGR |= Wall_Threshold_STBY_PWR_EN;
 105   1      
 106   1          /*This is to restore the value of register CR0 ,
 107   1          which is modified  in Stop API , this prevents misbehaviour of VDAC */
 108   1          #if (CY_PSOC5A)
                      if(Wall_Threshold_restoreVal == 1) 
                      {
                           Wall_Threshold_CR0 = Wall_Threshold_backup.data_value;
                           Wall_Threshold_restoreVal = 0;
                      }
                  #endif /* CY_PSOC5A */
 115   1      }
C51 COMPILER V9.03   WALL_THRESHOLD                                                        05/06/2015 20:01:02 PAGE 3   

 116          
 117          
 118          /*******************************************************************************
 119          * Function Name: Wall_Threshold_Start
 120          ********************************************************************************
 121          *
 122          * Summary:
 123          *  The start function initializes the voltage DAC with the default values, 
 124          *  and sets the power to the given level.  A power level of 0, is the same as
 125          *  executing the stop function.
 126          *
 127          * Parameters:
 128          *  Power: Sets power level between off (0) and (3) high power
 129          *
 130          * Return:
 131          *  void 
 132          *
 133          * Global variables:
 134          *  Wall_Threshold_initVar: Is modified when this function is called for the 
 135          *  first time. Is used to ensure that initialization happens only once.
 136          *
 137          *******************************************************************************/
 138          void Wall_Threshold_Start(void)  
 139          {
 140   1          /* Hardware initiazation only needs to occure the first time */
 141   1          if(Wall_Threshold_initVar == 0)
 142   1          { 
 143   2              Wall_Threshold_Init();
 144   2              Wall_Threshold_initVar = 1;
 145   2          }
 146   1      
 147   1          /* Enable power to DAC */
 148   1          Wall_Threshold_Enable();
 149   1      
 150   1          /* Set default value */
 151   1          Wall_Threshold_SetValue(Wall_Threshold_DEFAULT_DATA); 
 152   1      }
 153          
 154          
 155          /*******************************************************************************
 156          * Function Name: Wall_Threshold_Stop
 157          ********************************************************************************
 158          *
 159          * Summary:
 160          *  Powers down DAC to lowest power state.
 161          *
 162          * Parameters:
 163          *  void
 164          *
 165          * Return:
 166          *  void
 167          *
 168          * Theory:
 169          *
 170          * Side Effects:
 171          *
 172          *******************************************************************************/
 173          void Wall_Threshold_Stop(void) 
 174          {
 175   1          /* Disble power to DAC */
 176   1          Wall_Threshold_PWRMGR &= ~Wall_Threshold_ACT_PWR_EN;
 177   1          Wall_Threshold_STBY_PWRMGR &= ~Wall_Threshold_STBY_PWR_EN;
C51 COMPILER V9.03   WALL_THRESHOLD                                                        05/06/2015 20:01:02 PAGE 4   

 178   1      
 179   1          /* This is a work around for PSoC5A  ,
 180   1          this sets VDAC to current mode with output off */
 181   1          #if (CY_PSOC5A)
                      Wall_Threshold_backup.data_value = Wall_Threshold_CR0;
                      Wall_Threshold_CR0 = Wall_Threshold_CUR_MODE_OUT_OFF;
                      Wall_Threshold_restoreVal = 1;
                  #endif /* CY_PSOC5A */
 186   1      }
 187          
 188          
 189          /*******************************************************************************
 190          * Function Name: Wall_Threshold_SetSpeed
 191          ********************************************************************************
 192          *
 193          * Summary:
 194          *  Set DAC speed
 195          *
 196          * Parameters:
 197          *  power: Sets speed value
 198          *
 199          * Return:
 200          *  void
 201          *
 202          * Theory:
 203          *
 204          * Side Effects:
 205          *
 206          *******************************************************************************/
 207          void Wall_Threshold_SetSpeed(uint8 speed) 
 208          {
 209   1          /* Clear power mask then write in new value */
 210   1          Wall_Threshold_CR0 &= ~Wall_Threshold_HS_MASK ;
 211   1          Wall_Threshold_CR0 |=  ( speed & Wall_Threshold_HS_MASK) ;
 212   1      }
 213          
 214          
 215          /*******************************************************************************
 216          * Function Name: Wall_Threshold_SetRange
 217          ********************************************************************************
 218          *
 219          * Summary:
 220          *  Set one of three current ranges.
 221          *
 222          * Parameters:
 223          *  Range: Sets one of Three valid ranges.
 224          *
 225          * Return:
 226          *  void 
 227          *
 228          * Theory:
 229          *
 230          * Side Effects:
 231          *
 232          *******************************************************************************/
 233          void Wall_Threshold_SetRange(uint8 range) 
 234          {
 235   1          Wall_Threshold_CR0 &= ~Wall_Threshold_RANGE_MASK ;      /* Clear existing mode */
 236   1          Wall_Threshold_CR0 |= ( range & Wall_Threshold_RANGE_MASK ) ; /*  Set Range  */
 237   1          Wall_Threshold_DacTrim();
 238   1      }
 239          
C51 COMPILER V9.03   WALL_THRESHOLD                                                        05/06/2015 20:01:02 PAGE 5   

 240          
 241          /*******************************************************************************
 242          * Function Name: Wall_Threshold_SetValue
 243          ********************************************************************************
 244          *
 245          * Summary:
 246          *  Set 8-bit DAC value
 247          *
 248          * Parameters:  
 249          *  value:  Sets DAC value between 0 and 255.
 250          *
 251          * Return: 
 252          *  void 
 253          *
 254          * Theory: 
 255          *
 256          * Side Effects:
 257          *
 258          *******************************************************************************/
 259          void Wall_Threshold_SetValue(uint8 value) 
 260          {
 261   1          #if (CY_PSOC5A)
                      Wall_Threshold_intrStatus = CyEnterCriticalSection();
                  #endif /* CY_PSOC5A */
 264   1      
 265   1          Wall_Threshold_Data = value;                /*  Set Value  */
 266   1      
 267   1          /* PSOC5A requires a double write */
 268   1          /* Exit Critical Section */
 269   1          #if (CY_PSOC5A)
                      Wall_Threshold_Data = value;
                      CyExitCriticalSection(Wall_Threshold_intrStatus);
                  #endif /* CY_PSOC5A */
 273   1      }
 274          
 275          
 276          /*******************************************************************************
 277          * Function Name: Wall_Threshold_DacTrim
 278          ********************************************************************************
 279          *
 280          * Summary:
 281          *  Set the trim value for the given range.
 282          *
 283          * Parameters:
 284          *  range:  1V or 4V range.  See constants.
 285          *
 286          * Return:
 287          *  void
 288          *
 289          * Theory: 
 290          *
 291          * Side Effects:
 292          *
 293          *******************************************************************************/
 294          void Wall_Threshold_DacTrim(void) 
 295          {
 296   1          uint8 mode;
 297   1      
 298   1          mode = ((Wall_Threshold_CR0 & Wall_Threshold_RANGE_MASK) >> 2) + Wall_Threshold_TRIM_M7_1V_RNG_OFFSET;
 299   1          Wall_Threshold_TR = CY_GET_XTND_REG8((uint8 *)(Wall_Threshold_DAC_TRIM_BASE + mode));
 300   1      }
 301          
C51 COMPILER V9.03   WALL_THRESHOLD                                                        05/06/2015 20:01:02 PAGE 6   

 302          
 303          /* [] END OF FILE */
C51 COMPILER V9.03   WALL_THRESHOLD                                                        05/06/2015 20:01:02 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Wall_Threshold_Init (BEGIN)
                                           ; SOURCE LINE # 56
                                           ; SOURCE LINE # 57
                                           ; SOURCE LINE # 58
0000 905820            MOV     DPTR,#05820H
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 61
                                           ; SOURCE LINE # 62
                                           ; SOURCE LINE # 63
                                           ; SOURCE LINE # 64
0005         ?C0001:
                                           ; SOURCE LINE # 66
                                           ; SOURCE LINE # 67
0005 905821            MOV     DPTR,#05821H
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 68
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 73
                                           ; SOURCE LINE # 74
000A         ?C0003:
                                           ; SOURCE LINE # 77
000A 7F00              MOV     R7,#00H
000C 120000      R     LCALL   _Wall_Threshold_SetRange
                                           ; SOURCE LINE # 80
000F 7F00              MOV     R7,#00H
0011 120000      R     LCALL   _Wall_Threshold_SetSpeed
                                           ; SOURCE LINE # 81
0014 22                RET     
             ; FUNCTION Wall_Threshold_Init (END)

             ; FUNCTION Wall_Threshold_Enable (BEGIN)
                                           ; SOURCE LINE # 101
                                           ; SOURCE LINE # 102
                                           ; SOURCE LINE # 103
0000 9043A8            MOV     DPTR,#043A8H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4401              ORL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 104
000B 9043B8            MOV     DPTR,#043B8H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 4401              ORL     A,#01H
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 115
0016 22                RET     
             ; FUNCTION Wall_Threshold_Enable (END)

             ; FUNCTION Wall_Threshold_Start (BEGIN)
C51 COMPILER V9.03   WALL_THRESHOLD                                                        05/06/2015 20:01:02 PAGE 8   

                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 139
                                           ; SOURCE LINE # 141
0000 900000      R     MOV     DPTR,#Wall_Threshold_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7009              JNZ     ?C0006
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 143
0008 120000      R     LCALL   Wall_Threshold_Init
                                           ; SOURCE LINE # 144
000B 900000      R     MOV     DPTR,#Wall_Threshold_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 145
0011         ?C0006:
                                           ; SOURCE LINE # 148
0011 120000      R     LCALL   Wall_Threshold_Enable
                                           ; SOURCE LINE # 151
0014 7FFA              MOV     R7,#0FAH
0016 120000      R     LCALL   _Wall_Threshold_SetValue
                                           ; SOURCE LINE # 152
0019 22                RET     
             ; FUNCTION Wall_Threshold_Start (END)

             ; FUNCTION Wall_Threshold_Stop (BEGIN)
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 174
                                           ; SOURCE LINE # 176
0000 9043A8            MOV     DPTR,#043A8H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 177
000B 9043B8            MOV     DPTR,#043B8H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54FE              ANL     A,#0FEH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 186
0016 22                RET     
             ; FUNCTION Wall_Threshold_Stop (END)

             ; FUNCTION _Wall_Threshold_SetSpeed (BEGIN)
                                           ; SOURCE LINE # 207
0000 900000      R     MOV     DPTR,#speed
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 210
0005 905820            MOV     DPTR,#05820H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
C51 COMPILER V9.03   WALL_THRESHOLD                                                        05/06/2015 20:01:02 PAGE 9   

000B 54FD              ANL     A,#0FDH
000D FF                MOV     R7,A
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 211
0010 905820            MOV     DPTR,#05820H
0013 C083              PUSH    DPH
0015 C082              PUSH    DPL
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 900000      R     MOV     DPTR,#speed
001C E0                MOVX    A,@DPTR
001D FE                MOV     R6,A
001E EE                MOV     A,R6
001F 5402              ANL     A,#02H
0021 FE                MOV     R6,A
0022 EF                MOV     A,R7
0023 4E                ORL     A,R6
0024 FF                MOV     R7,A
0025 D082              POP     DPL
0027 D083              POP     DPH
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 212
002B 22                RET     
             ; FUNCTION _Wall_Threshold_SetSpeed (END)

             ; FUNCTION _Wall_Threshold_SetRange (BEGIN)
                                           ; SOURCE LINE # 233
0000 900000      R     MOV     DPTR,#range
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 235
0005 905820            MOV     DPTR,#05820H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 54F3              ANL     A,#0F3H
000D FF                MOV     R7,A
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 236
0010 905820            MOV     DPTR,#05820H
0013 C083              PUSH    DPH
0015 C082              PUSH    DPL
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 900000      R     MOV     DPTR,#range
001C E0                MOVX    A,@DPTR
001D FE                MOV     R6,A
001E EE                MOV     A,R6
001F 540C              ANL     A,#0CH
0021 FE                MOV     R6,A
0022 EF                MOV     A,R7
0023 4E                ORL     A,R6
0024 FF                MOV     R7,A
0025 D082              POP     DPL
0027 D083              POP     DPH
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 237
C51 COMPILER V9.03   WALL_THRESHOLD                                                        05/06/2015 20:01:02 PAGE 10  

002B 120000      R     LCALL   Wall_Threshold_DacTrim
                                           ; SOURCE LINE # 238
002E 22                RET     
             ; FUNCTION _Wall_Threshold_SetRange (END)

             ; FUNCTION _Wall_Threshold_SetValue (BEGIN)
                                           ; SOURCE LINE # 259
0000 900000      R     MOV     DPTR,#value
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 260
                                           ; SOURCE LINE # 265
0005 900000      R     MOV     DPTR,#value
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 905B80            MOV     DPTR,#05B80H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 273
000F 22                RET     
             ; FUNCTION _Wall_Threshold_SetValue (END)

             ; FUNCTION Wall_Threshold_DacTrim (BEGIN)
                                           ; SOURCE LINE # 294
                                           ; SOURCE LINE # 295
                                           ; SOURCE LINE # 298
0000 905820            MOV     DPTR,#05820H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 540C              ANL     A,#0CH
0008 FF                MOV     R7,A
0009 7E00              MOV     R6,#00H
000B EF                MOV     A,R7
000C 7802              MOV     R0,#02H
000E         ?C0013:
000E CE                XCH     A,R6
000F C3                CLR     C
0010 13                RRC     A
0011 CE                XCH     A,R6
0012 13                RRC     A
0013 D8F9              DJNZ    R0,?C0013
0015 FF                MOV     R7,A
0016 EF                MOV     A,R7
0017 2406              ADD     A,#06H
0019 FF                MOV     R7,A
001A 900000      R     MOV     DPTR,#mode
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 299
001F 900000      R     MOV     DPTR,#mode
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 E4                CLR     A
0025 FC                MOV     R4,A
0026 FD                MOV     R5,A
0027 FE                MOV     R6,A
0028 EF                MOV     A,R7
0029 2420              ADD     A,#020H
002B FF                MOV     R7,A
002C EE                MOV     A,R6
002D 3401              ADDC    A,#01H
C51 COMPILER V9.03   WALL_THRESHOLD                                                        05/06/2015 20:01:02 PAGE 11  

002F FE                MOV     R6,A
0030 ED                MOV     A,R5
0031 340C              ADDC    A,#0CH
0033 FD                MOV     R5,A
0034 EC                MOV     A,R4
0035 3400              ADDC    A,#00H
0037 FC                MOV     R4,A
0038 A907              MOV     R1,AR7
003A AA06              MOV     R2,AR6
003C AB05              MOV     R3,AR5
003E 120000      E     LCALL   _cyread8
0041 904608            MOV     DPTR,#04608H
0044 EF                MOV     A,R7
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 300
0046 22                RET     
             ; FUNCTION Wall_Threshold_DacTrim (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    271    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
