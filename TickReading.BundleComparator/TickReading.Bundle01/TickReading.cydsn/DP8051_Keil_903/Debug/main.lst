C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\DP8051_Keil_903\Debug\main.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\2.1\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe 
                    -.\main.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_903\Debug\main.lst) CD DB NOIP OT(2,SIZE) INCDIR(Generated_Source
                    -\PSoC3) OJ(.\DP8051_Keil_903\Debug\main.obj)

line level    source

   1          /* ====================================================================================
   2           * 
   3           *  ELE 302
   4           *  Jean Juang and Emmily Kent
   5           *  Speed Control PSoC Implementation
   6           * 
   7           *  Contained is the the PWM motor controller/Hall Effects Sensor/PSoC interface code.
   8           *  PSoC receives the "ticks" from the Hall Effects Sensor. Converts ticks into speed.
   9           *  Outputs pulse width modulated signal to the gate of the transistor.
  10           *  Used PI control.
  11           *
  12           * =================================================================================== */
  13            
  14          #include <device.h>
  15          #include <stdio.h>
  16          #include <stdlib.h>
  17          
  18          // BMP085 header files
  19          //#include "MyISRs.h"
  20          
  21          #define M_PI 3.14159265358979323846 //y u no work, math.h
  22          
  23          typedef enum { false = 0u, true = 1u } bool;
  24          
  25          /* Constants for the altimeter */
  26          int temp;                       // temperature data
  27          long press;                     // pressure data
  28          char OutputString[12]={0};      // for LCD
  29          
  30          /* Constants and variables defined for Hall Effect processing*/
  31          
  32          static const float clock_freq = 100000; // Component clock frequency - 100kHz
  33          static const float clock_period = 1000; // Period of the PWM. Tradeoff between resolution and speed of res
             -ponse. Should be updating every 0.01 seconds
  34          static const float convert = 60/(2.459*M_PI); // Conversion factor for ticks per feet 
  35          static float speed = 0; // current speed in feet per second
  36          static float ticks = 0; // calculated 23.3004 ticks per second for speed = 3 feet/sec
  37          static float ticks_per_sec = 0;
  38          static float prevticks = 0;
  39          static uint8 overflow = 0; // overflow counter. shouldn't update
  40          
  41          /* PID helper variables */
  42          static const float target = 1.5;// target speed in ft/sec
  43          static float error = 0; // difference between desired speed and actual speed
  44          static float var = 0; // affects current speed
  45          static float sum = 0; // integral
  46          static float dt = 0; // time interval. used in integral term.
  47          
  48          /* PID constants */
  49          static const float kp = 1200; // proportional
  50          static const float ki = 30; // integral
  51          
  52          static float open_loop_guess = 110; // initialize duty cycle to 11%
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 2   

  53          static uint16 duty = 110;
  54          static uint16 number_of_ticks = 0;
  55          
  56          /* FSM State Initializations */
  57          
  58          // Define states
  59          static uint16 wait_for_elevator = 0;
  60          static uint16 move_forward = 1;
  61          static uint16 waiting = 2;
  62          static uint16 in_elevator = 3;
  63          static uint16 move_backward = 4;
  64          static uint16 turning = 5;
  65          static uint16 forward_to_wall = 6; // go forward a little bit so it will see the wall
  66          static uint16 follow_line = 7;
  67          static uint16 done = 99;
  68          
  69          // Set initial state
  70          static uint16 state = 7;
  71          
  72          // are you going into the Elevator?
  73          static bool isGoingElevator = false;
  74          
  75          /*================================
  76          // End Variable Initializations
  77          // Interrupts Begin Here
  78          //================================*/
  79          
  80          // triggered with each "tick" from the Hall Effect sensor.
  81          // monitors current speed and adjusts PWM duty cycle
  82          
  83          /*==================================================================
  84          // Begin Hall Effect (tick) interrupt. Majority of processing code.
  85          //================================================================*/
  86          
  87          CY_ISR(tock)
  88          { 
  89   1          float prev;
  90   1          
  91   1          // counts the number of ticks to determine how far the car has traveled
  92   1          number_of_ticks = number_of_ticks + 1;  
  93   1                 
  94   1          // update ticks
  95   1          ticks = (float) Hall_Counter_ReadCapture();  // elapsed time in between each tick 
  96   1          
  97   1          // change in time
  98   1          dt = (ticks)/clock_freq; //
  99   1          
 100   1          ticks_per_sec = clock_freq/ticks; // ticks per second
 101   1          
 102   1          speed = ticks_per_sec/convert; // convert ticks/sec to speed. Calculations to get convert in lab noteb
             -ook.
 103   1            
 104   1          prev = error; // holds value for previous error
 105   1          error = target - speed; // current error
 106   1          sum += error*dt; // running sum of error. Integration process.
 107   1          
 108   1          var = (kp * error)+ (ki * sum);
 109   1                  
 110   1          // initialize the duty cycle to the open-loop guess
 111   1          if (speed == 0) {
 112   2              duty = (uint16) open_loop_guess;
 113   2              sum = 0;
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 3   

 114   2          }
 115   1          // limit the PWM duty cycle to 100%
 116   1          else if (open_loop_guess + var > (clock_period - 1.0)) 
 117   1          {   duty = (uint16) (clock_period - 1.0);   }
 118   1          
 119   1          // limit the PWM duty cycle to 0%
 120   1          else if (open_loop_guess + var < 0.0)
 121   1          {   duty = 0;   }
 122   1          // Adjust the duty cycle by the amount calculated through the PI process
 123   1          else 
 124   1          {   duty = (uint16) (open_loop_guess + var);    }
 125   1          
 126   1          LCD_Position(1,13);
 127   1          LCD_PrintNumber(state);
 128   1                 
 129   1       /*   LCD_Position(0,10);
 130   1          if(isGoingElevator) {
 131   1              LCD_PrintString("true");
 132   1          } else {
 133   1              LCD_PrintString("false");
 134   1          }
 135   1      */
 136   1          // 1 tick is ~1.545 inches traveled!
 137   1          if (number_of_ticks >= 28 && state == move_forward) {
 138   2             
 139   2              // stop car!
 140   2              uint8 control = 0; 
 141   2              uint32 wait_milliseconds = 1000;
 142   2              
 143   2              Drive_Control_Reg_Write(control);        
 144   2              
 145   2              number_of_ticks = 0;
 146   2              // wait for elevator door to close so the rangefinder in the back doesnt get confused
 147   2              // CyDelay(wait_milliseconds); // idk... breaks things... must be bad to wait in an interrupt
 148   2              
 149   2              //LCD_Position(1,0);
 150   2              //LCD_PrintString("wait over");
 151   2              
 152   2              Wait_Counter_Start();
 153   2              state = waiting;
 154   2          }
 155   1              
 156   1      if (number_of_ticks >= 105 && state == move_backward) {
 157   2              // stop car because back EMF
 158   2              uint8 control = 0;
 159   2              Drive_Control_Reg_Write(control);
 160   2              
 161   2              // sleep        
 162   2              LCD_Position(1,0);
 163   2              LCD_PrintString("s");
 164   2              LCD_Position(1,1);
 165   2              LCD_PrintString("leep"); // this is ridiculous i am sorry
 166   2              
 167   2              // turn left 
 168   2              PWM_Steering_WriteCompare(100);
 169   2              
 170   2              // start car again
 171   2              control = 2;
 172   2              Drive_Control_Reg_Write(control);
 173   2      
 174   2              number_of_ticks = 0;
 175   2              state = turning;
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 4   

 176   2          }
 177   1          
 178   1          if (number_of_ticks >= 31 && state == turning) {
 179   2              uint8 control = 2;
 180   2              
 181   2              PWM_Steering_WriteCompare(152);
 182   2                      
 183   2              Drive_Control_Reg_Write(control);
 184   2              
 185   2              number_of_ticks = 0;
 186   2              state = forward_to_wall;
 187   2              
 188   2             // state = 5; // 5 is turning. staying in state.
 189   2          }
 190   1          
 191   1          if (number_of_ticks >= 15 && state == forward_to_wall){
 192   2              state = follow_line;
 193   2          }
 194   1              
 195   1         // transpose reading of ADC data to tick   
 196   1         // if (number_of_ticks >= 100 && state == follow_line)
 197   1         // {
 198   1         //     uint8 control = 0;
 199   1         //     Drive_Control_Reg_Write(control);
 200   1         // }
 201   1         
 202   1         // transpose reading of ADC data to tick  
 203   1            
 204   1        //  if (state == follow_line)
 205   1         // {
 206   1                      
 207   1         // }
 208   1          
 209   1          // duty cycle is (compare value / period val) * 100. Duty cycle is defined by compare value.
 210   1          PWM_WriteCompare(duty); // for CMP (LED input) to be true, counted value needs to be less than the com
             -pare value
 211   1          
 212   1          // clear interrupt
 213   1          Hall_Counter_ReadStatusRegister();
 214   1      }
 215          
 216          /*=======================================
 217          // End Hall Interrupt
 218          //=====================================*/
 219          
 220          // it has been 3 minutes with no input. what did you do wrong. this should not trigger.
 221          CY_ISR(flow)
 222          {
 223   1         overflow++;
 224   1         /*LCD_Position(0,0);
 225   1         LCD_PrintString("Overflow        "); 
 226   1         */
 227   1         // clear interrupt
 228   1          Hall_Counter_ReadStatusRegister();
 229   1      }
 230          
 231          /* variables for steering control */
 232          // uses PD control!
 233          static uint8 signal_low_seen = 0;
 234          static uint16 clock_start_time = 0;
 235          static uint16 line_start_time = 0;
 236          static uint16 clock_end_time = 0;
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 5   

 237          static double clock_diff_time = 0;
 238          static double steering_error = 0;
 239          static double steering_error_sum = 0;
 240          static double prev_steering_error = 0;
 241          static double derivative = 0;
 242          static uint16 steering_value = 152; // PWM width 1.52 ms to be straight
 243          
 244          // do something once 50th line  is read
 245          CY_ISR(fifty)
 246          {   clock_start_time = Line_Timer_ReadCapture();
 247   1          line_start_time = Line_Timer_ReadCapture();
 248   1          //clock_end_time = Line_Timer_ReadCapture();
 249   1          clock_diff_time = clock_start_time - line_start_time;
 250   1          steering_error = clock_diff_time - 768; // 768 = time at the middle of the line 
 251   1          steering_error_sum = steering_error_sum + steering_error;
 252   1          derivative = steering_error - prev_steering_error;
 253   1          prev_steering_error = steering_error;
 254   1          
 255   1          if (clock_diff_time > 10000) {
 256   2              // do nothing
 257   2          } else {
 258   2              /*LCD_Position(1,0);
 259   2              LCD_PrintNumber(clock_diff_time);
 260   2              
 261   2              LCD_Position(1,8); */
 262   2              
 263   2              steering_value = 152 + 0.1 * steering_error; //+ 0.4 * derivative; //+ 0.00001 * steering_error_su
             -m;
 264   2             // LCD_Position(1,0);
 265   2             // LCD_PrintNumber(clock_diff_time);
 266   2              
 267   2              // bang-bang control
 268   2              
 269   2              /*
 270   2              if(steering_error < 999 && steering_error > 0) {
 271   2                  LCD_Position(1,0);
 272   2                  LCD_PrintNumber(steering_error);
 273   2              }
 274   2              else {
 275   2                  LCD_Position(1,0);
 276   2                  LCD_PrintNumber(999);
 277   2              }
 278   2              */
 279   2              
 280   2              // if you are line follwing, pay attention to the camera input / changes needed in wheels.
 281   2              if (state == follow_line) 
 282   2              { 
 283   3              PWM_Steering_WriteCompare(steering_value);
 284   3              }
 285   2              
 286   2              if (clock_diff_time - 400 > 0) {
 287   3              //    LCD_Position(0,5);
 288   3                //  LCD_PrintString("left");
 289   3               //   PWM_Steering_WriteCompare(100);    
 290   3              }
 291   2              else if (clock_diff_time - 400 < 0) {
 292   3              //    LCD_Position(0,5);
 293   3              //    LCD_PrintString("right");
 294   3              //    PWM_Steering_WriteCompare(200);
 295   3              }
 296   2              
 297   2          }
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 6   

 298   1               
 299   1          // clear interrupt
 300   1          Line_Timer_ReadStatusRegister();
 301   1          
 302   1      }
 303          
 304          // do something once 100 lines are read
 305          // count how many lines have been read for each frame!
 306          CY_ISR(hundred)
 307          {
 308   1        // counter value holds lines
 309   1          float lines;
 310   1          char linestr[16];
 311   1          
 312   1          //lines = (float) Lines_Per_Frame_Counter_ReadCounter();  // lines per frame
 313   1          
 314   1          // Display the lines per frame
 315   1         // LCD_Position(0,0);
 316   1          //sprintf(linestr, "Lines/frame:%+1.3f  ", lines); // ugly
 317   1          //LCD_PrintString(linestr);
 318   1          //LCD_PrintNumber(Lines_Per_Frame_Counter_ReadCounter());
 319   1          
 320   1        // clear interrupt
 321   1           Lines_Per_Frame_Counter_ReadStatusRegister();
 322   1      }
*** WARNING C280 IN LINE 309 OF .\main.c: 'lines': unreferenced local variable
*** WARNING C280 IN LINE 310 OF .\main.c: 'linestr': unreferenced local variable
 323          
 324          // thrown when doors are detected to be open by front rangefinder
 325          // rangefinder comparator value is currently set at 1.0V
 326          CY_ISR(elevator_entering)
 327          {
 328   1          if (state == wait_for_elevator) {
 329   2              uint8 control = 2;  // enable h-bridge, move forward
 330   2      
 331   2              Drive_Control_Reg_Write(control);
 332   2              state = move_forward;
 333   2          }
 334   1      }
 335          
 336          // thrown once 1.1 seconds have passed when in wait stage
 337          CY_ISR(isr_waiting) {
 338   1          if (state == waiting) {
 339   2          
 340   2              state = in_elevator;
 341   2              
 342   2              LCD_Position(0,0);
 343   2              LCD_PrintNumber(state);
 344   2              
 345   2              LCD_Position(1,0);
 346   2              LCD_PrintString("wait over");
 347   2          }
 348   1      }
 349          
 350          // thrown when doors are detected to be open by back rangefinder
 351          CY_ISR(elevator_leaving) {
 352   1          if (state == in_elevator) {
 353   2              uint8 control = 3; //enable h-bridge, move backward
 354   2      
 355   2              Drive_Control_Reg_Write(control);
 356   2              state = move_backward;
 357   2          }
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 7   

 358   1      }
 359          
 360          CY_ISR(pixy)
 361          {
 362   1       /*   if (state == follow_line){
 363   1              uint8 control = 0;
 364   1              Drive_Control_Reg_Write(control);
 365   1              state = done;
 366   1          }
 367   1      */}
 368              /*==================================================
 369              // ADC Testing / Debugging Code. Stay Commented Out
 370              //==================================================*/
 371              
 372              float error_sum_range = 0;
 373              float prev_error_range = 0;
 374              float differential_range = 0;
 375              float p_range = 75; // do conversion;
 376              float i_range = 0;
 377              float d_range = 0; //tim0e scale is 100.
 378              float open_loop_volts = 0.8; // set point voltage. distance of 1.2V
 379              
 380           CY_ISR(ADC_Side_Rangefinder_ISR1){
 381   1      
 382   1          int32 result;
 383   1          float resultInVolts; 
 384   1          
 385   1          float error_range;
 386   1          float steering_range;
 387   1          char resultstr[16];
 388   1          char pidstr[16];
 389   1          uint8 control;    
 390   1              
 391   1          LCD_Position(1,14);    
 392   1          LCD_PrintString("(:");
 393   1             
 394   1          if (state == follow_line) {  
 395   2          
 396   2          // start car again
 397   2          uint8 control = 2;
 398   2          Drive_Control_Reg_Write(control);
 399   2         
 400   2          // store old value
 401   2          prev_error_range = error_range;
 402   2              
 403   2          result = ADC_Side_Rangefinder_GetResult32(); 
 404   2          
 405   2          resultInVolts = ADC_Side_Rangefinder_CountsTo_Volts(result); // you've got volts!
 406   2          
 407   2          error_range = resultInVolts - open_loop_volts; // difference between what the ADC reads and 1.2V
 408   2          
 409   2          differential_range = error_range - prev_error_range;
 410   2          
 411   2          // account for door. if drops down by a lot, throw out.
 412   2         // if ((error_range - prev_error_range) < -0.5)
 413   2         if ((differential_range < -0.5) || (differential_range > 0.8))
 414   2          {   error_range = prev_error_range;
 415   3              LCD_Position(0,14);
 416   3              LCD_PrintString("NO");
 417   3          }     
 418   2              
 419   2          // constantssss
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 8   

 420   2          error_sum_range = error_sum_range + error_range;
 421   2               
 422   2          // negative to accommodate for ~2.1V being close, ~0.4V being far. 
 423   2          steering_range = 152 - (p_range * error_range); // - (i_range * error_sum_range); //+ d_range * differ
             -ential_range;
 424   2          LCD_Position(0,0);
 425   2          sprintf(pidstr, "err: %1.2f   ", steering_range);
 426   2          LCD_PrintString(pidstr);
 427   2          
 428   2          PWM_Steering_WriteCompare(steering_range);
 429   2         
 430   2          LCD_Position(1,0);
 431   2          sprintf(resultstr, "ADC: %1.4f", resultInVolts); // uglyy
 432   2          LCD_PrintString(resultstr);
 433   2             // LCD_Position(1,0);
 434   2              //LCD_PrintNumber();
 435   2          }
 436   1      } 
*** WARNING C280 IN LINE 389 OF .\main.c: 'control': unreferenced local variable
 437                  
 438          /*===========================================
 439          // Defining BMP085 Code
 440          //==========================================*/
 441          
 442          //CY_ISR(isr_altimeter){
 443          //    if (state == 33){
 444                  // wait until pressure is read
 445                  // do nothing for now. test online code first.
 446          //        }
 447          // }
 448          
 449          //CY_ISR(ISR_ConvDone_Interrupt){
 450          //    if (state == 33) {
 451                //  LCD_Position(1,0);
 452                //  LCD_PrintString("yay.");
 453            //      }
 454          //}
 455          
 456          void main()
 457          {
 458   1      /* Place your initialization/startup code here (e.g. MyInst_Start()) */
 459   1      
 460   1      // temp
 461   1          uint8 start_control = 0; // start by not moving    
 462   1          
 463   1          uint16 counter_print = 0;
 464   1                       
 465   1          // Enable interrupts
 466   1          CyGlobalIntEnable;
 467   1          
 468   1          // start speed control/Hall Effect components
 469   1          Hall_Counter_Start();
 470   1          Clock_Hall_Start();    
 471   1          
 472   1          // start steering control components
 473   1      //    Clock_Steering_Start();
 474   1      //    Lines_Per_Frame_Counter_Start(); // monitors how many lines have been traversed per frame
 475   1      //    Camera_Comp_Start(); // initializes the comparator -- is the camera receiving black or white?
 476   1      //    Camera_Threshold_Start(); // Voltage that decides whether signal is black or white    
 477   1          
 478   1          // start PWM components  
 479   1          PWM_Start(); 
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 9   

 480   1          PWM_Steering_Start(); 
 481   1                
 482   1          // start display LCD screen  
 483   1          LCD_Start();
 484   1       //   LCD_Position(0,0);    
 485   1       //   LCD_PrintString("State:");
 486   1          
 487   1          // start interrupt service routines
 488   1          ISR_Hall_Start();
 489   1          ISR_Hall_SetVector(tock); // convert Hall sensor "ticks" to speed, control PWM output
 490   1          ISR_Overflow_Start();
 491   1          ISR_Overflow_SetVector(flow); // monitor overflow in Hall Effects sensor. Should not trigger.
 492   1          
 493   1          ISR_50_Lines_Start(); // process image data on the 50th line
 494   1          ISR_50_Lines_SetVector(fifty);
 495   1          ISR_100_Lines_Start(); // process image data on the 100th line
 496   1          ISR_100_Lines_SetVector(hundred);
 497   1          
 498   1          Line_Timer_Start(); // DONT MOVE THIS. Timer needs to start AFTER the ISR.
 499   1         
 500   1          // Elevator
 501   1          Elevator_Threshold_Start();
 502   1          Elevator_Comparator_Start();
 503   1          ISR_Elevator_Start();
 504   1          ISR_Elevator_SetVector(elevator_entering);
 505   1          
 506   1          Elevator_Comparator_1_Start();
 507   1          ISR_Elevator_2_Start();
 508   1          ISR_Elevator_2_SetVector(elevator_leaving);
 509   1          
 510   1          //Waiting
 511   1          Wait_Clock_Start();
 512   1          ISR_Wait_Start();
 513   1          ISR_Wait_SetVector(isr_waiting);    
 514   1          
 515   1          // sets the initial speed
 516   1          PWM_WriteCompare((uint16) open_loop_guess);
 517   1          
 518   1          // enables h-bridge, forward direction
 519   1          Drive_Control_Reg_Write(start_control);
 520   1          
 521   1          // start an interrupt for the pressure to be read at intervals
 522   1          // use a timer -- reads values every 5 seconds
 523   1          
 524   1          ISR_Pixy_Start();
 525   1          ISR_Pixy_SetVector(pixy);
 526   1          
 527   1       //   ISR_Altimeter_Start();
 528   1       //   ISR_Altimeter_SetVector(isr_altimeter);
 529   1      //    Altimeter_Clock_Start();
 530   1      //    Altimeter_Counter_Start();   
 531   1          
 532   1      //    I2C_Pressure_Start();
 533   1          
 534   1          //ISR_ConvDone_StartEx(ConvDone); // data ready flag
 535   1      // LCD_Position(0,0);             LCD_PrintString("one");
 536   1      //CyWdtStart(CYWDT_128_TICKS    , 0) ;    // Configuring the watchdog to 256 – 384 ms      CyWdtClear() 
             -- see MyISRs.h 
 537   1       //LCD_Position(0,0);             LCD_PrintString("two");    
 538   1       //   BMP085GetCoeff();     // read calibration coefficients from memory BMP085
 539   1          
 540   1          
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 10  

 541   1          /*===============================
 542   1          // ADC Debugging Start Parameters
 543   1          //==============================*/
 544   1          
 545   1            
 546   1          LCD_Position(1,0);    
 547   1          LCD_PrintNumber(state);
 548   1          
 549   1          
 550   1          // start ADC
 551   1          Wall_Threshold_Start();
 552   1        //  ISR_Side_Rangefinder_Start();                          // Now thrown within the ADC conversion inter
             -rupt. 
 553   1        //  ISR_Side_Rangefinder_SetVector(isr_side_rangefinder); // this is for visual debugging. change once t
             -uned.
 554   1          ADC_Side_Rangefinder_Start();
 555   1          ADC_Side_Rangefinder_IRQ_Enable(); 
 556   1          ADC_Side_Rangefinder_StartConvert(); 
 557   1          
 558   1           //  LCD_Position(0,0);             LCD_PrintString("lol");     
 559   1             
 560   1           for(;;)
 561   1           {             
 562   2          
 563   2          
 564   2        /* Display the temperature in degrees Celsius */  
 565   2       //   LCD_Position(0,0);             LCD_PrintString("t(C) = ");      
 566   2          
 567   2          /* read the temperature and pressure with the selected accuracy */ 
 568   2      //    BMP085GetResult(&temp,&press,ULTRALOWPOWER); // over-sampling ratio values = ULTRALOWPOWER, STANDARD
             -, HIGHRES, ULTRAHIGHRES   
 569   2      //    LCD_Position(0,0); LCD_PrintString("converted");
 570   2       //   sprintf(OutputString, "temp %d", temp); // ugly
 571   2       //   LCD_Position(0,0);  LCD_PrintString(OutputString);
 572   2       //   LCD_PrintNumber(temp/10);      LCD_PrintString(",");  // degrees
 573   2       //   LCD_PrintNumber(temp%10);                                  // tenths of a degree
 574   2         /* Display the pressure in Pascals */ 
 575   2       //   sprintf(OutputString,"%ld",press);
 576   2       //   LCD_Position(1,0);                 LCD_PrintString("P(Pa)= ");  
 577   2          
 578   2          
 579   2       //   LCD_PrintString(OutputString);    
 580   2        
 581   2       //   CyDelay(100u/*ms*/);
 582   2       
 583   2              //counter_print++;
 584   2              
 585   2              if (counter_print == 10000) {
 586   3                  //LCD_ClearDisplay();
 587   3                  
 588   3                  //LCD_Position(0,5);
 589   3                  //LCD_PrintNumber(duty);
 590   3      
 591   3                  
 592   3                  /*LCD_Position(0,10);
 593   3                  if(isGoingElevator) {
 594   3                      LCD_PrintString("true");
 595   3                  } else {
 596   3                   LCD_PrintString("false");
 597   3                  }*/
 598   3                  counter_print = 0;
 599   3              }
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 11  

 600   2              
 601   2          }
 602   1      }
 603          
 604          /* [] END OF FILE */
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 12  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION tock (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 92
002B 900000      R     MOV     DPTR,#number_of_ticks
002E E4                CLR     A
002F 75F001            MOV     B,#01H
0032 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 95
0035 120000      E     LCALL   Hall_Counter_ReadCapture
0038 E4                CLR     A
0039 120000      E     LCALL   ?C?FCASTL
003C 900000      R     MOV     DPTR,#ticks
003F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 98
0042 900000      R     MOV     DPTR,#clock_freq
0045 120000      E     LCALL   ?C?LLDXDATA0
0048 900000      R     MOV     DPTR,#ticks
004B 120000      E     LCALL   ?C?LLDXDATA
004E 120000      E     LCALL   ?C?FPDIV
0051 900000      R     MOV     DPTR,#dt
0054 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 100
0057 900000      R     MOV     DPTR,#ticks
005A 120000      E     LCALL   ?C?LLDXDATA0
005D 900000      R     MOV     DPTR,#clock_freq
0060 120000      E     LCALL   ?C?LLDXDATA
0063 120000      E     LCALL   ?C?FPDIV
0066 900000      R     MOV     DPTR,#ticks_per_sec
0069 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 102
006C 900000      R     MOV     DPTR,#convert
006F 120000      E     LCALL   ?C?LLDXDATA0
0072 900000      R     MOV     DPTR,#ticks_per_sec
0075 120000      E     LCALL   ?C?LLDXDATA
0078 120000      E     LCALL   ?C?FPDIV
007B 900000      R     MOV     DPTR,#speed
007E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 104
0081 900000      R     MOV     DPTR,#error
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 13  

0084 120000      E     LCALL   ?C?LLDXDATA
0087 900000      R     MOV     DPTR,#prev
008A 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 105
008D 900000      R     MOV     DPTR,#speed
0090 120000      E     LCALL   ?C?LLDXDATA0
0093 900000      R     MOV     DPTR,#target
0096 120000      E     LCALL   ?C?LLDXDATA
0099 120000      E     LCALL   ?C?FPSUB
009C 900000      R     MOV     DPTR,#error
009F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 106
00A2 900000      R     MOV     DPTR,#sum
00A5 120000      E     LCALL   ?C?LLDXDATA
00A8 C004              PUSH    AR4
00AA C005              PUSH    AR5
00AC C006              PUSH    AR6
00AE C007              PUSH    AR7
00B0 900000      R     MOV     DPTR,#dt
00B3 120000      E     LCALL   ?C?LLDXDATA
00B6 900000      R     MOV     DPTR,#error
00B9 120000      E     LCALL   ?C?LLDXDATA0
00BC 120000      E     LCALL   ?C?FPMUL
00BF A804              MOV     R0,AR4
00C1 A905              MOV     R1,AR5
00C3 AA06              MOV     R2,AR6
00C5 AB07              MOV     R3,AR7
00C7 D007              POP     AR7
00C9 D006              POP     AR6
00CB D005              POP     AR5
00CD D004              POP     AR4
00CF 120000      E     LCALL   ?C?FPADD
00D2 900000      R     MOV     DPTR,#sum
00D5 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 108
00D8 900000      R     MOV     DPTR,#sum
00DB 120000      E     LCALL   ?C?LLDXDATA
00DE 900000      R     MOV     DPTR,#ki
00E1 120000      E     LCALL   ?C?LLDXDATA0
00E4 120000      E     LCALL   ?C?FPMUL
00E7 C004              PUSH    AR4
00E9 C005              PUSH    AR5
00EB C006              PUSH    AR6
00ED C007              PUSH    AR7
00EF 900000      R     MOV     DPTR,#error
00F2 120000      E     LCALL   ?C?LLDXDATA
00F5 900000      R     MOV     DPTR,#kp
00F8 120000      E     LCALL   ?C?LLDXDATA0
00FB 120000      E     LCALL   ?C?FPMUL
00FE A804              MOV     R0,AR4
0100 A905              MOV     R1,AR5
0102 AA06              MOV     R2,AR6
0104 AB07              MOV     R3,AR7
0106 D007              POP     AR7
0108 D006              POP     AR6
010A D005              POP     AR5
010C D004              POP     AR4
010E 120000      E     LCALL   ?C?FPADD
0111 900000      R     MOV     DPTR,#var
0114 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 111
0117 7F00              MOV     R7,#00H
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 14  

0119 7E00              MOV     R6,#00H
011B 7D00              MOV     R5,#00H
011D 7C00              MOV     R4,#00H
011F 900000      R     MOV     DPTR,#speed
0122 120000      E     LCALL   ?C?LLDXDATA0
0125 120000      E     LCALL   ?C?FPCMP3
0128 7022              JNZ     ?C0001
                                           ; SOURCE LINE # 112
012A 900000      R     MOV     DPTR,#open_loop_guess
012D 120000      E     LCALL   ?C?LLDXDATA
0130 120000      E     LCALL   ?C?CASTF
0133 900000      R     MOV     DPTR,#duty
0136 EE                MOV     A,R6
0137 F0                MOVX    @DPTR,A
0138 A3                INC     DPTR
0139 EF                MOV     A,R7
013A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 113
013B 7F00              MOV     R7,#00H
013D 7E00              MOV     R6,#00H
013F 7D00              MOV     R5,#00H
0141 7C00              MOV     R4,#00H
0143 900000      R     MOV     DPTR,#sum
0146 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 114
0149 020000      R     LJMP    ?C0002
014C         ?C0001:
                                           ; SOURCE LINE # 116
014C 7F00              MOV     R7,#00H
014E 7E00              MOV     R6,#00H
0150 7D80              MOV     R5,#080H
0152 7CBF              MOV     R4,#0BFH
0154 900000      R     MOV     DPTR,#clock_period
0157 120000      E     LCALL   ?C?LLDXDATA0
015A 120000      E     LCALL   ?C?FPADD
015D C004              PUSH    AR4
015F C005              PUSH    AR5
0161 C006              PUSH    AR6
0163 C007              PUSH    AR7
0165 900000      R     MOV     DPTR,#var
0168 120000      E     LCALL   ?C?LLDXDATA
016B 900000      R     MOV     DPTR,#open_loop_guess
016E 120000      E     LCALL   ?C?LLDXDATA0
0171 120000      E     LCALL   ?C?FPADD
0174 A804              MOV     R0,AR4
0176 A905              MOV     R1,AR5
0178 AA06              MOV     R2,AR6
017A AB07              MOV     R3,AR7
017C D007              POP     AR7
017E D006              POP     AR6
0180 D005              POP     AR5
0182 D004              POP     AR4
0184 120000      E     LCALL   ?C?FPCMP3
0187 6020              JZ      ?C0003
0189 401E              JC      ?C0003
                                           ; SOURCE LINE # 117
018B 7F00              MOV     R7,#00H
018D 7E00              MOV     R6,#00H
018F 7D80              MOV     R5,#080H
0191 7CBF              MOV     R4,#0BFH
0193 900000      R     MOV     DPTR,#clock_period
0196 120000      E     LCALL   ?C?LLDXDATA0
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 15  

0199 120000      E     LCALL   ?C?FPADD
019C 120000      E     LCALL   ?C?CASTF
019F 900000      R     MOV     DPTR,#duty
01A2 EE                MOV     A,R6
01A3 F0                MOVX    @DPTR,A
01A4 A3                INC     DPTR
01A5 EF                MOV     A,R7
01A6 F0                MOVX    @DPTR,A
01A7 8042              SJMP    ?C0002
01A9         ?C0003:
                                           ; SOURCE LINE # 120
01A9 900000      R     MOV     DPTR,#var
01AC 120000      E     LCALL   ?C?LLDXDATA
01AF 900000      R     MOV     DPTR,#open_loop_guess
01B2 120000      E     LCALL   ?C?LLDXDATA0
01B5 120000      E     LCALL   ?C?FPADD
01B8 7B00              MOV     R3,#00H
01BA 7A00              MOV     R2,#00H
01BC 7900              MOV     R1,#00H
01BE 7800              MOV     R0,#00H
01C0 120000      E     LCALL   ?C?FPCMP3
01C3 600C              JZ      ?C0005
01C5 400A              JC      ?C0005
                                           ; SOURCE LINE # 121
01C7 900000      R     MOV     DPTR,#duty
01CA E4                CLR     A
01CB F0                MOVX    @DPTR,A
01CC A3                INC     DPTR
01CD E4                CLR     A
01CE F0                MOVX    @DPTR,A
01CF 801A              SJMP    ?C0002
01D1         ?C0005:
                                           ; SOURCE LINE # 124
01D1 900000      R     MOV     DPTR,#var
01D4 120000      E     LCALL   ?C?LLDXDATA
01D7 900000      R     MOV     DPTR,#open_loop_guess
01DA 120000      E     LCALL   ?C?LLDXDATA0
01DD 120000      E     LCALL   ?C?FPADD
01E0 120000      E     LCALL   ?C?CASTF
01E3 900000      R     MOV     DPTR,#duty
01E6 EE                MOV     A,R6
01E7 F0                MOVX    @DPTR,A
01E8 A3                INC     DPTR
01E9 EF                MOV     A,R7
01EA F0                MOVX    @DPTR,A
01EB         ?C0002:
                                           ; SOURCE LINE # 126
01EB 7D0D              MOV     R5,#0DH
01ED 7F01              MOV     R7,#01H
01EF 120000      E     LCALL   _LCD_Position
                                           ; SOURCE LINE # 127
01F2 900000      R     MOV     DPTR,#state
01F5 E0                MOVX    A,@DPTR
01F6 FE                MOV     R6,A
01F7 A3                INC     DPTR
01F8 E0                MOVX    A,@DPTR
01F9 FF                MOV     R7,A
01FA 120000      E     LCALL   _LCD_PrintDecUint16
                                           ; SOURCE LINE # 137
01FD 900000      R     MOV     DPTR,#number_of_ticks
0200 E0                MOVX    A,@DPTR
0201 FE                MOV     R6,A
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 16  

0202 A3                INC     DPTR
0203 E0                MOVX    A,@DPTR
0204 FF                MOV     R7,A
0205 C3                CLR     C
0206 EF                MOV     A,R7
0207 941C              SUBB    A,#01CH
0209 EE                MOV     A,R6
020A 9400              SUBB    A,#00H
020C 404E              JC      ?C0007
020E 900000      R     MOV     DPTR,#move_forward
0211 E0                MOVX    A,@DPTR
0212 FE                MOV     R6,A
0213 A3                INC     DPTR
0214 E0                MOVX    A,@DPTR
0215 FF                MOV     R7,A
0216 900000      R     MOV     DPTR,#state
0219 E0                MOVX    A,@DPTR
021A FC                MOV     R4,A
021B A3                INC     DPTR
021C E0                MOVX    A,@DPTR
021D FD                MOV     R5,A
021E ED                MOV     A,R5
021F B5073A            CJNE    A,AR7,?C0007
0222 EC                MOV     A,R4
0223 B50636            CJNE    A,AR6,?C0007
                                           ; SOURCE LINE # 140
0226 900000      R     MOV     DPTR,#control
0229 E4                CLR     A
022A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 141
022B 7FE8              MOV     R7,#0E8H
022D 7E03              MOV     R6,#03H
022F 7D00              MOV     R5,#00H
0231 7C00              MOV     R4,#00H
0233 900000      R     MOV     DPTR,#wait_milliseconds
0236 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 143
0239 900000      R     MOV     DPTR,#control
023C E0                MOVX    A,@DPTR
023D FF                MOV     R7,A
023E 120000      E     LCALL   _Drive_Control_Reg_Write
                                           ; SOURCE LINE # 145
0241 900000      R     MOV     DPTR,#number_of_ticks
0244 E4                CLR     A
0245 F0                MOVX    @DPTR,A
0246 A3                INC     DPTR
0247 E4                CLR     A
0248 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 152
0249 120000      E     LCALL   Wait_Counter_Start
                                           ; SOURCE LINE # 153
024C 900000      R     MOV     DPTR,#waiting
024F E0                MOVX    A,@DPTR
0250 FE                MOV     R6,A
0251 A3                INC     DPTR
0252 E0                MOVX    A,@DPTR
0253 FF                MOV     R7,A
0254 900000      R     MOV     DPTR,#state
0257 EE                MOV     A,R6
0258 F0                MOVX    @DPTR,A
0259 A3                INC     DPTR
025A EF                MOV     A,R7
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 17  

025B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
025C         ?C0007:
                                           ; SOURCE LINE # 156
025C 900000      R     MOV     DPTR,#number_of_ticks
025F E0                MOVX    A,@DPTR
0260 FE                MOV     R6,A
0261 A3                INC     DPTR
0262 E0                MOVX    A,@DPTR
0263 FF                MOV     R7,A
0264 C3                CLR     C
0265 EF                MOV     A,R7
0266 9469              SUBB    A,#069H
0268 EE                MOV     A,R6
0269 9400              SUBB    A,#00H
026B 4072              JC      ?C0008
026D 900000      R     MOV     DPTR,#move_backward
0270 E0                MOVX    A,@DPTR
0271 FE                MOV     R6,A
0272 A3                INC     DPTR
0273 E0                MOVX    A,@DPTR
0274 FF                MOV     R7,A
0275 900000      R     MOV     DPTR,#state
0278 E0                MOVX    A,@DPTR
0279 FC                MOV     R4,A
027A A3                INC     DPTR
027B E0                MOVX    A,@DPTR
027C FD                MOV     R5,A
027D ED                MOV     A,R5
027E 6F                XRL     A,R7
027F 7002              JNZ     ?C0037
0281 EC                MOV     A,R4
0282 6E                XRL     A,R6
0283         ?C0037:
0283 705A              JNZ     ?C0008
                                           ; SOURCE LINE # 158
0285 900000      R     MOV     DPTR,#control
0288 E4                CLR     A
0289 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 159
028A 900000      R     MOV     DPTR,#control
028D E0                MOVX    A,@DPTR
028E FF                MOV     R7,A
028F 120000      E     LCALL   _Drive_Control_Reg_Write
                                           ; SOURCE LINE # 162
0292 7D00              MOV     R5,#00H
0294 7F01              MOV     R7,#01H
0296 120000      E     LCALL   _LCD_Position
                                           ; SOURCE LINE # 163
0299 7BFF              MOV     R3,#0FFH
029B 7A00        R     MOV     R2,#HIGH ?SC_0
029D 7900        R     MOV     R1,#LOW ?SC_0
029F 120000      E     LCALL   _LCD_PrintString
                                           ; SOURCE LINE # 164
02A2 7D01              MOV     R5,#01H
02A4 7F01              MOV     R7,#01H
02A6 120000      E     LCALL   _LCD_Position
                                           ; SOURCE LINE # 165
02A9 7BFF              MOV     R3,#0FFH
02AB 7A00        R     MOV     R2,#HIGH ?SC_2
02AD 7900        R     MOV     R1,#LOW ?SC_2
02AF 120000      E     LCALL   _LCD_PrintString
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 18  

                                           ; SOURCE LINE # 168
02B2 7F64              MOV     R7,#064H
02B4 7E00              MOV     R6,#00H
02B6 120000      E     LCALL   _PWM_Steering_WriteCompare
                                           ; SOURCE LINE # 171
02B9 900000      R     MOV     DPTR,#control
02BC 7402              MOV     A,#02H
02BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 172
02BF 900000      R     MOV     DPTR,#control
02C2 E0                MOVX    A,@DPTR
02C3 FF                MOV     R7,A
02C4 120000      E     LCALL   _Drive_Control_Reg_Write
                                           ; SOURCE LINE # 174
02C7 900000      R     MOV     DPTR,#number_of_ticks
02CA E4                CLR     A
02CB F0                MOVX    @DPTR,A
02CC A3                INC     DPTR
02CD E4                CLR     A
02CE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 175
02CF 900000      R     MOV     DPTR,#turning
02D2 E0                MOVX    A,@DPTR
02D3 FE                MOV     R6,A
02D4 A3                INC     DPTR
02D5 E0                MOVX    A,@DPTR
02D6 FF                MOV     R7,A
02D7 900000      R     MOV     DPTR,#state
02DA EE                MOV     A,R6
02DB F0                MOVX    @DPTR,A
02DC A3                INC     DPTR
02DD EF                MOV     A,R7
02DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 176
02DF         ?C0008:
                                           ; SOURCE LINE # 178
02DF 900000      R     MOV     DPTR,#number_of_ticks
02E2 E0                MOVX    A,@DPTR
02E3 FE                MOV     R6,A
02E4 A3                INC     DPTR
02E5 E0                MOVX    A,@DPTR
02E6 FF                MOV     R7,A
02E7 C3                CLR     C
02E8 EF                MOV     A,R7
02E9 941F              SUBB    A,#01FH
02EB EE                MOV     A,R6
02EC 9400              SUBB    A,#00H
02EE 4045              JC      ?C0009
02F0 900000      R     MOV     DPTR,#turning
02F3 E0                MOVX    A,@DPTR
02F4 FE                MOV     R6,A
02F5 A3                INC     DPTR
02F6 E0                MOVX    A,@DPTR
02F7 FF                MOV     R7,A
02F8 900000      R     MOV     DPTR,#state
02FB E0                MOVX    A,@DPTR
02FC FC                MOV     R4,A
02FD A3                INC     DPTR
02FE E0                MOVX    A,@DPTR
02FF FD                MOV     R5,A
0300 ED                MOV     A,R5
0301 B50731            CJNE    A,AR7,?C0009
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 19  

0304 EC                MOV     A,R4
0305 B5062D            CJNE    A,AR6,?C0009
                                           ; SOURCE LINE # 179
0308 900000      R     MOV     DPTR,#control
030B 7402              MOV     A,#02H
030D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 181
030E 7F98              MOV     R7,#098H
0310 7E00              MOV     R6,#00H
0312 120000      E     LCALL   _PWM_Steering_WriteCompare
                                           ; SOURCE LINE # 183
0315 900000      R     MOV     DPTR,#control
0318 E0                MOVX    A,@DPTR
0319 FF                MOV     R7,A
031A 120000      E     LCALL   _Drive_Control_Reg_Write
                                           ; SOURCE LINE # 185
031D 900000      R     MOV     DPTR,#number_of_ticks
0320 E4                CLR     A
0321 F0                MOVX    @DPTR,A
0322 A3                INC     DPTR
0323 E4                CLR     A
0324 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 186
0325 900000      R     MOV     DPTR,#forward_to_wall
0328 E0                MOVX    A,@DPTR
0329 FE                MOV     R6,A
032A A3                INC     DPTR
032B E0                MOVX    A,@DPTR
032C FF                MOV     R7,A
032D 900000      R     MOV     DPTR,#state
0330 EE                MOV     A,R6
0331 F0                MOVX    @DPTR,A
0332 A3                INC     DPTR
0333 EF                MOV     A,R7
0334 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 189
0335         ?C0009:
                                           ; SOURCE LINE # 191
0335 900000      R     MOV     DPTR,#number_of_ticks
0338 E0                MOVX    A,@DPTR
0339 FE                MOV     R6,A
033A A3                INC     DPTR
033B E0                MOVX    A,@DPTR
033C FF                MOV     R7,A
033D C3                CLR     C
033E EF                MOV     A,R7
033F 940F              SUBB    A,#0FH
0341 EE                MOV     A,R6
0342 9400              SUBB    A,#00H
0344 4028              JC      ?C0010
0346 900000      R     MOV     DPTR,#forward_to_wall
0349 E0                MOVX    A,@DPTR
034A FE                MOV     R6,A
034B A3                INC     DPTR
034C E0                MOVX    A,@DPTR
034D FF                MOV     R7,A
034E 900000      R     MOV     DPTR,#state
0351 E0                MOVX    A,@DPTR
0352 FC                MOV     R4,A
0353 A3                INC     DPTR
0354 E0                MOVX    A,@DPTR
0355 FD                MOV     R5,A
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 20  

0356 ED                MOV     A,R5
0357 B50714            CJNE    A,AR7,?C0010
035A EC                MOV     A,R4
035B B50610            CJNE    A,AR6,?C0010
                                           ; SOURCE LINE # 192
035E 900000      R     MOV     DPTR,#follow_line
0361 E0                MOVX    A,@DPTR
0362 FE                MOV     R6,A
0363 A3                INC     DPTR
0364 E0                MOVX    A,@DPTR
0365 FF                MOV     R7,A
0366 900000      R     MOV     DPTR,#state
0369 EE                MOV     A,R6
036A F0                MOVX    @DPTR,A
036B A3                INC     DPTR
036C EF                MOV     A,R7
036D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 193
036E         ?C0010:
                                           ; SOURCE LINE # 210
036E 900000      R     MOV     DPTR,#duty
0371 E0                MOVX    A,@DPTR
0372 FE                MOV     R6,A
0373 A3                INC     DPTR
0374 E0                MOVX    A,@DPTR
0375 FF                MOV     R7,A
0376 120000      E     LCALL   _PWM_WriteCompare
                                           ; SOURCE LINE # 213
0379 120000      E     LCALL   Hall_Counter_ReadStatusRegister
                                           ; SOURCE LINE # 214
037C D007              POP     AR7
037E D006              POP     AR6
0380 D005              POP     AR5
0382 D004              POP     AR4
0384 D003              POP     AR3
0386 D002              POP     AR2
0388 D001              POP     AR1
038A D000              POP     AR0
038C D0D0              POP     PSW
038E D000        E     POP     ?C?XPAGE1SFR
0390 D086              POP     DPS
0392 D084              POP     DPL1
0394 D085              POP     DPH1
0396 D082              POP     DPL
0398 D083              POP     DPH
039A D0F0              POP     B
039C D0E0              POP     ACC
039E 32                RETI    
             ; FUNCTION tock (END)

             ; FUNCTION flow (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 21  

0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 223
002B 900000      R     MOV     DPTR,#overflow
002E E0                MOVX    A,@DPTR
002F 04                INC     A
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 228
0031 120000      E     LCALL   Hall_Counter_ReadStatusRegister
                                           ; SOURCE LINE # 229
0034 D007              POP     AR7
0036 D006              POP     AR6
0038 D005              POP     AR5
003A D004              POP     AR4
003C D003              POP     AR3
003E D002              POP     AR2
0040 D001              POP     AR1
0042 D000              POP     AR0
0044 D0D0              POP     PSW
0046 D000        E     POP     ?C?XPAGE1SFR
0048 D086              POP     DPS
004A D084              POP     DPL1
004C D085              POP     DPH1
004E D082              POP     DPL
0050 D083              POP     DPH
0052 D0F0              POP     B
0054 D0E0              POP     ACC
0056 32                RETI    
             ; FUNCTION flow (END)

             ; FUNCTION fifty (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 246
002B 120000      E     LCALL   Line_Timer_ReadCapture
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 22  

002E 900000      R     MOV     DPTR,#clock_start_time
0031 EE                MOV     A,R6
0032 F0                MOVX    @DPTR,A
0033 A3                INC     DPTR
0034 EF                MOV     A,R7
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
0036 120000      E     LCALL   Line_Timer_ReadCapture
0039 900000      R     MOV     DPTR,#line_start_time
003C EE                MOV     A,R6
003D F0                MOVX    @DPTR,A
003E A3                INC     DPTR
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 249
0041 900000      R     MOV     DPTR,#line_start_time
0044 E0                MOVX    A,@DPTR
0045 FE                MOV     R6,A
0046 A3                INC     DPTR
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 900000      R     MOV     DPTR,#clock_start_time
004C E0                MOVX    A,@DPTR
004D FC                MOV     R4,A
004E A3                INC     DPTR
004F E0                MOVX    A,@DPTR
0050 FD                MOV     R5,A
0051 C3                CLR     C
0052 ED                MOV     A,R5
0053 9F                SUBB    A,R7
0054 FD                MOV     R5,A
0055 EC                MOV     A,R4
0056 9E                SUBB    A,R6
0057 FC                MOV     R4,A
0058 E4                CLR     A
0059 120000      E     LCALL   ?C?FCASTI
005C 900000      R     MOV     DPTR,#clock_diff_time
005F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 250
0062 7F00              MOV     R7,#00H
0064 7E00              MOV     R6,#00H
0066 7D40              MOV     R5,#040H
0068 7CC4              MOV     R4,#0C4H
006A 900000      R     MOV     DPTR,#clock_diff_time
006D 120000      E     LCALL   ?C?LLDXDATA0
0070 120000      E     LCALL   ?C?FPADD
0073 900000      R     MOV     DPTR,#steering_error
0076 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 251
0079 900000      R     MOV     DPTR,#steering_error_sum
007C 120000      E     LCALL   ?C?LLDXDATA
007F 900000      R     MOV     DPTR,#steering_error
0082 120000      E     LCALL   ?C?LLDXDATA0
0085 120000      E     LCALL   ?C?FPADD
0088 900000      R     MOV     DPTR,#steering_error_sum
008B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 252
008E 900000      R     MOV     DPTR,#prev_steering_error
0091 120000      E     LCALL   ?C?LLDXDATA0
0094 900000      R     MOV     DPTR,#steering_error
0097 120000      E     LCALL   ?C?LLDXDATA
009A 120000      E     LCALL   ?C?FPSUB
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 23  

009D 900000      R     MOV     DPTR,#derivative
00A0 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 253
00A3 900000      R     MOV     DPTR,#steering_error
00A6 120000      E     LCALL   ?C?LLDXDATA
00A9 900000      R     MOV     DPTR,#prev_steering_error
00AC 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 255
00AF 7F00              MOV     R7,#00H
00B1 7E40              MOV     R6,#040H
00B3 7D1C              MOV     R5,#01CH
00B5 7C46              MOV     R4,#046H
00B7 900000      R     MOV     DPTR,#clock_diff_time
00BA 120000      E     LCALL   ?C?LLDXDATA0
00BD 120000      E     LCALL   ?C?FPCMP3
00C0 6002              JZ      $ + 4H
00C2 504A              JNC     ?C0014
                                           ; SOURCE LINE # 257
00C4         ?C0013:
                                           ; SOURCE LINE # 263
00C4 7FCD              MOV     R7,#0CDH
00C6 7ECC              MOV     R6,#0CCH
00C8 7DCC              MOV     R5,#0CCH
00CA 7C3D              MOV     R4,#03DH
00CC 900000      R     MOV     DPTR,#steering_error
00CF 120000      E     LCALL   ?C?LLDXDATA0
00D2 120000      E     LCALL   ?C?FPMUL
00D5 7B00              MOV     R3,#00H
00D7 7A00              MOV     R2,#00H
00D9 7918              MOV     R1,#018H
00DB 7843              MOV     R0,#043H
00DD 120000      E     LCALL   ?C?FPADD
00E0 120000      E     LCALL   ?C?CASTF
00E3 900000      R     MOV     DPTR,#steering_value
00E6 EE                MOV     A,R6
00E7 F0                MOVX    @DPTR,A
00E8 A3                INC     DPTR
00E9 EF                MOV     A,R7
00EA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 281
00EB 900000      R     MOV     DPTR,#follow_line
00EE E0                MOVX    A,@DPTR
00EF FE                MOV     R6,A
00F0 A3                INC     DPTR
00F1 E0                MOVX    A,@DPTR
00F2 FF                MOV     R7,A
00F3 900000      R     MOV     DPTR,#state
00F6 E0                MOVX    A,@DPTR
00F7 FC                MOV     R4,A
00F8 A3                INC     DPTR
00F9 E0                MOVX    A,@DPTR
00FA FD                MOV     R5,A
00FB ED                MOV     A,R5
00FC B5070F            CJNE    A,AR7,?C0015
00FF EC                MOV     A,R4
0100 B5060B            CJNE    A,AR6,?C0015
                                           ; SOURCE LINE # 282
                                           ; SOURCE LINE # 283
0103 900000      R     MOV     DPTR,#steering_value
0106 E0                MOVX    A,@DPTR
0107 FE                MOV     R6,A
0108 A3                INC     DPTR
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 24  

0109 E0                MOVX    A,@DPTR
010A FF                MOV     R7,A
010B 120000      E     LCALL   _PWM_Steering_WriteCompare
                                           ; SOURCE LINE # 284
010E         ?C0015:
                                           ; SOURCE LINE # 286
                                           ; SOURCE LINE # 290
010E         ?C0016:
                                           ; SOURCE LINE # 291
                                           ; SOURCE LINE # 295
                                           ; SOURCE LINE # 297
010E         ?C0014:
                                           ; SOURCE LINE # 300
010E 120000      E     LCALL   Line_Timer_ReadStatusRegister
                                           ; SOURCE LINE # 302
0111 D007              POP     AR7
0113 D006              POP     AR6
0115 D005              POP     AR5
0117 D004              POP     AR4
0119 D003              POP     AR3
011B D002              POP     AR2
011D D001              POP     AR1
011F D000              POP     AR0
0121 D0D0              POP     PSW
0123 D000        E     POP     ?C?XPAGE1SFR
0125 D086              POP     DPS
0127 D084              POP     DPL1
0129 D085              POP     DPH1
012B D082              POP     DPL
012D D083              POP     DPH
012F D0F0              POP     B
0131 D0E0              POP     ACC
0133 32                RETI    
             ; FUNCTION fifty (END)

             ; FUNCTION hundred (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 306
                                           ; SOURCE LINE # 321
002B 120000      E     LCALL   Lines_Per_Frame_Counter_ReadStatusRegister
                                           ; SOURCE LINE # 322
002E D007              POP     AR7
0030 D006              POP     AR6
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 25  

0032 D005              POP     AR5
0034 D004              POP     AR4
0036 D003              POP     AR3
0038 D002              POP     AR2
003A D001              POP     AR1
003C D000              POP     AR0
003E D0D0              POP     PSW
0040 D000        E     POP     ?C?XPAGE1SFR
0042 D086              POP     DPS
0044 D084              POP     DPL1
0046 D085              POP     DPH1
0048 D082              POP     DPL
004A D083              POP     DPH
004C D0F0              POP     B
004E D0E0              POP     ACC
0050 32                RETI    
             ; FUNCTION hundred (END)

             ; FUNCTION elevator_entering (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 326
                                           ; SOURCE LINE # 328
002B 900000      R     MOV     DPTR,#wait_for_elevator
002E E0                MOVX    A,@DPTR
002F FE                MOV     R6,A
0030 A3                INC     DPTR
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 900000      R     MOV     DPTR,#state
0036 E0                MOVX    A,@DPTR
0037 FC                MOV     R4,A
0038 A3                INC     DPTR
0039 E0                MOVX    A,@DPTR
003A FD                MOV     R5,A
003B ED                MOV     A,R5
003C B50722            CJNE    A,AR7,?C0022
003F EC                MOV     A,R4
0040 B5061E            CJNE    A,AR6,?C0022
                                           ; SOURCE LINE # 329
0043 900000      R     MOV     DPTR,#control
0046 7402              MOV     A,#02H
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 331
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 26  

0049 900000      R     MOV     DPTR,#control
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E 120000      E     LCALL   _Drive_Control_Reg_Write
                                           ; SOURCE LINE # 332
0051 900000      R     MOV     DPTR,#move_forward
0054 E0                MOVX    A,@DPTR
0055 FE                MOV     R6,A
0056 A3                INC     DPTR
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 900000      R     MOV     DPTR,#state
005C EE                MOV     A,R6
005D F0                MOVX    @DPTR,A
005E A3                INC     DPTR
005F EF                MOV     A,R7
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 333
                                           ; SOURCE LINE # 334
0061         ?C0022:
0061 D007              POP     AR7
0063 D006              POP     AR6
0065 D005              POP     AR5
0067 D004              POP     AR4
0069 D003              POP     AR3
006B D002              POP     AR2
006D D001              POP     AR1
006F D000              POP     AR0
0071 D0D0              POP     PSW
0073 D000        E     POP     ?C?XPAGE1SFR
0075 D086              POP     DPS
0077 D084              POP     DPL1
0079 D085              POP     DPH1
007B D082              POP     DPL
007D D083              POP     DPH
007F D0F0              POP     B
0081 D0E0              POP     ACC
0083 32                RETI    
             ; FUNCTION elevator_entering (END)

             ; FUNCTION isr_waiting (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 337
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 27  

                                           ; SOURCE LINE # 338
002B 900000      R     MOV     DPTR,#waiting
002E E0                MOVX    A,@DPTR
002F FE                MOV     R6,A
0030 A3                INC     DPTR
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 900000      R     MOV     DPTR,#state
0036 E0                MOVX    A,@DPTR
0037 FC                MOV     R4,A
0038 A3                INC     DPTR
0039 E0                MOVX    A,@DPTR
003A FD                MOV     R5,A
003B ED                MOV     A,R5
003C 6F                XRL     A,R7
003D 7002              JNZ     ?C0042
003F EC                MOV     A,R4
0040 6E                XRL     A,R6
0041         ?C0042:
0041 7032              JNZ     ?C0024
                                           ; SOURCE LINE # 340
0043 900000      R     MOV     DPTR,#in_elevator
0046 E0                MOVX    A,@DPTR
0047 FE                MOV     R6,A
0048 A3                INC     DPTR
0049 E0                MOVX    A,@DPTR
004A FF                MOV     R7,A
004B 900000      R     MOV     DPTR,#state
004E EE                MOV     A,R6
004F F0                MOVX    @DPTR,A
0050 A3                INC     DPTR
0051 EF                MOV     A,R7
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 342
0053 7D00              MOV     R5,#00H
0055 7F00              MOV     R7,#00H
0057 120000      E     LCALL   _LCD_Position
                                           ; SOURCE LINE # 343
005A 900000      R     MOV     DPTR,#state
005D E0                MOVX    A,@DPTR
005E FE                MOV     R6,A
005F A3                INC     DPTR
0060 E0                MOVX    A,@DPTR
0061 FF                MOV     R7,A
0062 120000      E     LCALL   _LCD_PrintDecUint16
                                           ; SOURCE LINE # 345
0065 7D00              MOV     R5,#00H
0067 7F01              MOV     R7,#01H
0069 120000      E     LCALL   _LCD_Position
                                           ; SOURCE LINE # 346
006C 7BFF              MOV     R3,#0FFH
006E 7A00        R     MOV     R2,#HIGH ?SC_7
0070 7900        R     MOV     R1,#LOW ?SC_7
0072 120000      E     LCALL   _LCD_PrintString
                                           ; SOURCE LINE # 347
                                           ; SOURCE LINE # 348
0075         ?C0024:
0075 D007              POP     AR7
0077 D006              POP     AR6
0079 D005              POP     AR5
007B D004              POP     AR4
007D D003              POP     AR3
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 28  

007F D002              POP     AR2
0081 D001              POP     AR1
0083 D000              POP     AR0
0085 D0D0              POP     PSW
0087 D000        E     POP     ?C?XPAGE1SFR
0089 D086              POP     DPS
008B D084              POP     DPL1
008D D085              POP     DPH1
008F D082              POP     DPL
0091 D083              POP     DPH
0093 D0F0              POP     B
0095 D0E0              POP     ACC
0097 32                RETI    
             ; FUNCTION isr_waiting (END)

             ; FUNCTION elevator_leaving (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 351
                                           ; SOURCE LINE # 352
002B 900000      R     MOV     DPTR,#in_elevator
002E E0                MOVX    A,@DPTR
002F FE                MOV     R6,A
0030 A3                INC     DPTR
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 900000      R     MOV     DPTR,#state
0036 E0                MOVX    A,@DPTR
0037 FC                MOV     R4,A
0038 A3                INC     DPTR
0039 E0                MOVX    A,@DPTR
003A FD                MOV     R5,A
003B ED                MOV     A,R5
003C B50722            CJNE    A,AR7,?C0026
003F EC                MOV     A,R4
0040 B5061E            CJNE    A,AR6,?C0026
                                           ; SOURCE LINE # 353
0043 900000      R     MOV     DPTR,#control
0046 7403              MOV     A,#03H
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 355
0049 900000      R     MOV     DPTR,#control
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 29  

004E 120000      E     LCALL   _Drive_Control_Reg_Write
                                           ; SOURCE LINE # 356
0051 900000      R     MOV     DPTR,#move_backward
0054 E0                MOVX    A,@DPTR
0055 FE                MOV     R6,A
0056 A3                INC     DPTR
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 900000      R     MOV     DPTR,#state
005C EE                MOV     A,R6
005D F0                MOVX    @DPTR,A
005E A3                INC     DPTR
005F EF                MOV     A,R7
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 358
0061         ?C0026:
0061 D007              POP     AR7
0063 D006              POP     AR6
0065 D005              POP     AR5
0067 D004              POP     AR4
0069 D003              POP     AR3
006B D002              POP     AR2
006D D001              POP     AR1
006F D000              POP     AR0
0071 D0D0              POP     PSW
0073 D000        E     POP     ?C?XPAGE1SFR
0075 D086              POP     DPS
0077 D084              POP     DPL1
0079 D085              POP     DPH1
007B D082              POP     DPL
007D D083              POP     DPH
007F D0F0              POP     B
0081 D0E0              POP     ACC
0083 32                RETI    
             ; FUNCTION elevator_leaving (END)

             ; FUNCTION pixy (BEGIN)
                                           ; SOURCE LINE # 360
                                           ; SOURCE LINE # 367
0000 32                RETI    
             ; FUNCTION pixy (END)

             ; FUNCTION ADC_Side_Rangefinder_ISR1 (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 30  

0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 380
                                           ; SOURCE LINE # 391
002B 7D0E              MOV     R5,#0EH
002D 7F01              MOV     R7,#01H
002F 120000      E     LCALL   _LCD_Position
                                           ; SOURCE LINE # 392
0032 7BFF              MOV     R3,#0FFH
0034 7A00        R     MOV     R2,#HIGH ?SC_17
0036 7900        R     MOV     R1,#LOW ?SC_17
0038 120000      E     LCALL   _LCD_PrintString
                                           ; SOURCE LINE # 394
003B 900000      R     MOV     DPTR,#follow_line
003E E0                MOVX    A,@DPTR
003F FE                MOV     R6,A
0040 A3                INC     DPTR
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
0043 900000      R     MOV     DPTR,#state
0046 E0                MOVX    A,@DPTR
0047 FC                MOV     R4,A
0048 A3                INC     DPTR
0049 E0                MOVX    A,@DPTR
004A FD                MOV     R5,A
004B ED                MOV     A,R5
004C 6F                XRL     A,R7
004D 7002              JNZ     ?C0044
004F EC                MOV     A,R4
0050 6E                XRL     A,R6
0051         ?C0044:
0051 6003              JZ      $ + 5H
0053 020000      R     LJMP    ?C0031
                                           ; SOURCE LINE # 397
0056 900000      R     MOV     DPTR,#control
0059 7402              MOV     A,#02H
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 398
005C 900000      R     MOV     DPTR,#control
005F E0                MOVX    A,@DPTR
0060 FF                MOV     R7,A
0061 120000      E     LCALL   _Drive_Control_Reg_Write
                                           ; SOURCE LINE # 401
0064 900000      R     MOV     DPTR,#error_range
0067 120000      E     LCALL   ?C?LLDXDATA
006A 900000      R     MOV     DPTR,#prev_error_range
006D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 403
0070 120000      E     LCALL   ADC_Side_Rangefinder_GetResult32
0073 900000      R     MOV     DPTR,#result
0076 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 405
0079 900000      R     MOV     DPTR,#result
007C 120000      E     LCALL   ?C?LLDXDATA
007F 120000      E     LCALL   _ADC_Side_Rangefinder_CountsTo_Volts
0082 900000      R     MOV     DPTR,#resultInVolts
0085 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 407
0088 900000      R     MOV     DPTR,#open_loop_volts
008B 120000      E     LCALL   ?C?LLDXDATA0
008E 900000      R     MOV     DPTR,#resultInVolts
0091 120000      E     LCALL   ?C?LLDXDATA
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 31  

0094 120000      E     LCALL   ?C?FPSUB
0097 900000      R     MOV     DPTR,#error_range
009A 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 409
009D 900000      R     MOV     DPTR,#prev_error_range
00A0 120000      E     LCALL   ?C?LLDXDATA0
00A3 900000      R     MOV     DPTR,#error_range
00A6 120000      E     LCALL   ?C?LLDXDATA
00A9 120000      E     LCALL   ?C?FPSUB
00AC 900000      R     MOV     DPTR,#differential_range
00AF 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 413
00B2 7F00              MOV     R7,#00H
00B4 7E00              MOV     R6,#00H
00B6 7D00              MOV     R5,#00H
00B8 7CBF              MOV     R4,#0BFH
00BA 900000      R     MOV     DPTR,#differential_range
00BD 120000      E     LCALL   ?C?LLDXDATA0
00C0 120000      E     LCALL   ?C?FPCMP3
00C3 4015              JC      ?C0030
00C5 7FCD              MOV     R7,#0CDH
00C7 7ECC              MOV     R6,#0CCH
00C9 7D4C              MOV     R5,#04CH
00CB 7C3F              MOV     R4,#03FH
00CD 900000      R     MOV     DPTR,#differential_range
00D0 120000      E     LCALL   ?C?LLDXDATA0
00D3 120000      E     LCALL   ?C?FPCMP3
00D6 601E              JZ      ?C0029
00D8 401C              JC      ?C0029
00DA         ?C0030:
                                           ; SOURCE LINE # 414
00DA 900000      R     MOV     DPTR,#prev_error_range
00DD 120000      E     LCALL   ?C?LLDXDATA
00E0 900000      R     MOV     DPTR,#error_range
00E3 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 415
00E6 7D0E              MOV     R5,#0EH
00E8 7F00              MOV     R7,#00H
00EA 120000      E     LCALL   _LCD_Position
                                           ; SOURCE LINE # 416
00ED 7BFF              MOV     R3,#0FFH
00EF 7A00        R     MOV     R2,#HIGH ?SC_20
00F1 7900        R     MOV     R1,#LOW ?SC_20
00F3 120000      E     LCALL   _LCD_PrintString
                                           ; SOURCE LINE # 417
00F6         ?C0029:
                                           ; SOURCE LINE # 420
00F6 900000      R     MOV     DPTR,#error_sum_range
00F9 120000      E     LCALL   ?C?LLDXDATA
00FC 900000      R     MOV     DPTR,#error_range
00FF 120000      E     LCALL   ?C?LLDXDATA0
0102 120000      E     LCALL   ?C?FPADD
0105 900000      R     MOV     DPTR,#error_sum_range
0108 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 423
010B 900000      R     MOV     DPTR,#error_range
010E 120000      E     LCALL   ?C?LLDXDATA
0111 900000      R     MOV     DPTR,#p_range
0114 120000      E     LCALL   ?C?LLDXDATA0
0117 120000      E     LCALL   ?C?FPMUL
011A A804              MOV     R0,AR4
011C A905              MOV     R1,AR5
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 32  

011E AA06              MOV     R2,AR6
0120 AB07              MOV     R3,AR7
0122 7F00              MOV     R7,#00H
0124 7E00              MOV     R6,#00H
0126 7D18              MOV     R5,#018H
0128 7C43              MOV     R4,#043H
012A 120000      E     LCALL   ?C?FPSUB
012D 900000      R     MOV     DPTR,#steering_range
0130 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 424
0133 7D00              MOV     R5,#00H
0135 7F00              MOV     R7,#00H
0137 120000      E     LCALL   _LCD_Position
                                           ; SOURCE LINE # 425
013A 7B01              MOV     R3,#01H
013C 7A00        R     MOV     R2,#HIGH pidstr
013E 7900        R     MOV     R1,#LOW pidstr
0140 C003              PUSH    AR3
0142 C002              PUSH    AR2
0144 C001              PUSH    AR1
0146 7BFF              MOV     R3,#0FFH
0148 7A00        R     MOV     R2,#HIGH ?SC_23
014A 7900        R     MOV     R1,#LOW ?SC_23
014C 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
014F 120000      E     LCALL   ?C?PSTXDATA
0152 900000      R     MOV     DPTR,#steering_range
0155 120000      E     LCALL   ?C?LLDXDATA
0158 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
015B 120000      E     LCALL   ?C?LSTXDATA
015E D001              POP     AR1
0160 D002              POP     AR2
0162 D003              POP     AR3
0164 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 426
0167 7B01              MOV     R3,#01H
0169 7A00        R     MOV     R2,#HIGH pidstr
016B 7900        R     MOV     R1,#LOW pidstr
016D 120000      E     LCALL   _LCD_PrintString
                                           ; SOURCE LINE # 428
0170 900000      R     MOV     DPTR,#steering_range
0173 120000      E     LCALL   ?C?LLDXDATA
0176 120000      E     LCALL   ?C?CASTF
0179 120000      E     LCALL   _PWM_Steering_WriteCompare
                                           ; SOURCE LINE # 430
017C 7D00              MOV     R5,#00H
017E 7F01              MOV     R7,#01H
0180 120000      E     LCALL   _LCD_Position
                                           ; SOURCE LINE # 431
0183 7B01              MOV     R3,#01H
0185 7A00        R     MOV     R2,#HIGH resultstr
0187 7900        R     MOV     R1,#LOW resultstr
0189 C003              PUSH    AR3
018B C002              PUSH    AR2
018D C001              PUSH    AR1
018F 7BFF              MOV     R3,#0FFH
0191 7A00        R     MOV     R2,#HIGH ?SC_37
0193 7900        R     MOV     R1,#LOW ?SC_37
0195 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
0198 120000      E     LCALL   ?C?PSTXDATA
019B 900000      R     MOV     DPTR,#resultInVolts
019E 120000      E     LCALL   ?C?LLDXDATA
01A1 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 33  

01A4 120000      E     LCALL   ?C?LSTXDATA
01A7 D001              POP     AR1
01A9 D002              POP     AR2
01AB D003              POP     AR3
01AD 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 432
01B0 7B01              MOV     R3,#01H
01B2 7A00        R     MOV     R2,#HIGH resultstr
01B4 7900        R     MOV     R1,#LOW resultstr
01B6 120000      E     LCALL   _LCD_PrintString
                                           ; SOURCE LINE # 435
                                           ; SOURCE LINE # 436
01B9         ?C0031:
01B9 D007              POP     AR7
01BB D006              POP     AR6
01BD D005              POP     AR5
01BF D004              POP     AR4
01C1 D003              POP     AR3
01C3 D002              POP     AR2
01C5 D001              POP     AR1
01C7 D000              POP     AR0
01C9 D0D0              POP     PSW
01CB D000        E     POP     ?C?XPAGE1SFR
01CD D086              POP     DPS
01CF D084              POP     DPL1
01D1 D085              POP     DPH1
01D3 D082              POP     DPL
01D5 D083              POP     DPH
01D7 D0F0              POP     B
01D9 D0E0              POP     ACC
01DB 32                RETI    
             ; FUNCTION ADC_Side_Rangefinder_ISR1 (END)

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 456
                                           ; SOURCE LINE # 457
                                           ; SOURCE LINE # 461
0000 900000      R     MOV     DPTR,#start_control
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 463
0005 900000      R     MOV     DPTR,#counter_print
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B E4                CLR     A
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 466
000D D2AF              SETB    EA
000F 9044F4            MOV     DPTR,#044F4H
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 54FD              ANL     A,#0FDH
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 469
001A 120000      E     LCALL   Hall_Counter_Start
                                           ; SOURCE LINE # 470
001D 120000      E     LCALL   Clock_Hall_Start
                                           ; SOURCE LINE # 479
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 34  

0020 120000      E     LCALL   PWM_Start
                                           ; SOURCE LINE # 480
0023 120000      E     LCALL   PWM_Steering_Start
                                           ; SOURCE LINE # 483
0026 120000      E     LCALL   LCD_Start
                                           ; SOURCE LINE # 488
0029 120000      E     LCALL   ISR_Hall_Start
                                           ; SOURCE LINE # 489
002C 7E00        R     MOV     R6,#HIGH tock
002E 7F00        R     MOV     R7,#LOW tock
0030 120000      E     LCALL   _ISR_Hall_SetVector
                                           ; SOURCE LINE # 490
0033 120000      E     LCALL   ISR_Overflow_Start
                                           ; SOURCE LINE # 491
0036 7E00        R     MOV     R6,#HIGH flow
0038 7F00        R     MOV     R7,#LOW flow
003A 120000      E     LCALL   _ISR_Overflow_SetVector
                                           ; SOURCE LINE # 493
003D 120000      E     LCALL   ISR_50_Lines_Start
                                           ; SOURCE LINE # 494
0040 7E00        R     MOV     R6,#HIGH fifty
0042 7F00        R     MOV     R7,#LOW fifty
0044 120000      E     LCALL   _ISR_50_Lines_SetVector
                                           ; SOURCE LINE # 495
0047 120000      E     LCALL   ISR_100_Lines_Start
                                           ; SOURCE LINE # 496
004A 7E00        R     MOV     R6,#HIGH hundred
004C 7F00        R     MOV     R7,#LOW hundred
004E 120000      E     LCALL   _ISR_100_Lines_SetVector
                                           ; SOURCE LINE # 498
0051 120000      E     LCALL   Line_Timer_Start
                                           ; SOURCE LINE # 501
0054 120000      E     LCALL   Elevator_Threshold_Start
                                           ; SOURCE LINE # 502
0057 120000      E     LCALL   Elevator_Comparator_Start
                                           ; SOURCE LINE # 503
005A 120000      E     LCALL   ISR_Elevator_Start
                                           ; SOURCE LINE # 504
005D 7E00        R     MOV     R6,#HIGH elevator_entering
005F 7F00        R     MOV     R7,#LOW elevator_entering
0061 120000      E     LCALL   _ISR_Elevator_SetVector
                                           ; SOURCE LINE # 506
0064 120000      E     LCALL   Elevator_Comparator_1_Start
                                           ; SOURCE LINE # 507
0067 120000      E     LCALL   ISR_Elevator_2_Start
                                           ; SOURCE LINE # 508
006A 7E00        R     MOV     R6,#HIGH elevator_leaving
006C 7F00        R     MOV     R7,#LOW elevator_leaving
006E 120000      E     LCALL   _ISR_Elevator_2_SetVector
                                           ; SOURCE LINE # 511
0071 120000      E     LCALL   Wait_Clock_Start
                                           ; SOURCE LINE # 512
0074 120000      E     LCALL   ISR_Wait_Start
                                           ; SOURCE LINE # 513
0077 7E00        R     MOV     R6,#HIGH isr_waiting
0079 7F00        R     MOV     R7,#LOW isr_waiting
007B 120000      E     LCALL   _ISR_Wait_SetVector
                                           ; SOURCE LINE # 516
007E 900000      R     MOV     DPTR,#open_loop_guess
0081 120000      E     LCALL   ?C?LLDXDATA
0084 120000      E     LCALL   ?C?CASTF
0087 120000      E     LCALL   _PWM_WriteCompare
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 35  

                                           ; SOURCE LINE # 519
008A 900000      R     MOV     DPTR,#start_control
008D E0                MOVX    A,@DPTR
008E FF                MOV     R7,A
008F 120000      E     LCALL   _Drive_Control_Reg_Write
                                           ; SOURCE LINE # 524
0092 120000      E     LCALL   ISR_Pixy_Start
                                           ; SOURCE LINE # 525
0095 7E00        R     MOV     R6,#HIGH pixy
0097 7F00        R     MOV     R7,#LOW pixy
0099 120000      E     LCALL   _ISR_Pixy_SetVector
                                           ; SOURCE LINE # 546
009C 7D00              MOV     R5,#00H
009E 7F01              MOV     R7,#01H
00A0 120000      E     LCALL   _LCD_Position
                                           ; SOURCE LINE # 547
00A3 900000      R     MOV     DPTR,#state
00A6 E0                MOVX    A,@DPTR
00A7 FE                MOV     R6,A
00A8 A3                INC     DPTR
00A9 E0                MOVX    A,@DPTR
00AA FF                MOV     R7,A
00AB 120000      E     LCALL   _LCD_PrintDecUint16
                                           ; SOURCE LINE # 551
00AE 120000      E     LCALL   Wall_Threshold_Start
                                           ; SOURCE LINE # 554
00B1 120000      E     LCALL   ADC_Side_Rangefinder_Start
                                           ; SOURCE LINE # 555
00B4 7F1D              MOV     R7,#01DH
00B6 120000      E     LCALL   _?CyIntEnable
                                           ; SOURCE LINE # 556
00B9 120000      E     LCALL   ADC_Side_Rangefinder_StartConvert
                                           ; SOURCE LINE # 560
00BC         ?C0032:
                                           ; SOURCE LINE # 561
                                           ; SOURCE LINE # 585
00BC 900000      R     MOV     DPTR,#counter_print
00BF E0                MOVX    A,@DPTR
00C0 FE                MOV     R6,A
00C1 A3                INC     DPTR
00C2 E0                MOVX    A,@DPTR
00C3 FF                MOV     R7,A
00C4 EF                MOV     A,R7
00C5 B410F4            CJNE    A,#010H,?C0032
00C8 EE                MOV     A,R6
00C9 B427F0            CJNE    A,#027H,?C0032
                                           ; SOURCE LINE # 598
00CC 900000      R     MOV     DPTR,#counter_print
00CF E4                CLR     A
00D0 F0                MOVX    @DPTR,A
00D1 A3                INC     DPTR
00D2 E4                CLR     A
00D3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 599
                                           ; SOURCE LINE # 601
00D4 80E6              SJMP    ?C0032
00D6 22                RET     
             ; FUNCTION main (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.03   MAIN                                                                  05/07/2015 00:08:56 PAGE 36  

   CODE SIZE        =   2511    ----
   CONSTANT SIZE    =     48    ----
   XDATA SIZE       =    161      84
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
