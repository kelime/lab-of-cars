C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE ADC_SIDE_RANGEFINDER
OBJECT MODULE PLACED IN .\DP8051_Keil_903\Debug\ADC_Side_Rangefinder.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\2.1\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\ADC_Side_Rangefinder.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_903\Debug\ADC_Side_Rangefi
                    -nder.lst) CD DB NOIP OT(2,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051_Keil_903\Debug\ADC_Side_Rangefinder.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: ADC_Side_Rangefinder.c  
   3          * Version 2.30
   4          *
   5          * Description:
   6          *  This file provides the source code to the API for the Delta-Sigma ADC
   7          *  Component.
   8          *
   9          * Note:
  10          *
  11          *******************************************************************************
  12          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          ********************************************************************************/
  17          
  18          #include "ADC_Side_Rangefinder.h"
  19          
  20          #if(ADC_Side_Rangefinder_DEFAULT_INTERNAL_CLK)
  21              #include "ADC_Side_Rangefinder_theACLK.h"
  22          #endif /* ADC_Side_Rangefinder_DEFAULT_INTERNAL_CLK */
  23          
  24          #include "ADC_Side_Rangefinder_Ext_CP_Clk.h"
  25          
  26          #if(ADC_Side_Rangefinder_DEFAULT_INPUT_MODE)
  27              #include "ADC_Side_Rangefinder_AMux.h"
  28          #endif /* ADC_Side_Rangefinder_DEFAULT_INPUT_MODE */
  29          
  30          /* Software flag for checking conversion completed or not */
  31          volatile uint8 ADC_Side_Rangefinder_convDone = 0u;
  32          
  33          /* Software flag to stop conversion for single sample conversion mode 
  34             with resolution above 16 bits */
  35          volatile uint8 ADC_Side_Rangefinder_stopConversion = 0u;
  36          
  37          /* To run the initialization block only at the start up */
  38          uint8 ADC_Side_Rangefinder_initVar = 0u;
  39          
  40          /* To check whether ADC started or not before switching the configuration */
  41          volatile uint8 ADC_Side_Rangefinder_started = 0u;
  42          
  43          /* Flag to hold ADC config number. By default active config is 1. */
  44          volatile uint8 ADC_Side_Rangefinder_Config = 1u;
  45          
  46          volatile int32 ADC_Side_Rangefinder_Offset = 0u;
  47          volatile int32 ADC_Side_Rangefinder_CountsPerVolt = (uint32)ADC_Side_Rangefinder_CFG1_COUNTS_PER_VOLT;
  48          
  49          /* Only valid for PSoC5A */
  50          /* Variable to decide whether or not to restore the register values from
  51              backup structure */
  52          #if (CY_PSOC5A)
                  uint8 ADC_Side_Rangefinder_restoreReg = 0u;
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 2   

              #endif /* CY_PSOC5A */
  55          
  56          /* Valid only for PSoC5A silicon */
  57          #if (CY_PSOC5A)
                  /* Backup struct for power mode registers */
                  static ADC_Side_Rangefinder_POWERMODE_BACKUP_STRUCT ADC_Side_Rangefinder_powerModeBackup = 
                  {
                      /* Initializing the structure fields with power mode registers of 
                         config1 */
                      ADC_Side_Rangefinder_CFG1_DSM_CR14,
                      ADC_Side_Rangefinder_CFG1_DSM_CR15,
                      ADC_Side_Rangefinder_CFG1_DSM_CR16,
                      ADC_Side_Rangefinder_CFG1_DSM_CR17,
                      ADC_Side_Rangefinder_CFG1_DSM_REF0,
                      ADC_Side_Rangefinder_CFG1_DSM_BUF0,
                      ADC_Side_Rangefinder_CFG1_DSM_BUF1,
                      ADC_Side_Rangefinder_CFG1_DSM_CLK,
                      ADC_Side_Rangefinder_BYPASS_DISABLED
                  };
              #endif /* CY_PSOC5A */
  74          
  75          
  76          /****************************************************************************** 
  77          * Function Name: ADC_Side_Rangefinder_Init
  78          *******************************************************************************
  79          *
  80          * Summary:
  81          *  Initialize component's parameters to the parameters set by user in the 
  82          *  customizer of the component placed onto schematic. Usually called in 
  83          * ADC_Side_Rangefinder_Start().
  84          *  
  85          *
  86          * Parameters:  
  87          *  void
  88          *
  89          * Return: 
  90          *  void 
  91          *
  92          *******************************************************************************/
  93          void ADC_Side_Rangefinder_Init(void) 
  94          {
  95   1          /* Initialize the registers with default customizer settings for config1 */
  96   1          ADC_Side_Rangefinder_InitConfig(1);
  97   1      
  98   1          /* This is only valid if there is an internal clock */
  99   1          #if(ADC_Side_Rangefinder_DEFAULT_INTERNAL_CLK)
 100   1              ADC_Side_Rangefinder_theACLK_SetMode(CYCLK_DUTY);
 101   1          #endif /* ADC_Side_Rangefinder_DEFAULT_INTERNAL_CLK */
 102   1          
 103   1          /* Set the duty cycle for charge pump clock */
 104   1          ADC_Side_Rangefinder_Ext_CP_Clk_SetMode(CYCLK_DUTY);
 105   1      
 106   1          /* To perform ADC calibration */
 107   1          ADC_Side_Rangefinder_GainCompensation(ADC_Side_Rangefinder_CFG1_RANGE, 
 108   1                                            ADC_Side_Rangefinder_CFG1_IDEAL_DEC_GAIN, 
 109   1                                            ADC_Side_Rangefinder_CFG1_IDEAL_ODDDEC_GAIN, 
 110   1                                            ADC_Side_Rangefinder_CFG1_RESOLUTION);        
 111   1      }
 112          
 113          
 114          /******************************************************************************
 115          * Function Name: ADC_Side_Rangefinder_Enable
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 3   

 116          *******************************************************************************
 117          *
 118          * Summary: 
 119          *  Enables the ADC DelSig block operation.
 120          *  
 121          *
 122          * Parameters:  
 123          *  void
 124          *
 125          * Return: 
 126          *  void 
 127          *
 128          *******************************************************************************/
 129          void ADC_Side_Rangefinder_Enable(void) 
 130          {
 131   1          /* Restore the power registers if silicon used is PSoC5A */
 132   1          #if (CY_PSOC5A)
                      if(ADC_Side_Rangefinder_restoreReg && 
                         (!(ADC_Side_Rangefinder_powerModeBackup.bypassRestore)))
                      {
                          ADC_Side_Rangefinder_RestorePowerRegisters();
                          ADC_Side_Rangefinder_restoreReg = 0u;
                      }
                      ADC_Side_Rangefinder_powerModeBackup.bypassRestore = ADC_Side_Rangefinder_BYPASS_DISABLED;
                  #endif /* CY_PSOC5A */
 141   1      
 142   1          /* Enable active mode power for ADC */
 143   1          ADC_Side_Rangefinder_PWRMGR_DEC_REG |= ADC_Side_Rangefinder_ACT_PWR_DEC_EN;
 144   1          ADC_Side_Rangefinder_PWRMGR_DSM_REG |= ADC_Side_Rangefinder_ACT_PWR_DSM_EN;
 145   1          
 146   1           /* Enable alternative active mode power for ADC */
 147   1          ADC_Side_Rangefinder_STBY_PWRMGR_DEC_REG |= ADC_Side_Rangefinder_STBY_PWR_DEC_EN;
 148   1          #if (CY_PSOC3 || CY_PSOC5LP)
 149   1          ADC_Side_Rangefinder_STBY_PWRMGR_DSM_REG |= ADC_Side_Rangefinder_STBY_PWR_DSM_EN;
 150   1          #endif /* CY_PSOC3 || CY_PSOC5LP */
 151   1      
 152   1          /* Config selected is 1, then before enablign the REFBUF0, REFBUF1 and 
 153   1                 VCMBUF's enable and press circuit and then after a delay of 3
 154   1                 microseconds, disable the press circuit. */
 155   1          if (ADC_Side_Rangefinder_Config == 1u)
 156   1              {
 157   2                  /* Disable PRES, Enable power to VCMBUF0, REFBUF0 and REFBUF1, enable 
 158   2                     PRES */
 159   2                  #if (CY_PSOC3 || CY_PSOC5LP)
 160   2                      ADC_Side_Rangefinder_RESET_CR4_REG |= ADC_Side_Rangefinder_IGNORE_PRESA1;
 161   2                      ADC_Side_Rangefinder_RESET_CR5_REG |= ADC_Side_Rangefinder_IGNORE_PRESA2;
 162   2                  #elif (CY_PSOC5A)
                              ADC_Side_Rangefinder_RESET_CR1_REG |= ADC_Side_Rangefinder_DIS_PRES1;
                              ADC_Side_Rangefinder_RESET_CR3_REG |= ADC_Side_Rangefinder_DIS_PRES2;
                          #endif /* CY_PSOC5A */
 166   2                  
 167   2                  ADC_Side_Rangefinder_DSM_CR17_REG |= (ADC_Side_Rangefinder_DSM_EN_BUF_VREF | ADC_Side_Rangefinder_DSM
             -_EN_BUF_VCM);
 168   2                  #if ((ADC_Side_Rangefinder_CFG1_REFERENCE == ADC_Side_Rangefinder_EXT_REF_ON_P03) || \
 169   2                       (ADC_Side_Rangefinder_CFG1_REFERENCE == ADC_Side_Rangefinder_EXT_REF_ON_P32))
                              ADC_Side_Rangefinder_DSM_CR17_REG &= ~ADC_Side_Rangefinder_DSM_EN_BUF_VREF;
                          #endif /* Check for exteranl reference option */
 172   2                  #if ((ADC_Side_Rangefinder_CFG1_RANGE == ADC_Side_Rangefinder_IR_VSSA_TO_2VREF) && \
 173   2                        (CY_PSOC3 || CY_PSOC5LP) && \
 174   2                        ((ADC_Side_Rangefinder_CFG1_REFERENCE != ADC_Side_Rangefinder_EXT_REF_ON_P03) && \
 175   2                       (ADC_Side_Rangefinder_CFG1_REFERENCE != ADC_Side_Rangefinder_EXT_REF_ON_P32)))
 176   2                      ADC_Side_Rangefinder_DSM_REF0_REG |= ADC_Side_Rangefinder_DSM_EN_BUF_VREF_INN;
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 4   

 177   2                  #endif /* ADC_Side_Rangefinder_IR_VSSA_TO_2VREF */
 178   2                  
 179   2                      /* Wait for 3 microseconds */
 180   2                  CyDelayUs(3);
 181   2              /* Enable the press circuit */
 182   2                  #if (CY_PSOC3 || CY_PSOC5LP)
 183   2                      ADC_Side_Rangefinder_RESET_CR4_REG &= ~ADC_Side_Rangefinder_IGNORE_PRESA1;
 184   2                      ADC_Side_Rangefinder_RESET_CR5_REG &= ~ADC_Side_Rangefinder_IGNORE_PRESA2;
 185   2                  #elif (CY_PSOC5A)
                              ADC_Side_Rangefinder_RESET_CR1_REG &= ~ADC_Side_Rangefinder_DIS_PRES1;
                              ADC_Side_Rangefinder_RESET_CR3_REG &= ~ADC_Side_Rangefinder_DIS_PRES2;
                          #endif /* CY_PSOC5A */
 189   2              }
 190   1          
 191   1          /* Enable negative pumps for DSM  */
 192   1          ADC_Side_Rangefinder_PUMP_CR1_REG  |= ( ADC_Side_Rangefinder_PUMP_CR1_CLKSEL | ADC_Side_Rangefinder_PU
             -MP_CR1_FORCE );
 193   1       
 194   1          /* This is only valid if there is an internal clock */
 195   1          #if(ADC_Side_Rangefinder_DEFAULT_INTERNAL_CLK)
 196   1              ADC_Side_Rangefinder_PWRMGR_CLK_REG |= ADC_Side_Rangefinder_ACT_PWR_CLK_EN;        
 197   1              ADC_Side_Rangefinder_STBY_PWRMGR_CLK_REG |= ADC_Side_Rangefinder_STBY_PWR_CLK_EN;
 198   1          #endif /* ADC_Side_Rangefinder_DEFAULT_INTERNAL_CLK */
 199   1          
 200   1          /* Enable the active and alternate active power for charge pump clock */
 201   1          ADC_Side_Rangefinder_PWRMGR_CHARGE_PUMP_CLK_REG |= ADC_Side_Rangefinder_ACT_PWR_CHARGE_PUMP_CLK_EN;
 202   1          ADC_Side_Rangefinder_STBY_PWRMGR_CHARGE_PUMP_CLK_REG |= ADC_Side_Rangefinder_STBY_PWR_CHARGE_PUMP_CLK_
             -EN;
 203   1              
 204   1      }
 205          
 206          
 207          #if (CY_PSOC5A) /* valid only for PSoC5A silicon */
                  /******************************************************************************* 
                  * Function Name: ADC_Side_Rangefinder_RestorePowerRegisters
                  ********************************************************************************
                  *
                  * Summary: 
                  *  Restores the power registers on calling Start() API. This API is only 
                  *   for internal use and valid only for PSoC5A.
                  *  
                  *
                  * Parameters:  
                  *  void
                  *
                  * Return: 
                  *  void 
                  *
                  ***************************************************************************/
                  void ADC_Side_Rangefinder_RestorePowerRegisters(void) 
                  {
                      ADC_Side_Rangefinder_DSM_CR14_REG = ADC_Side_Rangefinder_powerModeBackup.DSM_CR_14;
                      ADC_Side_Rangefinder_DSM_CR15_REG = ADC_Side_Rangefinder_powerModeBackup.DSM_CR_15;
                      ADC_Side_Rangefinder_DSM_CR16_REG = ADC_Side_Rangefinder_powerModeBackup.DSM_CR_16;
                      ADC_Side_Rangefinder_DSM_CR17_REG = ADC_Side_Rangefinder_powerModeBackup.DSM_CR_17;
                      ADC_Side_Rangefinder_DSM_REF0_REG = ADC_Side_Rangefinder_powerModeBackup.DSM_REF0;
                      ADC_Side_Rangefinder_DSM_BUF0_REG = ADC_Side_Rangefinder_powerModeBackup.DSM_BUF0;
                      ADC_Side_Rangefinder_DSM_BUF1_REG = ADC_Side_Rangefinder_powerModeBackup.DSM_BUF1;
                      ADC_Side_Rangefinder_DSM_CLK_REG = ADC_Side_Rangefinder_powerModeBackup.DSM_CLK;
                  }
              
              
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 5   

                  /************************************************************************** 
                  * Function Name: ADC_Side_Rangefinder_SavePowerRegisters
                  ***************************************************************************
                  *
                  * Summary: 
                  *  Save the power registers before stopping the block operation. This is 
                  *  called by Stop() API. This API is only for internal use and valid only 
                  *  for PSoC5A.
                  *  
                  *
                  * Parameters:  
                  *  void
                  *
                  * Return: 
                  *  void 
                  *
                  **************************************************************************/
                  void ADC_Side_Rangefinder_SavePowerRegisters(void) 
                  {
                      ADC_Side_Rangefinder_powerModeBackup.DSM_CR_14 = ADC_Side_Rangefinder_DSM_CR14_REG;
                      ADC_Side_Rangefinder_powerModeBackup.DSM_CR_15 = ADC_Side_Rangefinder_DSM_CR15_REG;
                      ADC_Side_Rangefinder_powerModeBackup.DSM_CR_16 = ADC_Side_Rangefinder_DSM_CR16_REG;
                      ADC_Side_Rangefinder_powerModeBackup.DSM_CR_17 = ADC_Side_Rangefinder_DSM_CR17_REG;
                      ADC_Side_Rangefinder_powerModeBackup.DSM_REF0 = ADC_Side_Rangefinder_DSM_REF0_REG;
                      ADC_Side_Rangefinder_powerModeBackup.DSM_BUF0 = ADC_Side_Rangefinder_DSM_BUF0_REG;
                      ADC_Side_Rangefinder_powerModeBackup.DSM_BUF1 = ADC_Side_Rangefinder_DSM_BUF1_REG;
                      ADC_Side_Rangefinder_powerModeBackup.DSM_CLK = ADC_Side_Rangefinder_DSM_CLK_REG;
                  }
              
              
                  /************************************************************************* 
                  * Function Name: ADC_Side_Rangefinder_SetLowPower
                  ***************************************************************************
                  *
                  * Summary: 
                  *  Set all the power registers of DSM block to low power mode. This API is
                  *   called by Stop() API. This API is only for internal use and valid for 
                  *   only PSoC5A.
                  *  
                  *
                  * Parameters:  
                  *  void
                  *
                  * Return: 
                  *  void 
                  *
                  ***************************************************************************/
                  void ADC_Side_Rangefinder_SetLowPower(void) 
                  {
                      ADC_Side_Rangefinder_DSM_CR14_REG &= ~ADC_Side_Rangefinder_DSM_POWER1_MASK;
                      ADC_Side_Rangefinder_DSM_CR14_REG |= ADC_Side_Rangefinder_DSM_POWER1_44UA;
                      
                      ADC_Side_Rangefinder_DSM_CR15_REG &= ~(ADC_Side_Rangefinder_DSM_POWER2_3_MASK | ADC_Side_Rangefind
             -er_DSM_POWER_COMP_MASK);
                      ADC_Side_Rangefinder_DSM_CR15_REG |= (ADC_Side_Rangefinder_DSM_POWER2_3_LOW | ADC_Side_Rangefinder
             -_DSM_POWER_VERYLOW);
                      
                      ADC_Side_Rangefinder_DSM_CR16_REG &= ~(ADC_Side_Rangefinder_DSM_CP_PWRCTL_MASK | ADC_Side_Rangefin
             -der_DSM_POWER_SUM_MASK |
                                                         ADC_Side_Rangefinder_DSM_CP_ENABLE);
                      ADC_Side_Rangefinder_DSM_CR16_REG |= (ADC_Side_Rangefinder_DSM_POWER_SUM_LOW | ADC_Side_Rangefinde
             -r_DSM_CP_PWRCTL_LOW);
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 6   

                      
                      ADC_Side_Rangefinder_DSM_CR17_REG &= ~(ADC_Side_Rangefinder_DSM_EN_BUF_VREF | ADC_Side_Rangefinder
             -_DSM_PWR_CTRL_VCM_MASK |
                                                         ADC_Side_Rangefinder_DSM_PWR_CTRL_VREF_MASK | ADC_Side_Rangefin
             -der_DSM_EN_BUF_VCM |
                                                         ADC_Side_Rangefinder_DSM_PWR_CTRL_VREF_INN_MASK);
                      ADC_Side_Rangefinder_DSM_CR17_REG |= (ADC_Side_Rangefinder_DSM_PWR_CTRL_VREF_0 | ADC_Side_Rangefin
             -der_DSM_PWR_CTRL_VCM_0 |
                                                         ADC_Side_Rangefinder_DSM_PWR_CTRL_VREF_INN_0);
                      
                      /* Disable reference buffers */
                      ADC_Side_Rangefinder_DSM_REF0_REG &= ~(ADC_Side_Rangefinder_DSM_EN_BUF_VREF_INN | ADC_Side_Rangefi
             -nder_DSM_VREF_RES_DIV_EN |
                                                         ADC_Side_Rangefinder_DSM_VCM_RES_DIV_EN);
                          
                      /* Disable the positive input buffer */
                      ADC_Side_Rangefinder_DSM_BUF0_REG &= ~ADC_Side_Rangefinder_DSM_ENABLE_P;
                      /* Disable the negative input buffer */
                      ADC_Side_Rangefinder_DSM_BUF1_REG &= ~ADC_Side_Rangefinder_DSM_ENABLE_N;
                      /* Disable the clock to DSM */
                      ADC_Side_Rangefinder_DSM_CLK_REG &= ~(ADC_Side_Rangefinder_DSM_CLK_CLK_EN | ADC_Side_Rangefinder_D
             -SM_CLK_BYPASS_SYNC);
                  }
              #endif /* CY_PSOC5A */
 314          
 315          
 316          /******************************************************************************* 
 317          * Function Name: ADC_Side_Rangefinder_Start
 318          ********************************************************************************
 319          *
 320          * Summary:
 321          *  The start function initializes the Delta Sigma Modulator with the default  
 322          *  values, and sets the power to the given level.  A power level of 0, is the 
 323          *  same as executing the stop function.
 324          *
 325          * Parameters:  
 326          *  None
 327          *
 328          * Return: 
 329          *  void 
 330          *
 331          * Global variables:
 332          *  ADC_Side_Rangefinder_initVar:  Used to check the initial configuration,
 333          *  modified when this function is called for the first time.
 334          *
 335          *******************************************************************************/
 336          void ADC_Side_Rangefinder_Start() 
 337          {
 338   1          if(ADC_Side_Rangefinder_initVar == 0u)
 339   1          {
 340   2              if(!(ADC_Side_Rangefinder_started))
 341   2              {
 342   3                  ADC_Side_Rangefinder_Init();
 343   3              }
 344   2              ADC_Side_Rangefinder_initVar = 1u;
 345   2          }
 346   1      
 347   1          /* Enable the ADC */
 348   1          ADC_Side_Rangefinder_Enable();
 349   1      }
 350          
 351          
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 7   

 352          /*******************************************************************************
 353          * Function Name: ADC_Side_Rangefinder_Stop
 354          ********************************************************************************
 355          *
 356          * Summary:
 357          *  Stops and powers down ADC to lowest power state.
 358          *
 359          * Parameters:  
 360          *  void
 361          *
 362          * Return: 
 363          *  void 
 364          *
 365          *******************************************************************************/
 366          void ADC_Side_Rangefinder_Stop(void) 
 367          {
 368   1          /* Stop conversions */
 369   1          ADC_Side_Rangefinder_DEC_CR_REG &= ~ADC_Side_Rangefinder_DEC_START_CONV;
 370   1          ADC_Side_Rangefinder_DEC_SR_REG |=  ADC_Side_Rangefinder_DEC_INTR_CLEAR;
 371   1          
 372   1          /* Disable PRES, Disable power to VCMBUF0, REFBUF0 and REFBUF1, 
 373   1             enable PRES */
 374   1          #if (CY_PSOC3 || CY_PSOC5LP)
 375   1              ADC_Side_Rangefinder_RESET_CR4_REG |= ADC_Side_Rangefinder_IGNORE_PRESA1;
 376   1              ADC_Side_Rangefinder_RESET_CR5_REG |= ADC_Side_Rangefinder_IGNORE_PRESA2;
 377   1          #elif (CY_PSOC5A)
                      ADC_Side_Rangefinder_RESET_CR1_REG |= ADC_Side_Rangefinder_DIS_PRES1;
                      ADC_Side_Rangefinder_RESET_CR3_REG |= ADC_Side_Rangefinder_DIS_PRES2;
                  #endif /* CY_PSOC5A */
 381   1          
 382   1          ADC_Side_Rangefinder_DSM_CR17_REG &= ~(ADC_Side_Rangefinder_DSM_EN_BUF_VREF | ADC_Side_Rangefinder_DSM
             -_EN_BUF_VCM);
 383   1          ADC_Side_Rangefinder_DSM_REF0_REG &= ~ADC_Side_Rangefinder_DSM_EN_BUF_VREF_INN;
 384   1          
 385   1          /* Wait for 3 microseconds. */
 386   1          CyDelayUs(3);
 387   1          
 388   1              /* Enable the press circuit */
 389   1          #if (CY_PSOC3 || CY_PSOC5LP)
 390   1              ADC_Side_Rangefinder_RESET_CR4_REG &= ~ADC_Side_Rangefinder_IGNORE_PRESA1;
 391   1              ADC_Side_Rangefinder_RESET_CR5_REG &= ~ADC_Side_Rangefinder_IGNORE_PRESA2;
 392   1          #elif (CY_PSOC5A)
                      ADC_Side_Rangefinder_RESET_CR1_REG &= ~ADC_Side_Rangefinder_DIS_PRES1;
                      ADC_Side_Rangefinder_RESET_CR3_REG &= ~ADC_Side_Rangefinder_DIS_PRES2;
                  #endif /* CY_PSOC5A */
 396   1          
 397   1          /* If PSoC5A then don't disable the power instead put the block to  
 398   1             low power mode. Also, save current state of all the power configuration 
 399   1             registers before putting block to low power mode */
 400   1          #if (CY_PSOC5A)
                      
                      /* set the flag */
                      ADC_Side_Rangefinder_restoreReg = 1u;
                      
                      ADC_Side_Rangefinder_SavePowerRegisters();
                      ADC_Side_Rangefinder_SetLowPower();
                  #else    
 408   1              /* Disable power to the ADC */
 409   1              ADC_Side_Rangefinder_PWRMGR_DSM_REG &= ~ADC_Side_Rangefinder_ACT_PWR_DSM_EN;
 410   1          #endif /* CY_PSOC5A */
 411   1          
 412   1          /* Disable power to Decimator block */
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 8   

 413   1          ADC_Side_Rangefinder_PWRMGR_DEC_REG &= ~ADC_Side_Rangefinder_ACT_PWR_DEC_EN;
 414   1          
 415   1          /* Disable alternative active power to the ADC */
 416   1          ADC_Side_Rangefinder_STBY_PWRMGR_DEC_REG &= ~ADC_Side_Rangefinder_STBY_PWR_DEC_EN;
 417   1          #if (CY_PSOC3 || CY_PSOC5LP)
 418   1          ADC_Side_Rangefinder_STBY_PWRMGR_DSM_REG &= ~ADC_Side_Rangefinder_STBY_PWR_DSM_EN;
 419   1          #endif /* CY_PSOC3 || CY_PSOC5LP */
 420   1      
 421   1         /* Disable negative pumps for DSM  */
 422   1          ADC_Side_Rangefinder_PUMP_CR1_REG &= ~(ADC_Side_Rangefinder_PUMP_CR1_CLKSEL | ADC_Side_Rangefinder_PUM
             -P_CR1_FORCE );
 423   1          
 424   1          /* This is only valid if there is an internal clock */
 425   1          #if(ADC_Side_Rangefinder_DEFAULT_INTERNAL_CLK)
 426   1              ADC_Side_Rangefinder_PWRMGR_CLK_REG &= ~ADC_Side_Rangefinder_ACT_PWR_CLK_EN;
 427   1              ADC_Side_Rangefinder_STBY_PWRMGR_CLK_REG &= ~ADC_Side_Rangefinder_STBY_PWR_CLK_EN;
 428   1          #endif /* ADC_Side_Rangefinder_DEFAULT_INTERNAL_CLK */
 429   1          
 430   1          /* Disable power to charge pump clock */
 431   1          ADC_Side_Rangefinder_PWRMGR_CHARGE_PUMP_CLK_REG &= ~ADC_Side_Rangefinder_ACT_PWR_CHARGE_PUMP_CLK_EN;
 432   1          ADC_Side_Rangefinder_STBY_PWRMGR_CHARGE_PUMP_CLK_REG &= ~ADC_Side_Rangefinder_STBY_PWR_CHARGE_PUMP_CLK
             -_EN;
 433   1      }
 434          
 435          
 436          /*******************************************************************************
 437          * Function Name: ADC_Side_Rangefinder_SetBufferGain
 438          ********************************************************************************
 439          *
 440          * Summary:
 441          *  Set input buffer range.
 442          *
 443          * Parameters:  
 444          *  gain:  Two bit value to select a gain of 1, 2, 4, or 8.
 445          *
 446          * Return: 
 447          *  void
 448          *
 449          *******************************************************************************/
 450          void ADC_Side_Rangefinder_SetBufferGain(uint8 gain) 
 451          {
 452   1          uint8 tmpReg;
 453   1          tmpReg = ADC_Side_Rangefinder_DSM_BUF1_REG & ~ADC_Side_Rangefinder_DSM_GAIN_MASK;
 454   1          tmpReg |= (gain << 2);
 455   1          ADC_Side_Rangefinder_DSM_BUF1_REG = tmpReg;
 456   1      }
 457          
 458          
 459          /*******************************************************************************
 460          * Function Name: ADC_Side_Rangefinder_SetCoherency
 461          ********************************************************************************
 462          *
 463          * Summary:
 464          *  Sets the ADC output register coherency bit.
 465          *
 466          * Parameters:  
 467          *  gain:  Two bit value to set the coherency bit.
 468                    00-Coherency checking off
 469                    01-low byte is key byte
 470                    02-middle byte is the key byte
 471                    03-high byte is the key byte
 472          *
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 9   

 473          * Return: 
 474          *  void
 475          *
 476          * Side Effects:  If the coherency is changed, for any reason, it should be 
 477          *                changed back to the LSB when the provided "GetResult" API 
 478          *                is used.
 479          *
 480          *******************************************************************************/
 481          void ADC_Side_Rangefinder_SetCoherency(uint8 coherency) 
 482          {
 483   1          uint8 tmpReg;    
 484   1          tmpReg = ADC_Side_Rangefinder_DEC_COHER_REG & ~ADC_Side_Rangefinder_DEC_SAMP_KEY_MASK;
 485   1          tmpReg |= coherency;
 486   1          ADC_Side_Rangefinder_DEC_COHER_REG = tmpReg;
 487   1      }
 488          
 489          
 490          /*******************************************************************************
 491          * Function Name: ADC_Side_Rangefinder_SetGCOR
 492          ********************************************************************************
 493          *
 494          * Summary:
 495          *  Calculates a new GCOR value and writes it into the GCOR register.
 496          *
 497          * Parameters:  
 498          *  gainAdjust:  floating point value to set GCOR registers.
 499          *
 500          * Return: 
 501          *  uint8:  0-if GCOR value is within the expected range.
 502                     1- if GCOR is outside the expected range.
 503          *
 504          * Side Effects:  The GVAL register is set to the amount of valid bits in the
 505          *                GCOR  register minus one. If GVAL is 15 (0x0F), all 16 bits
 506          *                of the GCOR registers will be valid. If for example GVAL is 
 507          *                11 (0x0B) only 12 bits will be valid. The least 4 bits will
 508          *                be lost when the GCOR value is shifted 4 places to the right.
 509          *
 510          ******************************************************************************/
 511          uint8 ADC_Side_Rangefinder_SetGCOR(float gainAdjust) 
 512          {
 513   1          uint16 tmpReg;
 514   1          uint8 status;
 515   1          float tmpValue;
 516   1          
 517   1          tmpReg = ADC_Side_Rangefinder_DEC_GCORH_REG;
 518   1          tmpReg = (tmpReg << 8) | ADC_Side_Rangefinder_DEC_GCOR_REG;
 519   1          tmpValue = ((float)tmpReg / ADC_Side_Rangefinder_IDEAL_GAIN_CONST);
 520   1          tmpValue = tmpValue * gainAdjust;
 521   1          
 522   1          if (tmpValue > 1.9999)
 523   1          {
 524   2              status = 1;
 525   2          }
 526   1          else
 527   1          {
 528   2              tmpReg = (uint16)(tmpValue * ADC_Side_Rangefinder_IDEAL_GAIN_CONST);
 529   2              ADC_Side_Rangefinder_DEC_GCOR_REG = (uint8)tmpReg;
 530   2              ADC_Side_Rangefinder_DEC_GCORH_REG = (uint8) (tmpReg >> 8);
 531   2              status = 0;
 532   2          }
 533   1          
 534   1          return status;
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 10  

 535   1      }
 536          
 537          
 538          /******************************************************************************
 539          * Function Name: ADC_Side_Rangefinder_ReadGCOR
 540          *******************************************************************************
 541          *
 542          * Summary:
 543          *  This API returns the current GCOR register value, normalized based on the 
 544          *  GVAL register settings.
 545          *
 546          * Parameters:  
 547          *  void
 548          *
 549          * Return: 
 550          *  uint16:  Normalized GCOR value.
 551          *
 552          * Side Effects:  If the GVAL register is set to a value greater than 0x0F, then
 553                           it gives unexpected value.
 554          *
 555          *******************************************************************************/
 556          uint16 ADC_Side_Rangefinder_ReadGCOR(void) 
 557          {
 558   1          uint8 gValue;
 559   1          uint16 gcorValue, gcorRegValue;
 560   1          
 561   1          gValue = ADC_Side_Rangefinder_DEC_GVAL_REG;
 562   1          gcorRegValue = CY_GET_REG16(ADC_Side_Rangefinder_DEC_GCOR_PTR);
 563   1          
 564   1          switch (gValue)
 565   1          {
 566   2              case ADC_Side_Rangefinder_GVAL_RESOLUTIN_8:
 567   2                  gcorValue = gcorRegValue << (ADC_Side_Rangefinder_MAX_GVAL - gValue);
 568   2                  break;
 569   2              
 570   2              case ADC_Side_Rangefinder_GVAL_RESOLUTIN_9:
 571   2                  gcorValue = gcorRegValue << (ADC_Side_Rangefinder_MAX_GVAL - gValue);
 572   2                  break;
 573   2                  
 574   2              case ADC_Side_Rangefinder_GVAL_RESOLUTIN_10:
 575   2                  gcorValue = gcorRegValue << (ADC_Side_Rangefinder_MAX_GVAL - gValue);
 576   2                  break;
 577   2                  
 578   2              case ADC_Side_Rangefinder_GVAL_RESOLUTIN_11:
 579   2                  gcorValue = gcorRegValue << (ADC_Side_Rangefinder_MAX_GVAL - gValue);
 580   2                  break;
 581   2                  
 582   2              case ADC_Side_Rangefinder_GVAL_RESOLUTIN_12:
 583   2                  gcorValue = gcorRegValue << (ADC_Side_Rangefinder_MAX_GVAL - gValue);
 584   2                  break;
 585   2                  
 586   2              case ADC_Side_Rangefinder_GVAL_RESOLUTIN_13:
 587   2                  gcorValue = gcorRegValue << (ADC_Side_Rangefinder_MAX_GVAL - gValue);
 588   2                  break;
 589   2                  
 590   2              default:
 591   2                  gcorValue = gcorRegValue;
 592   2                  break;
 593   2          }
 594   1              
 595   1          return gcorValue;
 596   1      }
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 11  

 597          
 598          
 599          /*******************************************************************************
 600          * Function Name: ADC_Side_Rangefinder_SetBufferChop
 601          ********************************************************************************
 602          *
 603          * Summary:
 604          *  Sets the Delta Sigma Modulator Buffer chopper mode.
 605          *
 606          * Parameters:  
 607          *  chopen:  If non-zero set the chopper mode.
 608          *  chopFreq:  Chop frequency value.
 609          *
 610          * Return: 
 611          *  void
 612          *
 613          *******************************************************************************/
 614          void ADC_Side_Rangefinder_SetBufferChop(uint8 chopen, uint8 chopFreq) 
 615          {
 616   1          if(chopen != 0u)
 617   1          {
 618   2              ADC_Side_Rangefinder_DSM_BUF2_REG = (ADC_Side_Rangefinder_DSM_BUF_FCHOP_MASK & chopFreq) | \
 619   2                                               ADC_Side_Rangefinder_DSM_BUF_CHOP_EN;
 620   2          }
 621   1          else
 622   1          {
 623   2              ADC_Side_Rangefinder_DSM_BUF2_REG = 0x00u;
 624   2          }
 625   1      }
 626          
 627          
 628          /*******************************************************************************
 629          * Function Name: ADC_Side_Rangefinder_StartConvert
 630          ********************************************************************************
 631          *
 632          * Summary:
 633          *  Starts ADC conversion using the given mode.
 634          *
 635          * Parameters:  
 636          *  void
 637          *
 638          * Return: 
 639          *  void 
 640          *
 641          *******************************************************************************/
 642          void ADC_Side_Rangefinder_StartConvert(void) 
 643          {
 644   1          /* Start the conversion */
 645   1          ADC_Side_Rangefinder_DEC_CR_REG |= ADC_Side_Rangefinder_DEC_START_CONV;  
 646   1      }
 647          
 648          
 649          /*******************************************************************************
 650          * Function Name: ADC_Side_Rangefinder_StopConvert
 651          ********************************************************************************
 652          *
 653          * Summary:
 654          *  Starts ADC conversion using the given mode.
 655          *
 656          * Parameters:  
 657          *  void
 658          *
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 12  

 659          * Return: 
 660          *  void
 661          *
 662          * Global variables:
 663          *  ADC_Side_Rangefinder_convDone:  Modified when conversion is complete for single
 664          *   sample mode with resolution is above 16.
 665          *
 666          *******************************************************************************/
 667          void ADC_Side_Rangefinder_StopConvert(void) 
 668          {
 669   1          /* Stop all conversions */
 670   1          ADC_Side_Rangefinder_DEC_CR_REG &= ~ADC_Side_Rangefinder_DEC_START_CONV; 
 671   1          
 672   1          /* Software flag for checking conversion complete or not. Will be used when
 673   1             resolution is above 16 bits and conversion mode is single sample */
 674   1          ADC_Side_Rangefinder_convDone = 1u;
 675   1      }
 676          
 677          
 678          /*******************************************************************************
 679          * Function Name: ADC_Side_Rangefinder_IsEndConversion
 680          ********************************************************************************
 681          *
 682          * Summary:
 683          *  Queries the ADC to see if conversion is complete
 684          *
 685          * Parameters:  
 686          *  wMode:  Wait mode, 0 if return with answer immediately.
 687          *                     1 if wait until conversion is complete, then return.
 688          *
 689          * Return: 
 690          *  uint8 status:  0 =>  Conversion not complete.
 691          *                 1 =>  Conversion complete.
 692          *
 693          * Global variables:
 694          *  ADC_Side_Rangefinder_convDone:  Used to check whether conversion is complete
 695          *  or not for single sample mode with resolution is above 16
 696          *
 697          *******************************************************************************/
 698          uint8 ADC_Side_Rangefinder_IsEndConversion(uint8 wMode) 
 699          {
 700   1          uint8 status;
 701   1              
 702   1          /* Check for stop convert if conversion mode is Single Sample with 
 703   1             resolution above 16 bit */
 704   1          if(ADC_Side_Rangefinder_stopConversion == 1u)
 705   1          {
 706   2              do
 707   2              {
 708   3                  status = ADC_Side_Rangefinder_convDone;
 709   3              } while((status != ADC_Side_Rangefinder_DEC_CONV_DONE) && (wMode == ADC_Side_Rangefinder_WAIT_FOR_
             -RESULT));
 710   2          }
 711   1          else
 712   1          {
 713   2              do 
 714   2              {
 715   3                  status = ADC_Side_Rangefinder_DEC_SR_REG & ADC_Side_Rangefinder_DEC_CONV_DONE;
 716   3              } while((status != ADC_Side_Rangefinder_DEC_CONV_DONE) && (wMode == ADC_Side_Rangefinder_WAIT_FOR_
             -RESULT));
 717   2          }
 718   1          return(status);
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 13  

 719   1      }
 720          
 721          
 722          /*******************************************************************************
 723          * Function Name: ADC_Side_Rangefinder_GetResult8
 724          ********************************************************************************
 725          *
 726          * Summary:
 727          *  Returns an 8-bit result or the LSB of the last conversion.
 728          *
 729          * Parameters:  
 730          *  void
 731          *
 732          * Return: 
 733          *  int8:  ADC result.
 734          *
 735          *******************************************************************************/
 736          int8 ADC_Side_Rangefinder_GetResult8( void ) 
 737          {
 738   1           return( ADC_Side_Rangefinder_DEC_SAMP_REG );
 739   1      }
 740          
 741          
 742          /*******************************************************************************
 743          * Function Name: ADC_Side_Rangefinder_GetResult16
 744          ********************************************************************************
 745          *
 746          * Summary:
 747          *  Returns a 16-bit result from the last ADC conversion.
 748          *
 749          * Parameters:  
 750          *   void
 751          *
 752          * Return: 
 753          *  int16:  ADC result.
 754          *
 755          *******************************************************************************/
 756          int16 ADC_Side_Rangefinder_GetResult16(void) 
 757          {
 758   1          uint16 result;
 759   1          
 760   1          #if (CY_PSOC3)
 761   1              result = ADC_Side_Rangefinder_DEC_SAMPM_REG ;
 762   1              result = (result << 8 ) | ADC_Side_Rangefinder_DEC_SAMP_REG;
 763   1          #else
                      result = (CY_GET_REG16(ADC_Side_Rangefinder_DEC_SAMP_PTR));
                  #endif /* CY_PSOC3 */
 766   1          
 767   1          return result;
 768   1      }
 769          
 770          
 771          /*******************************************************************************
 772          * Function Name: ADC_Side_Rangefinder_GetResult32
 773          ********************************************************************************
 774          *
 775          * Summary:
 776          *  Returns an 32-bit result from ADC
 777          *
 778          * Parameters:  
 779          *  void
 780          *
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 14  

 781          * Return: 
 782          *  int32:  ADC result.
 783          *
 784          *******************************************************************************/
 785          int32 ADC_Side_Rangefinder_GetResult32(void) 
 786          {
 787   1          uint32 result;
 788   1      
 789   1          #if (CY_PSOC3)
 790   1              /* to make upper bits fo result to 0 */
 791   1              result = (int8) (0xff & ADC_Side_Rangefinder_DEC_SAMPH_REG); 
 792   1              result = (result << 8) | ADC_Side_Rangefinder_DEC_SAMPM_REG;
 793   1              result = (result << 8) | ADC_Side_Rangefinder_DEC_SAMP_REG;
 794   1          #else
                      result = CY_GET_REG16(ADC_Side_Rangefinder_DEC_SAMPH_PTR);
                      result = (result << 16) | (CY_GET_REG16(ADC_Side_Rangefinder_DEC_SAMP_PTR));
                  #endif /* CY_PSOC3 */
 798   1          
 799   1          return result;
 800   1      }
 801          
 802          
 803          /*******************************************************************************
 804          * Function Name: ADC_Side_Rangefinder_SetOffset
 805          ********************************************************************************
 806          *
 807          * Summary:
 808          *  This function sets the offset for voltage readings.
 809          *
 810          * Parameters:  
 811          *  int32:  offset  Offset in counts
 812          *
 813          * Return: 
 814          *  void
 815          *
 816          * Global variables:
 817          *  ADC_Side_Rangefinder_Offset:  Modified to set the user provided offset. This 
 818          *  variable is used for offset calibration purpose.
 819          *  Affects the ADC_Side_Rangefinder_CountsTo_Volts, 
 820          *  ADC_Side_Rangefinder_CountsTo_mVolts, ADC_Side_Rangefinder_CountsTo_uVolts functions 
 821          *  by subtracting the given offset. 
 822          *
 823          *******************************************************************************/
 824          void ADC_Side_Rangefinder_SetOffset(int32 offset) 
 825          {
 826   1       
 827   1          ADC_Side_Rangefinder_Offset = offset;
 828   1      }
 829          
 830          
 831          /*******************************************************************************
 832          * Function Name: ADC_Side_Rangefinder_SetGain
 833          ********************************************************************************
 834          *
 835          * Summary:
 836          *  This function sets the ADC gain in counts per volt.
 837          *
 838          * Parameters:  
 839          *  int32:  offset  Offset in counts
 840          *
 841          * Return: 
 842          *  void 
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 15  

 843          *
 844          * Global variables:
 845          *  ADC_Side_Rangefinder_CountsPerVolt:  modified to set the ADC gain in counts 
 846          *   per volt.
 847          *
 848          *******************************************************************************/
 849          void ADC_Side_Rangefinder_SetGain(int32 adcGain) 
 850          {
 851   1       
 852   1          ADC_Side_Rangefinder_CountsPerVolt = adcGain;
 853   1      }
 854          
 855          
 856          /*******************************************************************************
 857          * Function Name: ADC_Side_Rangefinder_CountsTo_mVolts
 858          ********************************************************************************
 859          *
 860          * Summary:
 861          *  This function converts ADC counts to mVolts.
 862          *
 863          * Parameters:  
 864          *  int32:  adcCounts   Reading from ADC.
 865          *
 866          * Return: 
 867          *  int32:  Result in mVolts
 868          *
 869          * Global variables:
 870          *  ADC_Side_Rangefinder_CountsPerVolt:  used to convert ADC counts to mVolts.
 871          *  ADC_Side_Rangefinder_Offset:  Used as the offset while converting ADC counts 
 872          *   to mVolts.
 873          *
 874          *******************************************************************************/
 875          int16 ADC_Side_Rangefinder_CountsTo_mVolts( int32 adcCounts) 
 876          {
 877   1      
 878   1          int32 mVolts = 0;
 879   1          int32 A, B;
 880   1              uint8 resolution = 16;
 881   1      
 882   1          /* Subtract ADC offset */
 883   1          adcCounts -= ADC_Side_Rangefinder_Offset;
 884   1              
 885   1              /* Set the resolution based on the configuration */
 886   1              if (ADC_Side_Rangefinder_Config == ADC_Side_Rangefinder_CFG1)
 887   1              {
 888   2              resolution = ADC_Side_Rangefinder_CFG1_RESOLUTION;
 889   2              }       
 890   1              else if (ADC_Side_Rangefinder_Config == ADC_Side_Rangefinder_CFG2)
 891   1              {
 892   2                  resolution = ADC_Side_Rangefinder_CFG2_RESOLUTION;
 893   2              }
 894   1              else if (ADC_Side_Rangefinder_Config == ADC_Side_Rangefinder_CFG3)
 895   1              {
 896   2                  resolution = ADC_Side_Rangefinder_CFG3_RESOLUTION;
 897   2              }
 898   1              else
 899   1              {
 900   2                  resolution = ADC_Side_Rangefinder_CFG4_RESOLUTION;
 901   2              }
 902   1              
 903   1          if(resolution < 17)
 904   1          {
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 16  

 905   2              A = 1000;
 906   2              B = 1;
 907   2          }
 908   1          else
 909   1          {
 910   2              A = 100;
 911   2              B = 10;
 912   2          }
 913   1      
 914   1          mVolts = ((A * adcCounts) / ((int32)ADC_Side_Rangefinder_CountsPerVolt/B)) ;   
 915   1      
 916   1          return( (int16)mVolts );
 917   1      }
 918          
 919          
 920          /*******************************************************************************
 921          * Function Name: ADC_Side_Rangefinder_CountsTo_Volts
 922          ********************************************************************************
 923          *
 924          * Summary:
 925          *  This function converts ADC counts to Volts
 926          *
 927          * Parameters:  
 928          *  int32:  adcCounts   Reading from ADC.
 929          *
 930          * Return: 
 931          *  float:  Result in Volts
 932          *
 933          * Global variables:
 934          *  ADC_Side_Rangefinder_CountsPerVolt:  used to convert to Volts.
 935          *  ADC_Side_Rangefinder_Offset:  Used as the offset while converting ADC counts 
 936          *   to Volts.
 937          *
 938          *******************************************************************************/
 939          float ADC_Side_Rangefinder_CountsTo_Volts( int32 adcCounts) 
 940          {
 941   1      
 942   1          float Volts = 0;
 943   1      
 944   1          /* Subtract ADC offset */
 945   1          adcCounts -= ADC_Side_Rangefinder_Offset;
 946   1      
 947   1          Volts = (float)adcCounts / (float)ADC_Side_Rangefinder_CountsPerVolt;   
 948   1          
 949   1          return( Volts );
 950   1      }
 951          
 952          
 953          /*******************************************************************************
 954          * Function Name: ADC_Side_Rangefinder_CountsTo_uVolts
 955          ********************************************************************************
 956          *
 957          * Summary:
 958          *  This function converts ADC counts to uVolts
 959          *
 960          * Parameters:  
 961          *  int32:  adcCounts   Reading from ADC.
 962          *
 963          * Return: 
 964          *  int32:  Result in uVolts
 965          *
 966          * Global variables:
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 17  

 967          *  ADC_Side_Rangefinder_CountsPerVolt:  used to convert ADC counts to mVolts.
 968          *  ADC_Side_Rangefinder_Offset:  Used as the offset while converting ADC counts 
 969          *   to mVolts.
 970          *
 971          * Theory: 
 972          * Care must be taken to not exceed the maximum value for a 32 bit signed
 973          * number in the conversion to uVolts and at the same time not loose 
 974          * resolution.
 975          *
 976          * uVolts = ((A * adcCounts) / ((int32)ADC_Side_Rangefinder_CountsPerVolt/B)) ;   
 977          *
 978          *  Resolution       A           B
 979          *   8 - 11      1,000,000         1
 980          *  12 - 14        100,000        10
 981          *  15 - 17         10,000       100
 982          *  18 - 20           1000      1000
 983          *
 984          *******************************************************************************/
 985          int32 ADC_Side_Rangefinder_CountsTo_uVolts( int32 adcCounts) 
 986          {
 987   1      
 988   1          int32 uVolts = 0;
 989   1          int32 A, B;
 990   1              uint8 resolution = 16;
 991   1              
 992   1              /* Set the resolution based on the configuration */
 993   1              if (ADC_Side_Rangefinder_Config == ADC_Side_Rangefinder_CFG1)
 994   1              {
 995   2              resolution = ADC_Side_Rangefinder_CFG1_RESOLUTION;
 996   2              }       
 997   1              else if (ADC_Side_Rangefinder_Config == ADC_Side_Rangefinder_CFG2)
 998   1              {
 999   2                  resolution = ADC_Side_Rangefinder_CFG2_RESOLUTION;
1000   2              }
1001   1              else if (ADC_Side_Rangefinder_Config == ADC_Side_Rangefinder_CFG3)
1002   1              {
1003   2                  resolution = ADC_Side_Rangefinder_CFG3_RESOLUTION;
1004   2              }
1005   1              else
1006   1              {
1007   2                  resolution = ADC_Side_Rangefinder_CFG4_RESOLUTION;
1008   2              }
1009   1          
1010   1          if(resolution < 12)
1011   1          {
1012   2              A = 1000000;
1013   2              B = 1;
1014   2          }
1015   1          else if(resolution < 15)
1016   1          {
1017   2              A = 100000;
1018   2              B = 10;
1019   2          }
1020   1          else if(resolution < 18)
1021   1          {
1022   2              A = 10000;
1023   2              B = 100;
1024   2          }
1025   1          else
1026   1          {
1027   2              A = 1000;
1028   2              B = 1000;
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 18  

1029   2          }
1030   1      
1031   1          /* Subtract ADC offset */
1032   1          adcCounts -= ADC_Side_Rangefinder_Offset;
1033   1      
1034   1          uVolts = ((A * adcCounts) / ((int32)ADC_Side_Rangefinder_CountsPerVolt/B)) ;   
1035   1        
1036   1          return( uVolts );
1037   1      }
1038          
1039          
1040          /*******************************************************************************
1041          * Function Name: ADC_Side_Rangefinder_IRQ_Start(void)
1042          ********************************************************************************
1043          *
1044          * Summary:
1045          *  Set up the interrupt and enable it. The IRQ_Start() API is included to 
1046          *  support legacy code. The routine has been replaced by the library source 
1047          *  code for interrupts. IRQ_Start() should not be used in new designs.
1048          * 
1049          * Parameters:  
1050          *   void.
1051          *
1052          * Return:
1053          *   void.
1054          *
1055          *******************************************************************************/
1056          void ADC_Side_Rangefinder_IRQ_Start(void) 
1057          {
1058   1          /* For all we know the interrupt is active. */
1059   1          CyIntDisable(ADC_Side_Rangefinder_IRQ__INTC_NUMBER );
1060   1      
1061   1          /* Set the ISR to point to the ADC_DelSig_1_IRQ Interrupt. */
1062   1          CyIntSetVector(ADC_Side_Rangefinder_IRQ__INTC_NUMBER, ADC_Side_Rangefinder_ISR1);
1063   1      
1064   1          /* Set the priority. */
1065   1          CyIntSetPriority(ADC_Side_Rangefinder_IRQ__INTC_NUMBER, ADC_Side_Rangefinder_IRQ_INTC_PRIOR_NUMBER);
1066   1      
1067   1          /* Enable interrupt. */
1068   1          CyIntEnable(ADC_Side_Rangefinder_IRQ__INTC_NUMBER);
1069   1      }
1070          
1071          
1072          /*******************************************************************************
1073          * Function Name: ADC_Side_Rangefinder_InitConfig(uint8 config)
1074          ********************************************************************************
1075          *
1076          * Summary:
1077          *  Initializes all registers based on customizer settings
1078          *
1079          * Parameters:  
1080          *   void
1081          *
1082          * Return: 
1083          *  void
1084          *
1085          * Global variables:
1086          *  ADC_Side_Rangefinder_initVar:  used to set the common registers in the beginning.
1087          *  ADC_Side_Rangefinder_CountsPerVolt:  Used to set the default counts per volt.
1088          *
1089          *******************************************************************************/
1090          void ADC_Side_Rangefinder_InitConfig(uint8 config) 
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 19  

1091          {
1092   1          ADC_Side_Rangefinder_stopConversion = 0u;
1093   1          
1094   1          if(ADC_Side_Rangefinder_initVar == 0u)
1095   1              {
1096   2                  ADC_Side_Rangefinder_DSM_DEM0_REG    = ADC_Side_Rangefinder_CFG1_DSM_DEM0;    
1097   2                  ADC_Side_Rangefinder_DSM_DEM1_REG    = ADC_Side_Rangefinder_CFG1_DSM_DEM1;    
1098   2                  ADC_Side_Rangefinder_DSM_MISC_REG    = ADC_Side_Rangefinder_CFG1_DSM_MISC;    
1099   2                  ADC_Side_Rangefinder_DSM_CLK_REG    |= ADC_Side_Rangefinder_CFG1_DSM_CLK; 
1100   2                  ADC_Side_Rangefinder_DSM_REF1_REG    = ADC_Side_Rangefinder_CFG1_DSM_REF1;    
1101   2              
1102   2                  ADC_Side_Rangefinder_DSM_OUT0_REG    = ADC_Side_Rangefinder_CFG1_DSM_OUT0;    
1103   2                  ADC_Side_Rangefinder_DSM_OUT1_REG    = ADC_Side_Rangefinder_CFG1_DSM_OUT1;   
1104   2              
1105   2                  ADC_Side_Rangefinder_DSM_CR0_REG     = ADC_Side_Rangefinder_CFG1_DSM_CR0;     
1106   2                  ADC_Side_Rangefinder_DSM_CR1_REG     = ADC_Side_Rangefinder_CFG1_DSM_CR1;     
1107   2                  ADC_Side_Rangefinder_DSM_CR2_REG     = ADC_Side_Rangefinder_CFG1_DSM_CR2;     
1108   2                  ADC_Side_Rangefinder_DSM_CR3_REG     = ADC_Side_Rangefinder_CFG1_DSM_CR3;     
1109   2                  ADC_Side_Rangefinder_DSM_CR13_REG    = ADC_Side_Rangefinder_CFG1_DSM_CR13;     
1110   2                  
1111   2                  ADC_Side_Rangefinder_DEC_SR_REG      = ADC_Side_Rangefinder_CFG1_DEC_SR;      
1112   2                  ADC_Side_Rangefinder_DEC_COHER_REG   = ADC_Side_Rangefinder_CFG1_DEC_COHER;   
1113   2              }
1114   1      
1115   1          if (config == 1u)
1116   1          {
1117   2              /* Default Config */   
1118   2              ADC_Side_Rangefinder_DEC_CR_REG      = ADC_Side_Rangefinder_CFG1_DEC_CR;      
1119   2              ADC_Side_Rangefinder_DEC_SHIFT1_REG  = ADC_Side_Rangefinder_CFG1_DEC_SHIFT1;  
1120   2              ADC_Side_Rangefinder_DEC_SHIFT2_REG  = ADC_Side_Rangefinder_CFG1_DEC_SHIFT2;  
1121   2              ADC_Side_Rangefinder_DEC_DR2_REG     = ADC_Side_Rangefinder_CFG1_DEC_DR2;     
1122   2              ADC_Side_Rangefinder_DEC_DR2H_REG    = ADC_Side_Rangefinder_CFG1_DEC_DR2H;    
1123   2              ADC_Side_Rangefinder_DEC_DR1_REG     = ADC_Side_Rangefinder_CFG1_DEC_DR1;     
1124   2              ADC_Side_Rangefinder_DEC_OCOR_REG    = ADC_Side_Rangefinder_CFG1_DEC_OCOR;    
1125   2              ADC_Side_Rangefinder_DEC_OCORM_REG   = ADC_Side_Rangefinder_CFG1_DEC_OCORM;   
1126   2              ADC_Side_Rangefinder_DEC_OCORH_REG   = ADC_Side_Rangefinder_CFG1_DEC_OCORH;   
1127   2              
1128   2              ADC_Side_Rangefinder_DSM_CR4_REG     = ADC_Side_Rangefinder_CFG1_DSM_CR4;     
1129   2              ADC_Side_Rangefinder_DSM_CR5_REG     = ADC_Side_Rangefinder_CFG1_DSM_CR5;     
1130   2              ADC_Side_Rangefinder_DSM_CR6_REG     = ADC_Side_Rangefinder_CFG1_DSM_CR6;     
1131   2              ADC_Side_Rangefinder_DSM_CR7_REG     = ADC_Side_Rangefinder_CFG1_DSM_CR7;     
1132   2              ADC_Side_Rangefinder_DSM_CR8_REG     = ADC_Side_Rangefinder_CFG1_DSM_CR8;     
1133   2              ADC_Side_Rangefinder_DSM_CR9_REG     = ADC_Side_Rangefinder_CFG1_DSM_CR9;     
1134   2              ADC_Side_Rangefinder_DSM_CR10_REG    = ADC_Side_Rangefinder_CFG1_DSM_CR10;    
1135   2              ADC_Side_Rangefinder_DSM_CR11_REG    = ADC_Side_Rangefinder_CFG1_DSM_CR11;    
1136   2              ADC_Side_Rangefinder_DSM_CR12_REG    = ADC_Side_Rangefinder_CFG1_DSM_CR12;    
1137   2              ADC_Side_Rangefinder_DSM_CR14_REG    = ADC_Side_Rangefinder_CFG1_DSM_CR14;    
1138   2              ADC_Side_Rangefinder_DSM_CR15_REG    = ADC_Side_Rangefinder_CFG1_DSM_CR15;    
1139   2              ADC_Side_Rangefinder_DSM_CR16_REG    = ADC_Side_Rangefinder_CFG1_DSM_CR16;    
1140   2              ADC_Side_Rangefinder_DSM_CR17_REG    = ADC_Side_Rangefinder_CFG1_DSM_CR17;
1141   2                      /* Set DSM_REF0_REG by disabling and enabling the PRESS cirucit */
1142   2                      ADC_Side_Rangefinder_SetDSMRef0Reg(ADC_Side_Rangefinder_CFG1_DSM_REF0);
1143   2              ADC_Side_Rangefinder_DSM_REF2_REG    = ADC_Side_Rangefinder_CFG1_DSM_REF2;    
1144   2              ADC_Side_Rangefinder_DSM_REF3_REG    = ADC_Side_Rangefinder_CFG1_DSM_REF3;    
1145   2              
1146   2              ADC_Side_Rangefinder_DSM_BUF0_REG    = ADC_Side_Rangefinder_CFG1_DSM_BUF0;    
1147   2              ADC_Side_Rangefinder_DSM_BUF1_REG    = ADC_Side_Rangefinder_CFG1_DSM_BUF1;    
1148   2              ADC_Side_Rangefinder_DSM_BUF2_REG    = ADC_Side_Rangefinder_CFG1_DSM_BUF2;   
1149   2              ADC_Side_Rangefinder_DSM_BUF3_REG    = ADC_Side_Rangefinder_CFG1_DSM_BUF3;
1150   2              #if (CY_PSOC5A)
                          ADC_Side_Rangefinder_DSM_CLK_REG    |= ADC_Side_Rangefinder_CFG1_DSM_CLK; 
                      #endif /* CY_PSOC5A */
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 20  

1153   2              
1154   2              /* To select either Vssa or Vref to -ve input of DSM depending on 
1155   2                the input  range selected.
1156   2              */
1157   2              
1158   2              #if(ADC_Side_Rangefinder_DEFAULT_INPUT_MODE)
1159   2                  #if (CY_PSOC3 || CY_PSOC5LP)
1160   2                      #if (ADC_Side_Rangefinder_CFG1_RANGE == ADC_Side_Rangefinder_IR_VSSA_TO_2VREF)
1161   2                          ADC_Side_Rangefinder_AMux_Select(1);
1162   2                      #else
                                  ADC_Side_Rangefinder_AMux_Select(0);
                              #endif /* ADC_Side_Rangefinder_IR_VSSA_TO_2VREF) */
1165   2                  #elif (CY_PSOC5A)
                              ADC_Side_Rangefinder_AMux_Select(0);
                          #endif /* CY_PSOC3 || CY_PSOC5LP */
1168   2              #endif /* ADC_Side_Rangefinder_DEFAULT_INPUT_MODE */
1169   2              
1170   2              /* Set the Conversion stop if resolution is above 16 bit and conversion 
1171   2                 mode is Single sample */
1172   2              #if(ADC_Side_Rangefinder_CFG1_RESOLUTION > 16 && \
1173   2                  ADC_Side_Rangefinder_CFG1_CONV_MODE == ADC_Side_Rangefinder_MODE_SINGLE_SAMPLE) 
                          ADC_Side_Rangefinder_stopConversion = 1;
                      #endif /* Single sample with resolution above 16 bits. */
1176   2              ADC_Side_Rangefinder_CountsPerVolt = (uint32)ADC_Side_Rangefinder_CFG1_COUNTS_PER_VOLT;
1177   2              
1178   2              /* Start and set interrupt vector */
1179   2              CyIntSetPriority(ADC_Side_Rangefinder_IRQ__INTC_NUMBER, ADC_Side_Rangefinder_IRQ_INTC_PRIOR_NUMBER
             -);
1180   2              CyIntSetVector(ADC_Side_Rangefinder_IRQ__INTC_NUMBER, ADC_Side_Rangefinder_ISR1 );
1181   2              CyIntEnable(ADC_Side_Rangefinder_IRQ__INTC_NUMBER);
1182   2          }
1183   1          
1184   1          #if(ADC_Side_Rangefinder_DEFAULT_NUM_CONFIGS > 1)
                      if(config == 2u)
                      {
                          /* Second Config */
                          ADC_Side_Rangefinder_DEC_CR_REG      = ADC_Side_Rangefinder_CFG2_DEC_CR;      
                          ADC_Side_Rangefinder_DEC_SHIFT1_REG  = ADC_Side_Rangefinder_CFG2_DEC_SHIFT1;  
                          ADC_Side_Rangefinder_DEC_SHIFT2_REG  = ADC_Side_Rangefinder_CFG2_DEC_SHIFT2;  
                          ADC_Side_Rangefinder_DEC_DR2_REG     = ADC_Side_Rangefinder_CFG2_DEC_DR2;     
                          ADC_Side_Rangefinder_DEC_DR2H_REG    = ADC_Side_Rangefinder_CFG2_DEC_DR2H;    
                          ADC_Side_Rangefinder_DEC_DR1_REG     = ADC_Side_Rangefinder_CFG2_DEC_DR1;     
                          ADC_Side_Rangefinder_DEC_OCOR_REG    = ADC_Side_Rangefinder_CFG2_DEC_OCOR;    
                          ADC_Side_Rangefinder_DEC_OCORM_REG   = ADC_Side_Rangefinder_CFG2_DEC_OCORM;   
                          ADC_Side_Rangefinder_DEC_OCORH_REG   = ADC_Side_Rangefinder_CFG2_DEC_OCORH;   
                      
                          ADC_Side_Rangefinder_DSM_CR4_REG     = ADC_Side_Rangefinder_CFG2_DSM_CR4;     
                          ADC_Side_Rangefinder_DSM_CR5_REG     = ADC_Side_Rangefinder_CFG2_DSM_CR5;     
                          ADC_Side_Rangefinder_DSM_CR6_REG     = ADC_Side_Rangefinder_CFG2_DSM_CR6;     
                          ADC_Side_Rangefinder_DSM_CR7_REG     = ADC_Side_Rangefinder_CFG2_DSM_CR7;     
                          ADC_Side_Rangefinder_DSM_CR8_REG     = ADC_Side_Rangefinder_CFG2_DSM_CR8;     
                          ADC_Side_Rangefinder_DSM_CR9_REG     = ADC_Side_Rangefinder_CFG2_DSM_CR9;     
                          ADC_Side_Rangefinder_DSM_CR10_REG    = ADC_Side_Rangefinder_CFG2_DSM_CR10;    
                          ADC_Side_Rangefinder_DSM_CR11_REG    = ADC_Side_Rangefinder_CFG2_DSM_CR11;    
                          ADC_Side_Rangefinder_DSM_CR12_REG    = ADC_Side_Rangefinder_CFG2_DSM_CR12;    
                          ADC_Side_Rangefinder_DSM_CR14_REG    = ADC_Side_Rangefinder_CFG2_DSM_CR14;    
                          ADC_Side_Rangefinder_DSM_CR15_REG    = ADC_Side_Rangefinder_CFG2_DSM_CR15;    
                          ADC_Side_Rangefinder_DSM_CR16_REG    = ADC_Side_Rangefinder_CFG2_DSM_CR16;    
                          ADC_Side_Rangefinder_DSM_CR17_REG    = ADC_Side_Rangefinder_CFG2_DSM_CR17;    
                                      /* Set DSM_REF0_REG by disabling and enabling the PRESS cirucit */
                                      ADC_Side_Rangefinder_SetDSMRef0Reg(ADC_Side_Rangefinder_CFG2_DSM_REF0);
                          ADC_Side_Rangefinder_DSM_REF2_REG    = ADC_Side_Rangefinder_CFG2_DSM_REF2;    
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 21  

                          ADC_Side_Rangefinder_DSM_REF3_REG    = ADC_Side_Rangefinder_CFG2_DSM_REF3;    
                      
                          ADC_Side_Rangefinder_DSM_BUF0_REG    = ADC_Side_Rangefinder_CFG2_DSM_BUF0;    
                          ADC_Side_Rangefinder_DSM_BUF1_REG    = ADC_Side_Rangefinder_CFG2_DSM_BUF1;    
                          ADC_Side_Rangefinder_DSM_BUF2_REG    = ADC_Side_Rangefinder_CFG2_DSM_BUF2;    
                          ADC_Side_Rangefinder_DSM_BUF3_REG    = ADC_Side_Rangefinder_CFG2_DSM_BUF3; 
                          #if (CY_PSOC5A)
                              ADC_Side_Rangefinder_DSM_CLK_REG    |= ADC_Side_Rangefinder_CFG1_DSM_CLK; 
                          #endif /* CY_PSOC5A */
                          
                          /* To select either Vssa or Vref to -ve input of DSM depending on 
                             the input range selected.
                          */
                          
                          #if(ADC_Side_Rangefinder_DEFAULT_INPUT_MODE)
                              #if (CY_PSOC3 || CY_PSOC5LP)
                                  #if (ADC_Side_Rangefinder_CFG2_INPUT_RANGE == ADC_Side_Rangefinder_IR_VSSA_TO_2VREF)
                                      ADC_Side_Rangefinder_AMux_Select(1);
                                  #else
                                      ADC_Side_Rangefinder_AMux_Select(0);
                                  #endif /* ADC_Side_Rangefinder_IR_VSSA_TO_2VREF) */
                              #elif (CY_PSOC5A)
                                  ADC_Side_Rangefinder_AMux_Select(0);
                              #endif /* CY_PSOC3 || CY_PSOC5LP */
                          #endif /* ADC_Side_Rangefinder_DEFAULT_INPUT_MODE */
                          
                          /* Set the Conversion stop if resolution is above 16 bit and 
                             conversion mode is Single sample */
                          #if(ADC_Side_Rangefinder_CFG2_RESOLUTION > 16 && \
                              ADC_Side_Rangefinder_CFG2_CONVMODE == ADC_Side_Rangefinder_MODE_SINGLE_SAMPLE) 
                              ADC_Side_Rangefinder_stopConversion = 1;
                          #endif /* Single sample with resolution above 16 bits. */
                          
                          ADC_Side_Rangefinder_CountsPerVolt = (uint32)ADC_Side_Rangefinder_CFG2_COUNTS_PER_VOLT;
                          
                          /* Start and set interrupt vector */
                          CyIntSetPriority(ADC_Side_Rangefinder_IRQ__INTC_NUMBER, ADC_Side_Rangefinder_IRQ_INTC_PRIOR_NU
             -MBER);
                          CyIntSetVector(ADC_Side_Rangefinder_IRQ__INTC_NUMBER, ADC_Side_Rangefinder_ISR2 );
                          CyIntEnable(ADC_Side_Rangefinder_IRQ__INTC_NUMBER);
                      }
                  #endif /* ADC_Side_Rangefinder_DEFAULT_NUM_CONFIGS > 1 */
1255   1      
1256   1          #if(ADC_Side_Rangefinder_DEFAULT_NUM_CONFIGS > 2)
                      if(config == 3u)
                      {
                          /* Third Config */
                          ADC_Side_Rangefinder_DEC_CR_REG      = ADC_Side_Rangefinder_CFG3_DEC_CR;      
                          ADC_Side_Rangefinder_DEC_SHIFT1_REG  = ADC_Side_Rangefinder_CFG3_DEC_SHIFT1;  
                          ADC_Side_Rangefinder_DEC_SHIFT2_REG  = ADC_Side_Rangefinder_CFG3_DEC_SHIFT2;  
                          ADC_Side_Rangefinder_DEC_DR2_REG     = ADC_Side_Rangefinder_CFG3_DEC_DR2;     
                          ADC_Side_Rangefinder_DEC_DR2H_REG    = ADC_Side_Rangefinder_CFG3_DEC_DR2H;    
                          ADC_Side_Rangefinder_DEC_DR1_REG     = ADC_Side_Rangefinder_CFG3_DEC_DR1;     
                          ADC_Side_Rangefinder_DEC_OCOR_REG    = ADC_Side_Rangefinder_CFG3_DEC_OCOR;    
                          ADC_Side_Rangefinder_DEC_OCORM_REG   = ADC_Side_Rangefinder_CFG3_DEC_OCORM;   
                          ADC_Side_Rangefinder_DEC_OCORH_REG   = ADC_Side_Rangefinder_CFG3_DEC_OCORH;   
                       
                          ADC_Side_Rangefinder_DSM_CR4_REG     = ADC_Side_Rangefinder_CFG3_DSM_CR4;     
                          ADC_Side_Rangefinder_DSM_CR5_REG     = ADC_Side_Rangefinder_CFG3_DSM_CR5;     
                          ADC_Side_Rangefinder_DSM_CR6_REG     = ADC_Side_Rangefinder_CFG3_DSM_CR6;     
                          ADC_Side_Rangefinder_DSM_CR7_REG     = ADC_Side_Rangefinder_CFG3_DSM_CR7;     
                          ADC_Side_Rangefinder_DSM_CR8_REG     = ADC_Side_Rangefinder_CFG3_DSM_CR8;     
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 22  

                          ADC_Side_Rangefinder_DSM_CR9_REG     = ADC_Side_Rangefinder_CFG3_DSM_CR9;     
                          ADC_Side_Rangefinder_DSM_CR10_REG    = ADC_Side_Rangefinder_CFG3_DSM_CR10;    
                          ADC_Side_Rangefinder_DSM_CR11_REG    = ADC_Side_Rangefinder_CFG3_DSM_CR11;    
                          ADC_Side_Rangefinder_DSM_CR12_REG    = ADC_Side_Rangefinder_CFG3_DSM_CR12;    
                          ADC_Side_Rangefinder_DSM_CR14_REG    = ADC_Side_Rangefinder_CFG3_DSM_CR14;    
                          ADC_Side_Rangefinder_DSM_CR15_REG    = ADC_Side_Rangefinder_CFG3_DSM_CR15;    
                          ADC_Side_Rangefinder_DSM_CR16_REG    = ADC_Side_Rangefinder_CFG3_DSM_CR16;    
                          ADC_Side_Rangefinder_DSM_CR17_REG    = ADC_Side_Rangefinder_CFG3_DSM_CR17;    
                                      /* Set DSM_REF0_REG by disabling and enabling the PRESS cirucit */
                                      ADC_Side_Rangefinder_SetDSMRef0Reg(ADC_Side_Rangefinder_CFG3_DSM_REF0);
                          ADC_Side_Rangefinder_DSM_REF2_REG    = ADC_Side_Rangefinder_CFG3_DSM_REF2;    
                          ADC_Side_Rangefinder_DSM_REF3_REG    = ADC_Side_Rangefinder_CFG3_DSM_REF3;    
                      
                          ADC_Side_Rangefinder_DSM_BUF0_REG    = ADC_Side_Rangefinder_CFG3_DSM_BUF0;    
                          ADC_Side_Rangefinder_DSM_BUF1_REG    = ADC_Side_Rangefinder_CFG3_DSM_BUF1;    
                          ADC_Side_Rangefinder_DSM_BUF2_REG    = ADC_Side_Rangefinder_CFG3_DSM_BUF2;
                          ADC_Side_Rangefinder_DSM_BUF3_REG    = ADC_Side_Rangefinder_CFG3_DSM_BUF3;
                          #if (CY_PSOC5A)
                              ADC_Side_Rangefinder_DSM_CLK_REG    |= ADC_Side_Rangefinder_CFG1_DSM_CLK; 
                          #endif /* CY_PSOC5A */
                          
                          /* To select either Vssa or Vref to -ve input of DSM depending on 
                             the input range selected.
                          */
                          
                          #if(ADC_Side_Rangefinder_DEFAULT_INPUT_MODE)
                              #if (CY_PSOC3 || CY_PSOC5LP)
                                  #if (ADC_Side_Rangefinder_CFG3_INPUT_RANGE == ADC_Side_Rangefinder_IR_VSSA_TO_2VREF)
                                      ADC_Side_Rangefinder_AMux_Select(1);
                                  #else
                                      ADC_Side_Rangefinder_AMux_Select(0);
                                  #endif /* ADC_Side_Rangefinder_IR_VSSA_TO_2VREF) */
                              #elif (CY_PSOC5A)
                                  ADC_Side_Rangefinder_AMux_Select(0);
                              #endif /* CY_PSOC3 || CY_PSOC5LP */
                          #endif /* ADC_Side_Rangefinder_DEFAULT_INPUT_MODE */
                                     
                          /* Set the Conversion stop if resolution is above 16 bit and 
                             conversion  mode is Single sample */
                          #if(ADC_Side_Rangefinder_CFG3_RESOLUTION > 16 && \
                              ADC_Side_Rangefinder_CFG3_CONVMODE == ADC_Side_Rangefinder_MODE_SINGLE_SAMPLE) 
                              ADC_Side_Rangefinder_stopConversion = 1;
                          #endif /* Single sample with resolution above 16 bits */
                          
                          ADC_Side_Rangefinder_CountsPerVolt = (uint32)ADC_Side_Rangefinder_CFG3_COUNTS_PER_VOLT;
                          
                          /* Start and set interrupt vector */
                          CyIntSetPriority(ADC_Side_Rangefinder_IRQ__INTC_NUMBER, ADC_Side_Rangefinder_IRQ_INTC_PRIOR_NU
             -MBER);
                          CyIntSetVector(ADC_Side_Rangefinder_IRQ__INTC_NUMBER, ADC_Side_Rangefinder_ISR3 );
                          CyIntEnable(ADC_Side_Rangefinder_IRQ__INTC_NUMBER);
                      }
                  #endif /* ADC_Side_Rangefinder_DEFAULT_NUM_CONFIGS > 3 */
1327   1      
1328   1          #if(ADC_Side_Rangefinder_DEFAULT_NUM_CONFIGS == 4)
                      if (config == 4u)
                      {
                          /* Fourth Config */
                          ADC_Side_Rangefinder_DEC_CR_REG      = ADC_Side_Rangefinder_CFG4_DEC_CR;      
                          ADC_Side_Rangefinder_DEC_SHIFT1_REG  = ADC_Side_Rangefinder_CFG4_DEC_SHIFT1;  
                          ADC_Side_Rangefinder_DEC_SHIFT2_REG  = ADC_Side_Rangefinder_CFG4_DEC_SHIFT2;  
                          ADC_Side_Rangefinder_DEC_DR2_REG     = ADC_Side_Rangefinder_CFG4_DEC_DR2;     
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 23  

                          ADC_Side_Rangefinder_DEC_DR2H_REG    = ADC_Side_Rangefinder_CFG4_DEC_DR2H;    
                          ADC_Side_Rangefinder_DEC_DR1_REG     = ADC_Side_Rangefinder_CFG4_DEC_DR1;     
                          ADC_Side_Rangefinder_DEC_OCOR_REG    = ADC_Side_Rangefinder_CFG4_DEC_OCOR;    
                          ADC_Side_Rangefinder_DEC_OCORM_REG   = ADC_Side_Rangefinder_CFG4_DEC_OCORM;   
                          ADC_Side_Rangefinder_DEC_OCORH_REG   = ADC_Side_Rangefinder_CFG4_DEC_OCORH;   
              
                          ADC_Side_Rangefinder_DSM_CR4_REG     = ADC_Side_Rangefinder_CFG4_DSM_CR4;     
                          ADC_Side_Rangefinder_DSM_CR5_REG     = ADC_Side_Rangefinder_CFG4_DSM_CR5;     
                          ADC_Side_Rangefinder_DSM_CR6_REG     = ADC_Side_Rangefinder_CFG4_DSM_CR6;     
                          ADC_Side_Rangefinder_DSM_CR7_REG     = ADC_Side_Rangefinder_CFG4_DSM_CR7;     
                          ADC_Side_Rangefinder_DSM_CR8_REG     = ADC_Side_Rangefinder_CFG4_DSM_CR8;     
                          ADC_Side_Rangefinder_DSM_CR9_REG     = ADC_Side_Rangefinder_CFG4_DSM_CR9;     
                          ADC_Side_Rangefinder_DSM_CR10_REG    = ADC_Side_Rangefinder_CFG4_DSM_CR10;    
                          ADC_Side_Rangefinder_DSM_CR11_REG    = ADC_Side_Rangefinder_CFG4_DSM_CR11;    
                          ADC_Side_Rangefinder_DSM_CR12_REG    = ADC_Side_Rangefinder_CFG4_DSM_CR12;    
                          ADC_Side_Rangefinder_DSM_CR14_REG    = ADC_Side_Rangefinder_CFG4_DSM_CR14;    
                          ADC_Side_Rangefinder_DSM_CR15_REG    = ADC_Side_Rangefinder_CFG4_DSM_CR15;    
                          ADC_Side_Rangefinder_DSM_CR16_REG    = ADC_Side_Rangefinder_CFG4_DSM_CR16;    
                          ADC_Side_Rangefinder_DSM_CR17_REG    = ADC_Side_Rangefinder_CFG4_DSM_CR17;
                                      /* Set DSM_REF0_REG by disabling and enabling the PRESS cirucit */
                                      ADC_Side_Rangefinder_SetDSMRef0Reg(ADC_Side_Rangefinder_CFG4_DSM_REF0);
                          ADC_Side_Rangefinder_DSM_REF2_REG    = ADC_Side_Rangefinder_CFG4_DSM_REF2;    
                          ADC_Side_Rangefinder_DSM_REF3_REG    = ADC_Side_Rangefinder_CFG4_DSM_REF3;    
                      
                          ADC_Side_Rangefinder_DSM_BUF0_REG    = ADC_Side_Rangefinder_CFG4_DSM_BUF0;    
                          ADC_Side_Rangefinder_DSM_BUF1_REG    = ADC_Side_Rangefinder_CFG4_DSM_BUF1;    
                          ADC_Side_Rangefinder_DSM_BUF2_REG    = ADC_Side_Rangefinder_CFG4_DSM_BUF2;
                          ADC_Side_Rangefinder_DSM_BUF3_REG    = ADC_Side_Rangefinder_CFG4_DSM_BUF3;
                          #if (CY_PSOC5A)
                              ADC_Side_Rangefinder_DSM_CLK_REG    |= ADC_Side_Rangefinder_CFG1_DSM_CLK; 
                          #endif /* CY_PSOC5A */
                          
                          /* To select either Vssa or Vref to -ve input of DSM depending on 
                             the input range selected.
                          */
                          
                          #if(ADC_Side_Rangefinder_DEFAULT_INPUT_MODE)
                              #if (CY_PSOC3 || CY_PSOC5LP)
                                  #if (ADC_Side_Rangefinder_CFG4_INPUT_RANGE == ADC_Side_Rangefinder_IR_VSSA_TO_2VREF)
                                      ADC_Side_Rangefinder_AMux_Select(1);
                                  #else
                                      ADC_Side_Rangefinder_AMux_Select(0);
                                  #endif /* ADC_Side_Rangefinder_IR_VSSA_TO_2VREF) */
                              #elif (CY_PSOC5A)
                                  ADC_Side_Rangefinder_AMux_Select(0);
                              #endif /* CY_PSOC3 || CY_PSOC5LP */
                          #endif /* ADC_Side_Rangefinder_DEFAULT_INPUT_MODE */
                                     
                          /* Set the Conversion stop if resolution is above 16 bit and 
                             conversion mode is Single sample */
                          #if(ADC_Side_Rangefinder_CFG4_RESOLUTION > 16 && \
                              ADC_Side_Rangefinder_CFG4_CONVMODE == ADC_Side_Rangefinder_MODE_SINGLE_SAMPLE) 
                              ADC_Side_Rangefinder_stopConversion = 1;
                          #endif /* Single sample with resolution above 16 bits */
                          
                          ADC_Side_Rangefinder_CountsPerVolt = (uint32)ADC_Side_Rangefinder_CFG4_COUNTS_PER_VOLT;
              
                          /* Start and set interrupt vector */
                          CyIntSetPriority(ADC_Side_Rangefinder_IRQ__INTC_NUMBER, ADC_Side_Rangefinder_IRQ_INTC_PRIOR_NU
             -MBER);
                          CyIntSetVector(ADC_Side_Rangefinder_IRQ__INTC_NUMBER, ADC_Side_Rangefinder_ISR4 );
                          CyIntEnable(ADC_Side_Rangefinder_IRQ__INTC_NUMBER);
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 24  

                      }
                  #endif /* ADC_Side_Rangefinder_DEFAULT_NUM_CONFIGS > 4 */
1399   1      }
1400          
1401          
1402          /*******************************************************************************
1403          * Function Name: ADC_Side_Rangefinder_RoundValue(uint32 busClockFreq, 
1404          *                                            uint32 clockFreq)
1405          ********************************************************************************
1406          *
1407          * Summary:
1408          *  Function to round an integer value.
1409          *
1410          * Parameters:  
1411          *  busClockFreq:  Frequency of the bus clock.
1412          *  clockFreq:  Frequency of the component clock.
1413          *
1414          * Return: 
1415          *  uint16: rounded integer value.
1416          *
1417          *******************************************************************************/
1418          uint16 ADC_Side_Rangefinder_RoundValue(uint32 busClockFreq, uint32 clockFreq) \
1419                                            
1420          {
1421   1          uint16 divider1, divider2;
1422   1          
1423   1          divider1 = ((busClockFreq * 10) / clockFreq);
1424   1          divider2 = (busClockFreq / clockFreq);
1425   1          if ( divider1 - (divider2 * 10) >= 5)
1426   1          {
1427   2              divider2 += 1;
1428   2          }
1429   1          return divider2;
1430   1      }
1431                   
1432          
1433          /*******************************************************************************
1434          * Function Name: ADC_Side_Rangefinder_SelectCofiguration(uint8 config, 
1435          *                                                    uint8 restart)
1436          ********************************************************************************
1437          *
1438          * Summary:
1439          *  Selects the user defined configuration. This API first stops the current ADC
1440          *  and then initializes the registers with the default values for that config. 
1441          *  This also performs calibration by writing GCOR registers with trim values 
1442          *  stored in the flash.
1443          *
1444          * Parameters:  
1445          *  config:  configuration user wants to select.
1446          *
1447          * Return: 
1448          *  void
1449          *
1450          *******************************************************************************/
1451          void ADC_Side_Rangefinder_SelectConfiguration(uint8 config, uint8 restart) \
1452                                                        
1453          {
1454   1          uint8 inputRange = 0, resolution = 16;
1455   1          uint16 idealGain = 0, adcClockDivider = 1;    
1456   1          uint16 cpClockDivider = 1;
1457   1          uint16 idealOddGain = 0;
1458   1          
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 25  

1459   1          /* Check whether the config is valid or not */
1460   1          if( config <= ADC_Side_Rangefinder_DEFAULT_NUM_CONFIGS)
1461   1          {   
1462   2             /* Set the flag to ensure start() API dont override the config
1463   2                 selected if ADC is not already started */
1464   2              if(ADC_Side_Rangefinder_initVar == 0u)
1465   2              {
1466   3                  ADC_Side_Rangefinder_started = 1u;
1467   3              }
1468   2                      
1469   2                      /* Update the config flag */
1470   2                      ADC_Side_Rangefinder_Config = config;
1471   2             
1472   2              /* Stop the ADC  */
1473   2              ADC_Side_Rangefinder_Stop();
1474   2              
1475   2              #if (CY_PSOC5A)
                          /* Set the structure field which checks whether or not to
                             restore the power registers */
                          ADC_Side_Rangefinder_powerModeBackup.bypassRestore = ADC_Side_Rangefinder_BYPASS_ENABLED;
                      #endif /* CY_PSOC5A */
1480   2              
1481   2              /* Set the  ADC registers based on the configuration */
1482   2              ADC_Side_Rangefinder_InitConfig(config);
1483   2              
1484   2              /* Trim value calculation */
1485   2              if(config == 1u)
1486   2              {
1487   3                  inputRange = ADC_Side_Rangefinder_CFG1_RANGE;
1488   3                  resolution = ADC_Side_Rangefinder_CFG1_RESOLUTION;
1489   3                  idealGain = ADC_Side_Rangefinder_CFG1_IDEAL_DEC_GAIN;
1490   3                  idealOddGain = ADC_Side_Rangefinder_CFG1_IDEAL_ODDDEC_GAIN;
1491   3                  adcClockDivider = ADC_Side_Rangefinder_RoundValue((uint32)BCLK__BUS_CLK__HZ,
1492   3                                                             (uint32)ADC_Side_Rangefinder_CFG1_CLOCK_FREQ);
1493   3                  cpClockDivider = ADC_Side_Rangefinder_RoundValue((uint32)BCLK__BUS_CLK__HZ,
1494   3                                                             (uint32)ADC_Side_Rangefinder_CFG1_CP_CLOCK_FREQ);
1495   3              }
1496   2      
1497   2              #if (ADC_Side_Rangefinder_DEFAULT_NUM_CONFIGS > 1)
                          if(config == 2u)
                          {
                              inputRange = ADC_Side_Rangefinder_CFG2_INPUT_RANGE;
                              resolution = ADC_Side_Rangefinder_CFG2_RESOLUTION;
                              idealGain = ADC_Side_Rangefinder_CFG2_IDEAL_DEC_GAIN;
                              idealOddGain = ADC_Side_Rangefinder_CFG2_IDEAL_ODDDEC_GAIN;
                              adcClockDivider = ADC_Side_Rangefinder_RoundValue((uint32)BCLK__BUS_CLK__HZ,
                                                                          (uint32)ADC_Side_Rangefinder_CFG2_CLOCK_FREQ);
                              cpClockDivider = ADC_Side_Rangefinder_RoundValue((uint32)BCLK__BUS_CLK__HZ,
                                                                     (uint32)ADC_Side_Rangefinder_CFG2_CP_CLOCK_FREQ);
                          }
                      #endif /* ADC_Side_Rangefinder_DEFAULT_NUM_CONFIGS > 1 */
1510   2      
1511   2              #if(ADC_Side_Rangefinder_DEFAULT_NUM_CONFIGS > 2)
                          if(config == 3u)
                          {
                              inputRange = ADC_Side_Rangefinder_CFG3_INPUT_RANGE;
                              resolution = ADC_Side_Rangefinder_CFG3_RESOLUTION;
                              idealGain = ADC_Side_Rangefinder_CFG3_IDEAL_DEC_GAIN;
                              idealOddGain = ADC_Side_Rangefinder_CFG3_IDEAL_ODDDEC_GAIN;
                              adcClockDivider = ADC_Side_Rangefinder_RoundValue((uint32)BCLK__BUS_CLK__HZ,
                                                                          (uint32)ADC_Side_Rangefinder_CFG3_CLOCK_FREQ);
                              cpClockDivider = ADC_Side_Rangefinder_RoundValue((uint32)BCLK__BUS_CLK__HZ,
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 26  

                                                                     (uint32)ADC_Side_Rangefinder_CFG3_CP_CLOCK_FREQ);
                          }
                      #endif /* ADC_Side_Rangefinder_DEFAULT_NUM_CONFIGS > 2 */
1524   2      
1525   2              #if (ADC_Side_Rangefinder_DEFAULT_NUM_CONFIGS > 3)
                          if(config == 4u)
                          {
                              inputRange = ADC_Side_Rangefinder_CFG4_INPUT_RANGE;
                              resolution = ADC_Side_Rangefinder_CFG4_RESOLUTION;
                              idealGain = ADC_Side_Rangefinder_CFG4_IDEAL_DEC_GAIN;
                              idealOddGain = ADC_Side_Rangefinder_CFG4_IDEAL_ODDDEC_GAIN;
                              adcClockDivider = ADC_Side_Rangefinder_RoundValue((uint32)BCLK__BUS_CLK__HZ,  
                                                                          (uint32)ADC_Side_Rangefinder_CFG4_CLOCK_FREQ);
                              cpClockDivider = ADC_Side_Rangefinder_RoundValue((uint32)BCLK__BUS_CLK__HZ,
                                                                     (uint32)ADC_Side_Rangefinder_CFG4_CP_CLOCK_FREQ);
                          }
                      #endif /* ADC_Side_Rangefinder_DEFAULT_NUM_CONFIGS > 3 */
1538   2              
1539   2              adcClockDivider = adcClockDivider - 1;
1540   2              /* Set the proper divider for the internal clock */
1541   2              #if(ADC_Side_Rangefinder_DEFAULT_INTERNAL_CLK)
1542   2                  ADC_Side_Rangefinder_theACLK_SetDividerRegister(adcClockDivider, 1);
1543   2              #endif /* ADC_Side_Rangefinder_DEFAULT_INTERNAL_CLK */
1544   2              
1545   2              cpClockDivider = cpClockDivider - 1;
1546   2              /* Set the proper divider for the Charge pump clock */
1547   2              ADC_Side_Rangefinder_Ext_CP_Clk_SetDividerRegister(cpClockDivider, 1);
1548   2              
1549   2              /* Compensate the gain */
1550   2              ADC_Side_Rangefinder_GainCompensation(inputRange, idealGain, idealOddGain, resolution);
1551   2              
1552   2              if(restart == 1u)
1553   2              {        
1554   3                  /* Restart the ADC */
1555   3                  ADC_Side_Rangefinder_Start();
1556   3                  
1557   3                  /* Code to disable the REFBUF0 if reference chosen is External ref */
1558   3                  #if (((ADC_Side_Rangefinder_CFG2_REFERENCE == ADC_Side_Rangefinder_EXT_REF_ON_P03) || \
1559   3                       (ADC_Side_Rangefinder_CFG2_REFERENCE == ADC_Side_Rangefinder_EXT_REF_ON_P32)) || \
1560   3                       ((ADC_Side_Rangefinder_CFG3_REFERENCE == ADC_Side_Rangefinder_EXT_REF_ON_P03) || \
1561   3                       (ADC_Side_Rangefinder_CFG3_REFERENCE == ADC_Side_Rangefinder_EXT_REF_ON_P32)) || \
1562   3                       ((ADC_Side_Rangefinder_CFG4_REFERENCE == ADC_Side_Rangefinder_EXT_REF_ON_P03) || \
1563   3                       (ADC_Side_Rangefinder_CFG4_REFERENCE == ADC_Side_Rangefinder_EXT_REF_ON_P32)))
                              if (((config == 2) && 
                                  ((ADC_Side_Rangefinder_CFG2_REFERENCE == ADC_Side_Rangefinder_EXT_REF_ON_P03) ||
                                  (ADC_Side_Rangefinder_CFG2_REFERENCE == ADC_Side_Rangefinder_EXT_REF_ON_P32))) ||
                                  ((config == 3) && 
                                  ((ADC_Side_Rangefinder_CFG3_REFERENCE == ADC_Side_Rangefinder_EXT_REF_ON_P03) ||
                                  (ADC_Side_Rangefinder_CFG3_REFERENCE == ADC_Side_Rangefinder_EXT_REF_ON_P32))) ||
                                  ((config == 4) && 
                                  ((ADC_Side_Rangefinder_CFG4_REFERENCE == ADC_Side_Rangefinder_EXT_REF_ON_P03) ||
                                  (ADC_Side_Rangefinder_CFG4_REFERENCE == ADC_Side_Rangefinder_EXT_REF_ON_P32))))
                              {
                                  /* Disable PRES, Enable power to VCMBUF0, REFBUF0 and 
                                     REFBUF1, enable PRES */
                                  #if (CY_PSOC3 || CY_PSOC5LP)
                                      ADC_Side_Rangefinder_RESET_CR4_REG |= ADC_Side_Rangefinder_IGNORE_PRESA1;
                                      ADC_Side_Rangefinder_RESET_CR5_REG |= ADC_Side_Rangefinder_IGNORE_PRESA2;
                                  #elif (CY_PSOC5A)
                                      ADC_Side_Rangefinder_RESET_CR1_REG |= ADC_Side_Rangefinder_DIS_PRES1;
                                      ADC_Side_Rangefinder_RESET_CR3_REG |= ADC_Side_Rangefinder_DIS_PRES2;
                                  #endif /* CY_PSOC5A */
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 27  

                      
                                  /* Disable the REFBUF0 */
                                  ADC_Side_Rangefinder_DSM_CR17_REG &= ~ADC_Side_Rangefinder_DSM_EN_BUF_VREF;
                                  
                                  /* Wait for 3 microseconds */
                                  CyDelayUs(3);
                                  /* Enable the press circuit */
                                  #if (CY_PSOC3 || CY_PSOC5LP)
                                      ADC_Side_Rangefinder_RESET_CR4_REG &= ~ADC_Side_Rangefinder_IGNORE_PRESA1;
                                      ADC_Side_Rangefinder_RESET_CR5_REG &= ~ADC_Side_Rangefinder_IGNORE_PRESA2;
                                  #elif (CY_PSOC5A)
                                      ADC_Side_Rangefinder_RESET_CR1_REG &= ~ADC_Side_Rangefinder_DIS_PRES1;
                                      ADC_Side_Rangefinder_RESET_CR3_REG &= ~ADC_Side_Rangefinder_DIS_PRES2;
                                  #endif /* CY_PSOC5A */
                              }
                          #endif /* */
1599   3                  
1600   3                  #if ((CY_PSOC3 || CY_PSOC5LP) && \
1601   3                       ((ADC_Side_Rangefinder_CFG2_INPUT_RANGE == ADC_Side_Rangefinder_IR_VSSA_TO_2VREF) || \
1602   3                        (ADC_Side_Rangefinder_CFG3_INPUT_RANGE == ADC_Side_Rangefinder_IR_VSSA_TO_2VREF) || \
1603   3                        (ADC_Side_Rangefinder_CFG4_INPUT_RANGE == ADC_Side_Rangefinder_IR_VSSA_TO_2VREF)))
                              if(((config == 2) && 
                                  (ADC_Side_Rangefinder_CFG2_INPUT_RANGE == ADC_Side_Rangefinder_IR_VSSA_TO_2VREF) && 
                                  ((ADC_Side_Rangefinder_CFG2_REFERENCE != ADC_Side_Rangefinder_EXT_REF_ON_P03) && 
                                   (ADC_Side_Rangefinder_CFG2_REFERENCE != ADC_Side_Rangefinder_EXT_REF_ON_P32))) ||
                                   ((config == 3) && 
                                    (ADC_Side_Rangefinder_CFG3_INPUT_RANGE == ADC_Side_Rangefinder_IR_VSSA_TO_2VREF) && 
                                   ((ADC_Side_Rangefinder_CFG3_REFERENCE != ADC_Side_Rangefinder_EXT_REF_ON_P03) && 
                                   (ADC_Side_Rangefinder_CFG3_REFERENCE != ADC_Side_Rangefinder_EXT_REF_ON_P32))) ||
                                   ((config == 4) && 
                                    (ADC_Side_Rangefinder_CFG4_INPUT_RANGE == ADC_Side_Rangefinder_IR_VSSA_TO_2VREF) && 
                                   ((ADC_Side_Rangefinder_CFG4_REFERENCE != ADC_Side_Rangefinder_EXT_REF_ON_P03) && 
                                   (ADC_Side_Rangefinder_CFG4_REFERENCE != ADC_Side_Rangefinder_EXT_REF_ON_P32))))
                              {
                                  /* Disable PRES, Enable power to VCMBUF0, REFBUF0 and 
                                     REFBUF1, enable PRES */
                                  #if (CY_PSOC3 || CY_PSOC5LP)
                                      ADC_Side_Rangefinder_RESET_CR4_REG |= ADC_Side_Rangefinder_IGNORE_PRESA1;
                                      ADC_Side_Rangefinder_RESET_CR5_REG |= ADC_Side_Rangefinder_IGNORE_PRESA2;
                                  #elif (CY_PSOC5A)
                                      ADC_Side_Rangefinder_RESET_CR1_REG |= ADC_Side_Rangefinder_DIS_PRES1;
                                      ADC_Side_Rangefinder_RESET_CR3_REG |= ADC_Side_Rangefinder_DIS_PRES2;
                                  #endif /* CY_PSOC5A */
                      
                                  /* Enable the REFBUF1 */
                                  ADC_Side_Rangefinder_DSM_REF0_REG |= ADC_Side_Rangefinder_DSM_EN_BUF_VREF_INN;
                                  
                                  /* Wait for 3 microseconds */
                                  CyDelayUs(3);
                                  /* Enable the press circuit */
                                  #if (CY_PSOC3 || CY_PSOC5LP)
                                      ADC_Side_Rangefinder_RESET_CR4_REG &= ~ADC_Side_Rangefinder_IGNORE_PRESA1;
                                      ADC_Side_Rangefinder_RESET_CR5_REG &= ~ADC_Side_Rangefinder_IGNORE_PRESA2;
                                  #elif (CY_PSOC5A)
                                      ADC_Side_Rangefinder_RESET_CR1_REG &= ~ADC_Side_Rangefinder_DIS_PRES1;
                                      ADC_Side_Rangefinder_RESET_CR3_REG &= ~ADC_Side_Rangefinder_DIS_PRES2;
                                  #endif /* CY_PSOC5A */
                              }
                          #endif /* (CY_PSOC3 || CY_PSOC5LP) */
1642   3              
1643   3                  /* Restart the ADC conversion */
1644   3                  ADC_Side_Rangefinder_StartConvert();
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 28  

1645   3              }
1646   2          }
1647   1      }     
1648          
1649          
1650          /*******************************************************************************
1651          * Function Name: ADC_Side_Rangefinder_GainCompensation(uint8, uint16, uint16, uint8)
1652          ********************************************************************************
1653          *
1654          * Summary:
1655          *  This API calculates the trim value and then loads this to GCOR register.
1656          *
1657          * Parameters:  
1658          *  inputRange:  input range for which trim value is to be calculated.
1659          *  IdealDecGain:  Ideal Decimator gain for the selected resolution and 
1660          *                 conversion  mode.
1661          *  IdealOddDecGain:  Ideal odd decimation gain for the selected resolution and 
1662                               conversion mode.
1663          *  resolution:  Resolution to select the proper flash location for trim value.
1664          *
1665          * Return: 
1666          *  void
1667          *
1668          *******************************************************************************/
1669          void ADC_Side_Rangefinder_GainCompensation(uint8 inputRange, uint16 IdealDecGain, uint16 IdealOddDecGain, 
             - \
1670                                                 uint8 resolution) 
1671          {
1672   1          int8 flash;
1673   1          int16 Normalised;
1674   1          uint16 GcorValue;
1675   1          uint32 GcorTmp;
1676   1          
1677   1          switch(inputRange)
1678   1          {         
1679   2              case ADC_Side_Rangefinder_IR_VNEG_VREF_DIFF:
1680   2              
1681   2              /* Normalize the flash Value */
1682   2              if(resolution > 15)
1683   2              {
1684   3                  flash = ADC_Side_Rangefinder_DEC_TRIM_VREF_DIFF_16_20; 
1685   3              }    
1686   2              else
1687   2              {
1688   3                  flash = ADC_Side_Rangefinder_DEC_TRIM_VREF_DIFF_8_15;
1689   3              }        
1690   2              break;
1691   2              
1692   2              case ADC_Side_Rangefinder_IR_VNEG_VREF_2_DIFF:
1693   2              
1694   2              /* Normalize the flash Value */
1695   2              if(resolution > 15)
1696   2              {
1697   3                  flash = ADC_Side_Rangefinder_DEC_TRIM_VREF_2_DIFF_16_20;
1698   3              }    
1699   2              else
1700   2              {
1701   3                  flash = ADC_Side_Rangefinder_DEC_TRIM_VREF_2_DIFF_8_15;
1702   3              }    
1703   2              break;
1704   2              
1705   2              case ADC_Side_Rangefinder_IR_VNEG_VREF_4_DIFF:
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 29  

1706   2              
1707   2              /* Normalize the flash Value */
1708   2              if(resolution > 15)
1709   2              {
1710   3                  flash = ADC_Side_Rangefinder_DEC_TRIM_VREF_4_DIFF_16_20;
1711   3              }    
1712   2              else
1713   2              {
1714   3                  flash = ADC_Side_Rangefinder_DEC_TRIM_VREF_4_DIFF_8_15;
1715   3              }    
1716   2              break;
1717   2              
1718   2              case ADC_Side_Rangefinder_IR_VNEG_VREF_16_DIFF:
1719   2              
1720   2              /* Normalize the flash Value */
1721   2              if(resolution > 15)
1722   2              {
1723   3                  flash = ADC_Side_Rangefinder_DEC_TRIM_VREF_16_DIFF_16_20;
1724   3              }    
1725   2              else
1726   2              {
1727   3                  flash = ADC_Side_Rangefinder_DEC_TRIM_VREF_16_DIFF_8_15;
1728   3              }    
1729   2              break;
1730   2              
1731   2              default:
1732   2                  flash = 0;
1733   2              break;
1734   2          }    
1735   1          if(inputRange == ADC_Side_Rangefinder_IR_VSSA_TO_VREF || inputRange == ADC_Side_Rangefinder_IR_VSSA_TO
             -_2VREF || 
1736   1             inputRange == ADC_Side_Rangefinder_IR_VSSA_TO_VDDA || inputRange == ADC_Side_Rangefinder_IR_VSSA_TO
             -_6VREF || 
1737   1             inputRange == ADC_Side_Rangefinder_IR_VNEG_2VREF_DIFF || inputRange == ADC_Side_Rangefinder_IR_VNEG
             -_6VREF_DIFF ||
1738   1             inputRange == ADC_Side_Rangefinder_IR_VNEG_VREF_8_DIFF)
1739   1          {
1740   2              Normalised  = 0;
1741   2          }
1742   1          else
1743   1          {
1744   2              Normalised  = ((int16)flash) * 32;
1745   2          }
1746   1                          
1747   1          /* Add two values */
1748   1          GcorValue = IdealDecGain + Normalised;  
1749   1          GcorTmp = (uint32)GcorValue * (uint32)IdealOddDecGain;
1750   1          GcorValue = (uint16)(GcorTmp / ADC_Side_Rangefinder_IDEAL_GAIN_CONST);
1751   1              
1752   1          if (resolution < 14)
1753   1          {
1754   2              GcorValue = (GcorValue >> (15 - (resolution + 1)));
1755   2              ADC_Side_Rangefinder_DEC_GVAL_REG = (resolution + 1);
1756   2          }
1757   1          else
1758   1          {
1759   2              /* Use all 16 bits */
1760   2              ADC_Side_Rangefinder_DEC_GVAL_REG = 15u;  
1761   2          }
1762   1            
1763   1          /* Load the gain correction register */    
1764   1          ADC_Side_Rangefinder_DEC_GCOR_REG  = (uint8)GcorValue;
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 30  

1765   1          ADC_Side_Rangefinder_DEC_GCORH_REG = (uint8)(GcorValue >> 8);    
1766   1          
1767   1          /* Workaround for 0 to 2*Vref mode with PSoC5A siliocn */
1768   1          #if( CY_PSOC5A) 
                      if( inputRange == ADC_Side_Rangefinder_IR_VSSA_TO_2VREF)
                      {
                          ADC_Side_Rangefinder_DEC_GCOR_REG = 0x00u;
                          ADC_Side_Rangefinder_DEC_GCORH_REG = 0x00u;
                          ADC_Side_Rangefinder_DEC_GVAL_REG = 0x00u;
                      }
                  #endif /* CY_PSOC5A */
1776   1      }
1777          
1778          
1779          /******************************************************************************
1780          * Function Name: ADC_Side_Rangefinder_SetDSMRef0Reg(uint8)
1781          ******************************************************************************
1782          *
1783          * Summary:
1784          *  This API sets the DSM_REF0 register. This is written for internal use.
1785          *
1786          * Parameters:  
1787          *  value:  Value to be written to DSM_REF0 register.
1788          *
1789          * Return: 
1790          *  void
1791          *
1792          ******************************************************************************/
1793          void ADC_Side_Rangefinder_SetDSMRef0Reg(uint8 value) 
1794          {
1795   1          /* Disable PRES, Enable power to VCMBUF0, REFBUF0 and REFBUF1, enable 
1796   1             PRES */
1797   1          #if (CY_PSOC3 || CY_PSOC5LP)
1798   1              ADC_Side_Rangefinder_RESET_CR4_REG |= (ADC_Side_Rangefinder_IGNORE_PRESA1 | ADC_Side_Rangefinder_I
             -GNORE_PRESD1);
1799   1              ADC_Side_Rangefinder_RESET_CR5_REG |= (ADC_Side_Rangefinder_IGNORE_PRESA2 | ADC_Side_Rangefinder_I
             -GNORE_PRESD2);
1800   1          #elif (CY_PSOC5A)
                      ADC_Side_Rangefinder_RESET_CR1_REG |= ADC_Side_Rangefinder_DIS_PRES1;
                      ADC_Side_Rangefinder_RESET_CR3_REG |= ADC_Side_Rangefinder_DIS_PRES2;
                  #endif /* CY_PSOC5A */
1804   1              ADC_Side_Rangefinder_DSM_REF0_REG = value;   
1805   1                      
1806   1              /* Wait for 3 microseconds */
1807   1          CyDelayUs(3);
1808   1          /* Enable the press circuit */
1809   1          #if (CY_PSOC3 || CY_PSOC5LP)
1810   1              ADC_Side_Rangefinder_RESET_CR4_REG &= ~(ADC_Side_Rangefinder_IGNORE_PRESA1 | ADC_Side_Rangefinder_
             -IGNORE_PRESD1);
1811   1              ADC_Side_Rangefinder_RESET_CR5_REG &= ~(ADC_Side_Rangefinder_IGNORE_PRESA2 | ADC_Side_Rangefinder_
             -IGNORE_PRESD2);
1812   1          #elif (CY_PSOC5A)
                      ADC_Side_Rangefinder_RESET_CR1_REG &= ~ADC_Side_Rangefinder_DIS_PRES1;
                      ADC_Side_Rangefinder_RESET_CR3_REG &= ~ADC_Side_Rangefinder_DIS_PRES2;
                  #endif /* CY_PSOC5A */
1816   1      }
1817          
1818          
1819          /* [] END OF FILE */
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 31  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION ADC_Side_Rangefinder_Init (BEGIN)
                                           ; SOURCE LINE # 93
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 96
0000 7F01              MOV     R7,#01H
0002 120000      R     LCALL   _ADC_Side_Rangefinder_InitConfig
                                           ; SOURCE LINE # 100
0005 7F10              MOV     R7,#010H
0007 120000      E     LCALL   _ADC_Side_Rangefinder_theACLK_SetModeRegister
                                           ; SOURCE LINE # 104
000A 7F10              MOV     R7,#010H
000C 120000      E     LCALL   _ADC_Side_Rangefinder_Ext_CP_Clk_SetModeRegister
                                           ; SOURCE LINE # 107
000F 900000      R     MOV     DPTR,#?_ADC_Side_Rangefinder_GainCompensation?BYTE+05H
0012 7414              MOV     A,#014H
0014 F0                MOVX    @DPTR,A
0015 7B00              MOV     R3,#00H
0017 7A80              MOV     R2,#080H
0019 7DDB              MOV     R5,#0DBH
001B 7C90              MOV     R4,#090H
001D 7F01              MOV     R7,#01H
001F 120000      R     LCALL   _ADC_Side_Rangefinder_GainCompensation
                                           ; SOURCE LINE # 111
0022 22                RET     
             ; FUNCTION ADC_Side_Rangefinder_Init (END)

             ; FUNCTION ADC_Side_Rangefinder_Enable (BEGIN)
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 143
0000 9043AA            MOV     DPTR,#043AAH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4401              ORL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
000B 9043AA            MOV     DPTR,#043AAH
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 4410              ORL     A,#010H
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 147
0016 9043BA            MOV     DPTR,#043BAH
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 4401              ORL     A,#01H
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 149
0021 9043BA            MOV     DPTR,#043BAH
0024 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 32  

0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 4410              ORL     A,#010H
0029 FF                MOV     R7,A
002A EF                MOV     A,R7
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 155
002C 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_Config
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 6401              XRL     A,#01H
0034 7049              JNZ     ?C0002
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 160
0036 9046F8            MOV     DPTR,#046F8H
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C 4402              ORL     A,#02H
003E FF                MOV     R7,A
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 161
0041 9046F9            MOV     DPTR,#046F9H
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 EF                MOV     A,R7
0047 4402              ORL     A,#02H
0049 FF                MOV     R7,A
004A EF                MOV     A,R7
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 167
004C 905891            MOV     DPTR,#05891H
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
0051 EF                MOV     A,R7
0052 4403              ORL     A,#03H
0054 FF                MOV     R7,A
0055 EF                MOV     A,R7
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 176
0057 905892            MOV     DPTR,#05892H
005A E0                MOVX    A,@DPTR
005B FF                MOV     R7,A
005C EF                MOV     A,R7
005D 4408              ORL     A,#08H
005F FF                MOV     R7,A
0060 EF                MOV     A,R7
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 180
0062 7F03              MOV     R7,#03H
0064 7E00              MOV     R6,#00H
0066 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 183
0069 9046F8            MOV     DPTR,#046F8H
006C E0                MOVX    A,@DPTR
006D FF                MOV     R7,A
006E EF                MOV     A,R7
006F 54FD              ANL     A,#0FDH
0071 FF                MOV     R7,A
0072 EF                MOV     A,R7
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 33  

0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 184
0074 9046F9            MOV     DPTR,#046F9H
0077 E0                MOVX    A,@DPTR
0078 FF                MOV     R7,A
0079 EF                MOV     A,R7
007A 54FD              ANL     A,#0FDH
007C FF                MOV     R7,A
007D EF                MOV     A,R7
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 189
007F         ?C0002:
                                           ; SOURCE LINE # 192
007F 905877            MOV     DPTR,#05877H
0082 E0                MOVX    A,@DPTR
0083 FF                MOV     R7,A
0084 EF                MOV     A,R7
0085 4406              ORL     A,#06H
0087 FF                MOV     R7,A
0088 EF                MOV     A,R7
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 196
008A 9043A1            MOV     DPTR,#043A1H
008D E0                MOVX    A,@DPTR
008E FF                MOV     R7,A
008F EF                MOV     A,R7
0090 4401              ORL     A,#01H
0092 FF                MOV     R7,A
0093 EF                MOV     A,R7
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 197
0095 9043B1            MOV     DPTR,#043B1H
0098 E0                MOVX    A,@DPTR
0099 FF                MOV     R7,A
009A EF                MOV     A,R7
009B 4401              ORL     A,#01H
009D FF                MOV     R7,A
009E EF                MOV     A,R7
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 201
00A0 9043A2            MOV     DPTR,#043A2H
00A3 E0                MOVX    A,@DPTR
00A4 FF                MOV     R7,A
00A5 EF                MOV     A,R7
00A6 4401              ORL     A,#01H
00A8 FF                MOV     R7,A
00A9 EF                MOV     A,R7
00AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
00AB 9043B2            MOV     DPTR,#043B2H
00AE E0                MOVX    A,@DPTR
00AF FF                MOV     R7,A
00B0 EF                MOV     A,R7
00B1 4401              ORL     A,#01H
00B3 FF                MOV     R7,A
00B4 EF                MOV     A,R7
00B5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
00B6 22                RET     
             ; FUNCTION ADC_Side_Rangefinder_Enable (END)

             ; FUNCTION ADC_Side_Rangefinder_Start (BEGIN)
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 34  

                                           ; SOURCE LINE # 336
                                           ; SOURCE LINE # 337
                                           ; SOURCE LINE # 338
0000 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7011              JNZ     ?C0004
                                           ; SOURCE LINE # 339
                                           ; SOURCE LINE # 340
0008 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_started
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 7003              JNZ     ?C0005
                                           ; SOURCE LINE # 341
                                           ; SOURCE LINE # 342
0010 120000      R     LCALL   ADC_Side_Rangefinder_Init
                                           ; SOURCE LINE # 343
0013         ?C0005:
                                           ; SOURCE LINE # 344
0013 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_initVar
0016 7401              MOV     A,#01H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 345
0019         ?C0004:
                                           ; SOURCE LINE # 348
0019 120000      R     LCALL   ADC_Side_Rangefinder_Enable
                                           ; SOURCE LINE # 349
001C 22                RET     
             ; FUNCTION ADC_Side_Rangefinder_Start (END)

             ; FUNCTION ADC_Side_Rangefinder_Stop (BEGIN)
                                           ; SOURCE LINE # 366
                                           ; SOURCE LINE # 367
                                           ; SOURCE LINE # 369
0000 904E00            MOV     DPTR,#04E00H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 370
000B 904E01            MOV     DPTR,#04E01H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 4404              ORL     A,#04H
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 375
0016 9046F8            MOV     DPTR,#046F8H
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 4402              ORL     A,#02H
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 35  

                                           ; SOURCE LINE # 376
0021 9046F9            MOV     DPTR,#046F9H
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 4402              ORL     A,#02H
0029 FF                MOV     R7,A
002A EF                MOV     A,R7
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 382
002C 905891            MOV     DPTR,#05891H
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 54FC              ANL     A,#0FCH
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 383
0037 905892            MOV     DPTR,#05892H
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C EF                MOV     A,R7
003D 54F7              ANL     A,#0F7H
003F FF                MOV     R7,A
0040 EF                MOV     A,R7
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 386
0042 7F03              MOV     R7,#03H
0044 7E00              MOV     R6,#00H
0046 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 390
0049 9046F8            MOV     DPTR,#046F8H
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E EF                MOV     A,R7
004F 54FD              ANL     A,#0FDH
0051 FF                MOV     R7,A
0052 EF                MOV     A,R7
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 391
0054 9046F9            MOV     DPTR,#046F9H
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 EF                MOV     A,R7
005A 54FD              ANL     A,#0FDH
005C FF                MOV     R7,A
005D EF                MOV     A,R7
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 409
005F 9043AA            MOV     DPTR,#043AAH
0062 E0                MOVX    A,@DPTR
0063 FF                MOV     R7,A
0064 EF                MOV     A,R7
0065 54EF              ANL     A,#0EFH
0067 FF                MOV     R7,A
0068 EF                MOV     A,R7
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 413
006A 9043AA            MOV     DPTR,#043AAH
006D E0                MOVX    A,@DPTR
006E FF                MOV     R7,A
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 36  

006F EF                MOV     A,R7
0070 54FE              ANL     A,#0FEH
0072 FF                MOV     R7,A
0073 EF                MOV     A,R7
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 416
0075 9043BA            MOV     DPTR,#043BAH
0078 E0                MOVX    A,@DPTR
0079 FF                MOV     R7,A
007A EF                MOV     A,R7
007B 54FE              ANL     A,#0FEH
007D FF                MOV     R7,A
007E EF                MOV     A,R7
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 418
0080 9043BA            MOV     DPTR,#043BAH
0083 E0                MOVX    A,@DPTR
0084 FF                MOV     R7,A
0085 EF                MOV     A,R7
0086 54EF              ANL     A,#0EFH
0088 FF                MOV     R7,A
0089 EF                MOV     A,R7
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 422
008B 905877            MOV     DPTR,#05877H
008E E0                MOVX    A,@DPTR
008F FF                MOV     R7,A
0090 EF                MOV     A,R7
0091 54F9              ANL     A,#0F9H
0093 FF                MOV     R7,A
0094 EF                MOV     A,R7
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 426
0096 9043A1            MOV     DPTR,#043A1H
0099 E0                MOVX    A,@DPTR
009A FF                MOV     R7,A
009B EF                MOV     A,R7
009C 54FE              ANL     A,#0FEH
009E FF                MOV     R7,A
009F EF                MOV     A,R7
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 427
00A1 9043B1            MOV     DPTR,#043B1H
00A4 E0                MOVX    A,@DPTR
00A5 FF                MOV     R7,A
00A6 EF                MOV     A,R7
00A7 54FE              ANL     A,#0FEH
00A9 FF                MOV     R7,A
00AA EF                MOV     A,R7
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 431
00AC 9043A2            MOV     DPTR,#043A2H
00AF E0                MOVX    A,@DPTR
00B0 FF                MOV     R7,A
00B1 EF                MOV     A,R7
00B2 54FE              ANL     A,#0FEH
00B4 FF                MOV     R7,A
00B5 EF                MOV     A,R7
00B6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 432
00B7 9043B2            MOV     DPTR,#043B2H
00BA E0                MOVX    A,@DPTR
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 37  

00BB FF                MOV     R7,A
00BC EF                MOV     A,R7
00BD 54FE              ANL     A,#0FEH
00BF FF                MOV     R7,A
00C0 EF                MOV     A,R7
00C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 433
00C2 22                RET     
             ; FUNCTION ADC_Side_Rangefinder_Stop (END)

             ; FUNCTION _ADC_Side_Rangefinder_SetBufferGain (BEGIN)
                                           ; SOURCE LINE # 450
0000 900000      R     MOV     DPTR,#gain
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 451
                                           ; SOURCE LINE # 453
0005 90589B            MOV     DPTR,#0589BH
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 54F3              ANL     A,#0F3H
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#tmpReg
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 454
0013 900000      R     MOV     DPTR,#tmpReg
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 900000      R     MOV     DPTR,#gain
001B E0                MOVX    A,@DPTR
001C FE                MOV     R6,A
001D EE                MOV     A,R6
001E 25E0              ADD     A,ACC
0020 25E0              ADD     A,ACC
0022 FE                MOV     R6,A
0023 EF                MOV     A,R7
0024 4E                ORL     A,R6
0025 FF                MOV     R7,A
0026 900000      R     MOV     DPTR,#tmpReg
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 455
002B 900000      R     MOV     DPTR,#tmpReg
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 90589B            MOV     DPTR,#0589BH
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 456
0035 22                RET     
             ; FUNCTION _ADC_Side_Rangefinder_SetBufferGain (END)

             ; FUNCTION _ADC_Side_Rangefinder_SetCoherency (BEGIN)
                                           ; SOURCE LINE # 481
0000 900000      R     MOV     DPTR,#coherency
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 482
                                           ; SOURCE LINE # 484
0005 904E14            MOV     DPTR,#04E14H
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 38  

0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 54FC              ANL     A,#0FCH
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#tmpReg
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 485
0013 900000      R     MOV     DPTR,#tmpReg
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 900000      R     MOV     DPTR,#coherency
001B E0                MOVX    A,@DPTR
001C FE                MOV     R6,A
001D EF                MOV     A,R7
001E 4E                ORL     A,R6
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#tmpReg
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 486
0025 900000      R     MOV     DPTR,#tmpReg
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A 904E14            MOV     DPTR,#04E14H
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 487
002F 22                RET     
             ; FUNCTION _ADC_Side_Rangefinder_SetCoherency (END)

             ; FUNCTION _ADC_Side_Rangefinder_SetGCOR (BEGIN)
                                           ; SOURCE LINE # 511
0000 900000      R     MOV     DPTR,#gainAdjust
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 512
                                           ; SOURCE LINE # 517
0006 904E0D            MOV     DPTR,#04E0DH
0009 E0                MOVX    A,@DPTR
000A FF                MOV     R7,A
000B 7E00              MOV     R6,#00H
000D 900000      R     MOV     DPTR,#tmpReg
0010 EE                MOV     A,R6
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 518
0015 900000      R     MOV     DPTR,#tmpReg
0018 E0                MOVX    A,@DPTR
0019 FE                MOV     R6,A
001A A3                INC     DPTR
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 7F00              MOV     R7,#00H
0020 FE                MOV     R6,A
0021 904E0C            MOV     DPTR,#04E0CH
0024 E0                MOVX    A,@DPTR
0025 FD                MOV     R5,A
0026 7C00              MOV     R4,#00H
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 39  

0028 EE                MOV     A,R6
0029 4C                ORL     A,R4
002A FE                MOV     R6,A
002B EF                MOV     A,R7
002C 4D                ORL     A,R5
002D FF                MOV     R7,A
002E 900000      R     MOV     DPTR,#tmpReg
0031 EE                MOV     A,R6
0032 F0                MOVX    @DPTR,A
0033 A3                INC     DPTR
0034 EF                MOV     A,R7
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 519
0036 900000      R     MOV     DPTR,#tmpReg
0039 E0                MOVX    A,@DPTR
003A FC                MOV     R4,A
003B A3                INC     DPTR
003C E0                MOVX    A,@DPTR
003D FD                MOV     R5,A
003E E4                CLR     A
003F 120000      E     LCALL   ?C?FCASTI
0042 7B00              MOV     R3,#00H
0044 7A00              MOV     R2,#00H
0046 7900              MOV     R1,#00H
0048 7847              MOV     R0,#047H
004A 120000      E     LCALL   ?C?FPDIV
004D 900000      R     MOV     DPTR,#tmpValue
0050 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 520
0053 900000      R     MOV     DPTR,#tmpValue
0056 120000      E     LCALL   ?C?LLDXDATA
0059 900000      R     MOV     DPTR,#gainAdjust
005C 120000      E     LCALL   ?C?LLDXDATA0
005F 120000      E     LCALL   ?C?FPMUL
0062 900000      R     MOV     DPTR,#tmpValue
0065 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 522
0068 7FB9              MOV     R7,#0B9H
006A 7EFC              MOV     R6,#0FCH
006C 7DFF              MOV     R5,#0FFH
006E 7C3F              MOV     R4,#03FH
0070 900000      R     MOV     DPTR,#tmpValue
0073 120000      E     LCALL   ?C?LLDXDATA0
0076 120000      E     LCALL   ?C?FPCMP3
0079 600A              JZ      ?C0010
007B 4008              JC      ?C0010
                                           ; SOURCE LINE # 523
                                           ; SOURCE LINE # 524
007D 900000      R     MOV     DPTR,#status
0080 7401              MOV     A,#01H
0082 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 525
0083 803F              SJMP    ?C0011
0085         ?C0010:
                                           ; SOURCE LINE # 527
                                           ; SOURCE LINE # 528
0085 7F00              MOV     R7,#00H
0087 7E00              MOV     R6,#00H
0089 7D00              MOV     R5,#00H
008B 7C47              MOV     R4,#047H
008D 900000      R     MOV     DPTR,#tmpValue
0090 120000      E     LCALL   ?C?LLDXDATA0
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 40  

0093 120000      E     LCALL   ?C?FPMUL
0096 120000      E     LCALL   ?C?CASTF
0099 900000      R     MOV     DPTR,#tmpReg
009C EE                MOV     A,R6
009D F0                MOVX    @DPTR,A
009E A3                INC     DPTR
009F EF                MOV     A,R7
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 529
00A1 900000      R     MOV     DPTR,#tmpReg
00A4 E0                MOVX    A,@DPTR
00A5 FE                MOV     R6,A
00A6 A3                INC     DPTR
00A7 E0                MOVX    A,@DPTR
00A8 FF                MOV     R7,A
00A9 904E0C            MOV     DPTR,#04E0CH
00AC EF                MOV     A,R7
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 530
00AE 900000      R     MOV     DPTR,#tmpReg
00B1 E0                MOVX    A,@DPTR
00B2 FE                MOV     R6,A
00B3 A3                INC     DPTR
00B4 E0                MOVX    A,@DPTR
00B5 FF                MOV     R7,A
00B6 EE                MOV     A,R6
00B7 FF                MOV     R7,A
00B8 7E00              MOV     R6,#00H
00BA 904E0D            MOV     DPTR,#04E0DH
00BD EF                MOV     A,R7
00BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 531
00BF 900000      R     MOV     DPTR,#status
00C2 E4                CLR     A
00C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 532
00C4         ?C0011:
                                           ; SOURCE LINE # 534
00C4 900000      R     MOV     DPTR,#status
00C7 E0                MOVX    A,@DPTR
00C8 FF                MOV     R7,A
                                           ; SOURCE LINE # 535
00C9         ?C0012:
00C9 22                RET     
             ; FUNCTION _ADC_Side_Rangefinder_SetGCOR (END)

             ; FUNCTION ADC_Side_Rangefinder_ReadGCOR (BEGIN)
                                           ; SOURCE LINE # 556
                                           ; SOURCE LINE # 557
                                           ; SOURCE LINE # 561
0000 904E0E            MOV     DPTR,#04E0EH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      R     MOV     DPTR,#gValue
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 562
000A 7B02              MOV     R3,#02H
000C 7A4E              MOV     R2,#04EH
000E 790C              MOV     R1,#0CH
0010 120000      E     LCALL   _cyread16_nodpx
0013 900000      R     MOV     DPTR,#gcorRegValue
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 41  

0016 EE                MOV     A,R6
0017 F0                MOVX    @DPTR,A
0018 A3                INC     DPTR
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 564
001B 900000      R     MOV     DPTR,#gValue
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 120000      E     LCALL   ?C?CCASE
0024 0000        R     DW      ?C0014
0026 09                DB      09H
0027 0000        R     DW      ?C0015
0029 0A                DB      0AH
002A 0000        R     DW      ?C0016
002C 0B                DB      0BH
002D 0000        R     DW      ?C0017
002F 0C                DB      0CH
0030 0000        R     DW      ?C0018
0032 0D                DB      0DH
0033 0000        R     DW      ?C0019
0035 0E                DB      0EH
0036 0000              DW      00H
0038 0000        R     DW      ?C0020
                                           ; SOURCE LINE # 565
                                           ; SOURCE LINE # 566
003A         ?C0014:
                                           ; SOURCE LINE # 567
003A 900000      R     MOV     DPTR,#gValue
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F C3                CLR     C
0040 740F              MOV     A,#0FH
0042 9F                SUBB    A,R7
0043 FF                MOV     R7,A
0044 900000      R     MOV     DPTR,#gcorRegValue
0047 E0                MOVX    A,@DPTR
0048 FC                MOV     R4,A
0049 A3                INC     DPTR
004A E0                MOVX    A,@DPTR
004B FD                MOV     R5,A
004C ED                MOV     A,R5
004D AE04              MOV     R6,AR4
004F A807              MOV     R0,AR7
0051 08                INC     R0
0052 8005              SJMP    ?C0099
0054         ?C0098:
0054 C3                CLR     C
0055 33                RLC     A
0056 CE                XCH     A,R6
0057 33                RLC     A
0058 CE                XCH     A,R6
0059         ?C0099:
0059 D8F9              DJNZ    R0,?C0098
005B FF                MOV     R7,A
005C 900000      R     MOV     DPTR,#gcorValue
005F EE                MOV     A,R6
0060 F0                MOVX    @DPTR,A
0061 A3                INC     DPTR
0062 EF                MOV     A,R7
0063 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 42  

                                           ; SOURCE LINE # 568
0064 020000      R     LJMP    ?C0013
                                           ; SOURCE LINE # 570
0067         ?C0015:
                                           ; SOURCE LINE # 571
0067 900000      R     MOV     DPTR,#gValue
006A E0                MOVX    A,@DPTR
006B FF                MOV     R7,A
006C C3                CLR     C
006D 740F              MOV     A,#0FH
006F 9F                SUBB    A,R7
0070 FF                MOV     R7,A
0071 900000      R     MOV     DPTR,#gcorRegValue
0074 E0                MOVX    A,@DPTR
0075 FC                MOV     R4,A
0076 A3                INC     DPTR
0077 E0                MOVX    A,@DPTR
0078 FD                MOV     R5,A
0079 ED                MOV     A,R5
007A AE04              MOV     R6,AR4
007C A807              MOV     R0,AR7
007E 08                INC     R0
007F 8005              SJMP    ?C0101
0081         ?C0100:
0081 C3                CLR     C
0082 33                RLC     A
0083 CE                XCH     A,R6
0084 33                RLC     A
0085 CE                XCH     A,R6
0086         ?C0101:
0086 D8F9              DJNZ    R0,?C0100
0088 FF                MOV     R7,A
0089 900000      R     MOV     DPTR,#gcorValue
008C EE                MOV     A,R6
008D F0                MOVX    @DPTR,A
008E A3                INC     DPTR
008F EF                MOV     A,R7
0090 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 572
0091 020000      R     LJMP    ?C0013
                                           ; SOURCE LINE # 574
0094         ?C0016:
                                           ; SOURCE LINE # 575
0094 900000      R     MOV     DPTR,#gValue
0097 E0                MOVX    A,@DPTR
0098 FF                MOV     R7,A
0099 C3                CLR     C
009A 740F              MOV     A,#0FH
009C 9F                SUBB    A,R7
009D FF                MOV     R7,A
009E 900000      R     MOV     DPTR,#gcorRegValue
00A1 E0                MOVX    A,@DPTR
00A2 FC                MOV     R4,A
00A3 A3                INC     DPTR
00A4 E0                MOVX    A,@DPTR
00A5 FD                MOV     R5,A
00A6 ED                MOV     A,R5
00A7 AE04              MOV     R6,AR4
00A9 A807              MOV     R0,AR7
00AB 08                INC     R0
00AC 8005              SJMP    ?C0103
00AE         ?C0102:
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 43  

00AE C3                CLR     C
00AF 33                RLC     A
00B0 CE                XCH     A,R6
00B1 33                RLC     A
00B2 CE                XCH     A,R6
00B3         ?C0103:
00B3 D8F9              DJNZ    R0,?C0102
00B5 FF                MOV     R7,A
00B6 900000      R     MOV     DPTR,#gcorValue
00B9 EE                MOV     A,R6
00BA F0                MOVX    @DPTR,A
00BB A3                INC     DPTR
00BC EF                MOV     A,R7
00BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 576
00BE 020000      R     LJMP    ?C0013
                                           ; SOURCE LINE # 578
00C1         ?C0017:
                                           ; SOURCE LINE # 579
00C1 900000      R     MOV     DPTR,#gValue
00C4 E0                MOVX    A,@DPTR
00C5 FF                MOV     R7,A
00C6 C3                CLR     C
00C7 740F              MOV     A,#0FH
00C9 9F                SUBB    A,R7
00CA FF                MOV     R7,A
00CB 900000      R     MOV     DPTR,#gcorRegValue
00CE E0                MOVX    A,@DPTR
00CF FC                MOV     R4,A
00D0 A3                INC     DPTR
00D1 E0                MOVX    A,@DPTR
00D2 FD                MOV     R5,A
00D3 ED                MOV     A,R5
00D4 AE04              MOV     R6,AR4
00D6 A807              MOV     R0,AR7
00D8 08                INC     R0
00D9 8005              SJMP    ?C0105
00DB         ?C0104:
00DB C3                CLR     C
00DC 33                RLC     A
00DD CE                XCH     A,R6
00DE 33                RLC     A
00DF CE                XCH     A,R6
00E0         ?C0105:
00E0 D8F9              DJNZ    R0,?C0104
00E2 FF                MOV     R7,A
00E3 900000      R     MOV     DPTR,#gcorValue
00E6 EE                MOV     A,R6
00E7 F0                MOVX    @DPTR,A
00E8 A3                INC     DPTR
00E9 EF                MOV     A,R7
00EA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 580
00EB 8068              SJMP    ?C0013
                                           ; SOURCE LINE # 582
00ED         ?C0018:
                                           ; SOURCE LINE # 583
00ED 900000      R     MOV     DPTR,#gValue
00F0 E0                MOVX    A,@DPTR
00F1 FF                MOV     R7,A
00F2 C3                CLR     C
00F3 740F              MOV     A,#0FH
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 44  

00F5 9F                SUBB    A,R7
00F6 FF                MOV     R7,A
00F7 900000      R     MOV     DPTR,#gcorRegValue
00FA E0                MOVX    A,@DPTR
00FB FC                MOV     R4,A
00FC A3                INC     DPTR
00FD E0                MOVX    A,@DPTR
00FE FD                MOV     R5,A
00FF ED                MOV     A,R5
0100 AE04              MOV     R6,AR4
0102 A807              MOV     R0,AR7
0104 08                INC     R0
0105 8005              SJMP    ?C0107
0107         ?C0106:
0107 C3                CLR     C
0108 33                RLC     A
0109 CE                XCH     A,R6
010A 33                RLC     A
010B CE                XCH     A,R6
010C         ?C0107:
010C D8F9              DJNZ    R0,?C0106
010E FF                MOV     R7,A
010F 900000      R     MOV     DPTR,#gcorValue
0112 EE                MOV     A,R6
0113 F0                MOVX    @DPTR,A
0114 A3                INC     DPTR
0115 EF                MOV     A,R7
0116 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 584
0117 803C              SJMP    ?C0013
                                           ; SOURCE LINE # 586
0119         ?C0019:
                                           ; SOURCE LINE # 587
0119 900000      R     MOV     DPTR,#gValue
011C E0                MOVX    A,@DPTR
011D FF                MOV     R7,A
011E C3                CLR     C
011F 740F              MOV     A,#0FH
0121 9F                SUBB    A,R7
0122 FF                MOV     R7,A
0123 900000      R     MOV     DPTR,#gcorRegValue
0126 E0                MOVX    A,@DPTR
0127 FC                MOV     R4,A
0128 A3                INC     DPTR
0129 E0                MOVX    A,@DPTR
012A FD                MOV     R5,A
012B ED                MOV     A,R5
012C AE04              MOV     R6,AR4
012E A807              MOV     R0,AR7
0130 08                INC     R0
0131 8005              SJMP    ?C0109
0133         ?C0108:
0133 C3                CLR     C
0134 33                RLC     A
0135 CE                XCH     A,R6
0136 33                RLC     A
0137 CE                XCH     A,R6
0138         ?C0109:
0138 D8F9              DJNZ    R0,?C0108
013A FF                MOV     R7,A
013B 900000      R     MOV     DPTR,#gcorValue
013E EE                MOV     A,R6
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 45  

013F F0                MOVX    @DPTR,A
0140 A3                INC     DPTR
0141 EF                MOV     A,R7
0142 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 588
0143 8010              SJMP    ?C0013
                                           ; SOURCE LINE # 590
0145         ?C0020:
                                           ; SOURCE LINE # 591
0145 900000      R     MOV     DPTR,#gcorRegValue
0148 E0                MOVX    A,@DPTR
0149 FE                MOV     R6,A
014A A3                INC     DPTR
014B E0                MOVX    A,@DPTR
014C FF                MOV     R7,A
014D 900000      R     MOV     DPTR,#gcorValue
0150 EE                MOV     A,R6
0151 F0                MOVX    @DPTR,A
0152 A3                INC     DPTR
0153 EF                MOV     A,R7
0154 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 592
                                           ; SOURCE LINE # 593
0155         ?C0013:
                                           ; SOURCE LINE # 595
0155 900000      R     MOV     DPTR,#gcorValue
0158 E0                MOVX    A,@DPTR
0159 FE                MOV     R6,A
015A A3                INC     DPTR
015B E0                MOVX    A,@DPTR
015C FF                MOV     R7,A
                                           ; SOURCE LINE # 596
015D         ?C0021:
015D 22                RET     
             ; FUNCTION ADC_Side_Rangefinder_ReadGCOR (END)

             ; FUNCTION _ADC_Side_Rangefinder_SetBufferChop (BEGIN)
                                           ; SOURCE LINE # 614
0000 900000      R     MOV     DPTR,#chopen
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#chopFreq
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 615
                                           ; SOURCE LINE # 616
000A 900000      R     MOV     DPTR,#chopen
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 6013              JZ      ?C0022
                                           ; SOURCE LINE # 617
                                           ; SOURCE LINE # 618
0012 900000      R     MOV     DPTR,#chopFreq
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 EF                MOV     A,R7
0018 5407              ANL     A,#07H
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 4408              ORL     A,#08H
001E FF                MOV     R7,A
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 46  

001F 90589C            MOV     DPTR,#0589CH
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 620
0024 22                RET     
0025         ?C0022:
                                           ; SOURCE LINE # 622
                                           ; SOURCE LINE # 623
0025 90589C            MOV     DPTR,#0589CH
0028 E4                CLR     A
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 624
                                           ; SOURCE LINE # 625
002A         ?C0024:
002A 22                RET     
             ; FUNCTION _ADC_Side_Rangefinder_SetBufferChop (END)

             ; FUNCTION ADC_Side_Rangefinder_StartConvert (BEGIN)
                                           ; SOURCE LINE # 642
                                           ; SOURCE LINE # 643
                                           ; SOURCE LINE # 645
0000 904E00            MOV     DPTR,#04E00H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4401              ORL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 646
000B 22                RET     
             ; FUNCTION ADC_Side_Rangefinder_StartConvert (END)

             ; FUNCTION ADC_Side_Rangefinder_StopConvert (BEGIN)
                                           ; SOURCE LINE # 667
                                           ; SOURCE LINE # 668
                                           ; SOURCE LINE # 670
0000 904E00            MOV     DPTR,#04E00H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 674
000B 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_convDone
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 675
0011 22                RET     
             ; FUNCTION ADC_Side_Rangefinder_StopConvert (END)

             ; FUNCTION _ADC_Side_Rangefinder_IsEndConversion (BEGIN)
                                           ; SOURCE LINE # 698
0000 900000      R     MOV     DPTR,#wMode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 699
                                           ; SOURCE LINE # 704
0005 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_stopConversion
0008 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 47  

0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B B4011E            CJNE    A,#01H,?C0035
                                           ; SOURCE LINE # 705
000E         ?C0030:
                                           ; SOURCE LINE # 707
                                           ; SOURCE LINE # 708
000E 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_convDone
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 900000      R     MOV     DPTR,#status
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 709
0018 900000      R     MOV     DPTR,#status
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 6401              XRL     A,#01H
0020 602A              JZ      ?C0032
0022 900000      R     MOV     DPTR,#wMode
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 EF                MOV     A,R7
0028 60E4              JZ      ?C0030
                                           ; SOURCE LINE # 710
002A 8020              SJMP    ?C0032
                                           ; SOURCE LINE # 712
002C         ?C0035:
                                           ; SOURCE LINE # 714
                                           ; SOURCE LINE # 715
002C 904E01            MOV     DPTR,#04E01H
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 5401              ANL     A,#01H
0034 FF                MOV     R7,A
0035 900000      R     MOV     DPTR,#status
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 716
003A 900000      R     MOV     DPTR,#status
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F EF                MOV     A,R7
0040 6401              XRL     A,#01H
0042 6008              JZ      ?C0032
0044 900000      R     MOV     DPTR,#wMode
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 EF                MOV     A,R7
004A 60E0              JZ      ?C0035
                                           ; SOURCE LINE # 717
004C         ?C0032:
                                           ; SOURCE LINE # 718
004C 900000      R     MOV     DPTR,#status
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
                                           ; SOURCE LINE # 719
0051         ?C0037:
0051 22                RET     
             ; FUNCTION _ADC_Side_Rangefinder_IsEndConversion (END)
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 48  


             ; FUNCTION ADC_Side_Rangefinder_GetResult8 (BEGIN)
                                           ; SOURCE LINE # 736
                                           ; SOURCE LINE # 737
                                           ; SOURCE LINE # 738
0000 904E10            MOV     DPTR,#04E10H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 739
0005         ?C0038:
0005 22                RET     
             ; FUNCTION ADC_Side_Rangefinder_GetResult8 (END)

             ; FUNCTION ADC_Side_Rangefinder_GetResult16 (BEGIN)
                                           ; SOURCE LINE # 756
                                           ; SOURCE LINE # 757
                                           ; SOURCE LINE # 761
0000 904E11            MOV     DPTR,#04E11H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 7E00              MOV     R6,#00H
0007 900000      R     MOV     DPTR,#result
000A EE                MOV     A,R6
000B F0                MOVX    @DPTR,A
000C A3                INC     DPTR
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 762
000F 900000      R     MOV     DPTR,#result
0012 E0                MOVX    A,@DPTR
0013 FE                MOV     R6,A
0014 A3                INC     DPTR
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 EF                MOV     A,R7
0018 7F00              MOV     R7,#00H
001A FE                MOV     R6,A
001B 904E10            MOV     DPTR,#04E10H
001E E0                MOVX    A,@DPTR
001F FD                MOV     R5,A
0020 7C00              MOV     R4,#00H
0022 EE                MOV     A,R6
0023 4C                ORL     A,R4
0024 FE                MOV     R6,A
0025 EF                MOV     A,R7
0026 4D                ORL     A,R5
0027 FF                MOV     R7,A
0028 900000      R     MOV     DPTR,#result
002B EE                MOV     A,R6
002C F0                MOVX    @DPTR,A
002D A3                INC     DPTR
002E EF                MOV     A,R7
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 767
0030 900000      R     MOV     DPTR,#result
0033 E0                MOVX    A,@DPTR
0034 FE                MOV     R6,A
0035 A3                INC     DPTR
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
                                           ; SOURCE LINE # 768
0038         ?C0039:
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 49  

0038 22                RET     
             ; FUNCTION ADC_Side_Rangefinder_GetResult16 (END)

             ; FUNCTION ADC_Side_Rangefinder_GetResult32 (BEGIN)
                                           ; SOURCE LINE # 785
                                           ; SOURCE LINE # 786
                                           ; SOURCE LINE # 791
0000 904E12            MOV     DPTR,#04E12H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FF              ANL     A,#0FFH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A 33                RLC     A
000B 95E0              SUBB    A,ACC
000D FE                MOV     R6,A
000E FD                MOV     R5,A
000F FC                MOV     R4,A
0010 900000      R     MOV     DPTR,#result
0013 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 792
0016 900000      R     MOV     DPTR,#result
0019 120000      E     LCALL   ?C?LLDXDATA
001C 7808              MOV     R0,#08H
001E 120000      E     LCALL   ?C?LSHL
0021 A804              MOV     R0,AR4
0023 A905              MOV     R1,AR5
0025 AA06              MOV     R2,AR6
0027 AB07              MOV     R3,AR7
0029 904E11            MOV     DPTR,#04E11H
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E E4                CLR     A
002F FC                MOV     R4,A
0030 FD                MOV     R5,A
0031 FE                MOV     R6,A
0032 120000      E     LCALL   ?C?LOR
0035 900000      R     MOV     DPTR,#result
0038 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 793
003B 900000      R     MOV     DPTR,#result
003E 120000      E     LCALL   ?C?LLDXDATA
0041 7808              MOV     R0,#08H
0043 120000      E     LCALL   ?C?LSHL
0046 A804              MOV     R0,AR4
0048 A905              MOV     R1,AR5
004A AA06              MOV     R2,AR6
004C AB07              MOV     R3,AR7
004E 904E10            MOV     DPTR,#04E10H
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 E4                CLR     A
0054 FC                MOV     R4,A
0055 FD                MOV     R5,A
0056 FE                MOV     R6,A
0057 120000      E     LCALL   ?C?LOR
005A 900000      R     MOV     DPTR,#result
005D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 799
0060 900000      R     MOV     DPTR,#result
0063 120000      E     LCALL   ?C?LLDXDATA
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 50  

                                           ; SOURCE LINE # 800
0066         ?C0040:
0066 22                RET     
             ; FUNCTION ADC_Side_Rangefinder_GetResult32 (END)

             ; FUNCTION _ADC_Side_Rangefinder_SetOffset (BEGIN)
                                           ; SOURCE LINE # 824
0000 900000      R     MOV     DPTR,#offset
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 825
                                           ; SOURCE LINE # 827
0006 900000      R     MOV     DPTR,#offset
0009 120000      E     LCALL   ?C?LLDXDATA
000C 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_Offset
000F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 828
0012 22                RET     
             ; FUNCTION _ADC_Side_Rangefinder_SetOffset (END)

             ; FUNCTION _ADC_Side_Rangefinder_SetGain (BEGIN)
                                           ; SOURCE LINE # 849
0000 900000      R     MOV     DPTR,#adcGain
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 850
                                           ; SOURCE LINE # 852
0006 900000      R     MOV     DPTR,#adcGain
0009 120000      E     LCALL   ?C?LLDXDATA
000C 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_CountsPerVolt
000F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 853
0012 22                RET     
             ; FUNCTION _ADC_Side_Rangefinder_SetGain (END)

             ; FUNCTION _ADC_Side_Rangefinder_CountsTo_mVolts (BEGIN)
                                           ; SOURCE LINE # 875
0000 900000      R     MOV     DPTR,#adcCounts
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 876
                                           ; SOURCE LINE # 878
0006 7F00              MOV     R7,#00H
0008 7E00              MOV     R6,#00H
000A 7D00              MOV     R5,#00H
000C 7C00              MOV     R4,#00H
000E 900000      R     MOV     DPTR,#mVolts
0011 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 880
0014 900000      R     MOV     DPTR,#resolution
0017 7410              MOV     A,#010H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 883
001A 900000      R     MOV     DPTR,#adcCounts
001D 120000      E     LCALL   ?C?LLDXDATA
0020 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_Offset
0023 120000      E     LCALL   ?C?LLDXDATA0
0026 120000      E     LCALL   ?C?LSUB
0029 900000      R     MOV     DPTR,#adcCounts
002C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 886
002F 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_Config
0032 E0                MOVX    A,@DPTR
0033 FF                MOV     R7,A
0034 EF                MOV     A,R7
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 51  

0035 B40108            CJNE    A,#01H,?C0043
                                           ; SOURCE LINE # 887
                                           ; SOURCE LINE # 888
0038 900000      R     MOV     DPTR,#resolution
003B 7414              MOV     A,#014H
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 889
003E 8028              SJMP    ?C0044
0040         ?C0043:
                                           ; SOURCE LINE # 890
0040 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_Config
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 EF                MOV     A,R7
0046 B40208            CJNE    A,#02H,?C0045
                                           ; SOURCE LINE # 891
                                           ; SOURCE LINE # 892
0049 900000      R     MOV     DPTR,#resolution
004C 7410              MOV     A,#010H
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 893
004F 8017              SJMP    ?C0044
0051         ?C0045:
                                           ; SOURCE LINE # 894
0051 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_Config
0054 E0                MOVX    A,@DPTR
0055 FF                MOV     R7,A
0056 EF                MOV     A,R7
0057 B40308            CJNE    A,#03H,?C0047
                                           ; SOURCE LINE # 895
                                           ; SOURCE LINE # 896
005A 900000      R     MOV     DPTR,#resolution
005D 7410              MOV     A,#010H
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 897
0060 8006              SJMP    ?C0044
0062         ?C0047:
                                           ; SOURCE LINE # 899
                                           ; SOURCE LINE # 900
0062 900000      R     MOV     DPTR,#resolution
0065 7410              MOV     A,#010H
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 901
0068         ?C0044:
                                           ; SOURCE LINE # 903
0068 900000      R     MOV     DPTR,#resolution
006B E0                MOVX    A,@DPTR
006C FF                MOV     R7,A
006D EF                MOV     A,R7
006E C3                CLR     C
006F 9411              SUBB    A,#011H
0071 501E              JNC     ?C0049
                                           ; SOURCE LINE # 904
                                           ; SOURCE LINE # 905
0073 7FE8              MOV     R7,#0E8H
0075 7E03              MOV     R6,#03H
0077 7D00              MOV     R5,#00H
0079 7C00              MOV     R4,#00H
007B 900000      R     MOV     DPTR,#A
007E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 906
0081 7F01              MOV     R7,#01H
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 52  

0083 7E00              MOV     R6,#00H
0085 7D00              MOV     R5,#00H
0087 7C00              MOV     R4,#00H
0089 900000      R     MOV     DPTR,#B
008C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 907
008F 801C              SJMP    ?C0050
0091         ?C0049:
                                           ; SOURCE LINE # 909
                                           ; SOURCE LINE # 910
0091 7F64              MOV     R7,#064H
0093 7E00              MOV     R6,#00H
0095 7D00              MOV     R5,#00H
0097 7C00              MOV     R4,#00H
0099 900000      R     MOV     DPTR,#A
009C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 911
009F 7F0A              MOV     R7,#0AH
00A1 7E00              MOV     R6,#00H
00A3 7D00              MOV     R5,#00H
00A5 7C00              MOV     R4,#00H
00A7 900000      R     MOV     DPTR,#B
00AA 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 912
00AD         ?C0050:
                                           ; SOURCE LINE # 914
00AD 900000      R     MOV     DPTR,#B
00B0 120000      E     LCALL   ?C?LLDXDATA0
00B3 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_CountsPerVolt
00B6 120000      E     LCALL   ?C?LLDXDATA
00B9 120000      E     LCALL   ?C?SLDIV
00BC C004              PUSH    AR4
00BE C005              PUSH    AR5
00C0 C006              PUSH    AR6
00C2 C007              PUSH    AR7
00C4 900000      R     MOV     DPTR,#adcCounts
00C7 120000      E     LCALL   ?C?LLDXDATA
00CA 900000      R     MOV     DPTR,#A
00CD 120000      E     LCALL   ?C?LLDXDATA0
00D0 120000      E     LCALL   ?C?LMUL
00D3 D003              POP     AR3
00D5 D002              POP     AR2
00D7 D001              POP     AR1
00D9 D000              POP     AR0
00DB 120000      E     LCALL   ?C?SLDIV
00DE 900000      R     MOV     DPTR,#mVolts
00E1 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 916
00E4 900000      R     MOV     DPTR,#mVolts
00E7 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 917
00EA         ?C0051:
00EA 22                RET     
             ; FUNCTION _ADC_Side_Rangefinder_CountsTo_mVolts (END)

             ; FUNCTION _ADC_Side_Rangefinder_CountsTo_Volts (BEGIN)
                                           ; SOURCE LINE # 939
0000 900000      R     MOV     DPTR,#adcCounts
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 940
                                           ; SOURCE LINE # 942
0006 7F00              MOV     R7,#00H
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 53  

0008 7E00              MOV     R6,#00H
000A 7D00              MOV     R5,#00H
000C 7C00              MOV     R4,#00H
000E 900000      R     MOV     DPTR,#Volts
0011 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 945
0014 900000      R     MOV     DPTR,#adcCounts
0017 120000      E     LCALL   ?C?LLDXDATA
001A 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_Offset
001D 120000      E     LCALL   ?C?LLDXDATA0
0020 120000      E     LCALL   ?C?LSUB
0023 900000      R     MOV     DPTR,#adcCounts
0026 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 947
0029 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_CountsPerVolt
002C 120000      E     LCALL   ?C?LLDXDATA
002F EC                MOV     A,R4
0030 120000      E     LCALL   ?C?FCASTL
0033 C004              PUSH    AR4
0035 C005              PUSH    AR5
0037 C006              PUSH    AR6
0039 C007              PUSH    AR7
003B 900000      R     MOV     DPTR,#adcCounts
003E 120000      E     LCALL   ?C?LLDXDATA
0041 EC                MOV     A,R4
0042 120000      E     LCALL   ?C?FCASTL
0045 D003              POP     AR3
0047 D002              POP     AR2
0049 D001              POP     AR1
004B D000              POP     AR0
004D 120000      E     LCALL   ?C?FPDIV
0050 900000      R     MOV     DPTR,#Volts
0053 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 949
0056 900000      R     MOV     DPTR,#Volts
0059 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 950
005C         ?C0052:
005C 22                RET     
             ; FUNCTION _ADC_Side_Rangefinder_CountsTo_Volts (END)

             ; FUNCTION _ADC_Side_Rangefinder_CountsTo_uVolts (BEGIN)
                                           ; SOURCE LINE # 985
0000 900000      R     MOV     DPTR,#adcCounts
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 986
                                           ; SOURCE LINE # 988
0006 7F00              MOV     R7,#00H
0008 7E00              MOV     R6,#00H
000A 7D00              MOV     R5,#00H
000C 7C00              MOV     R4,#00H
000E 900000      R     MOV     DPTR,#uVolts
0011 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 990
0014 900000      R     MOV     DPTR,#resolution
0017 7410              MOV     A,#010H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 993
001A 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_Config
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F EF                MOV     A,R7
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 54  

0020 B40108            CJNE    A,#01H,?C0053
                                           ; SOURCE LINE # 994
                                           ; SOURCE LINE # 995
0023 900000      R     MOV     DPTR,#resolution
0026 7414              MOV     A,#014H
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 996
0029 8028              SJMP    ?C0054
002B         ?C0053:
                                           ; SOURCE LINE # 997
002B 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_Config
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 EF                MOV     A,R7
0031 B40208            CJNE    A,#02H,?C0055
                                           ; SOURCE LINE # 998
                                           ; SOURCE LINE # 999
0034 900000      R     MOV     DPTR,#resolution
0037 7410              MOV     A,#010H
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1000
003A 8017              SJMP    ?C0054
003C         ?C0055:
                                           ; SOURCE LINE # 1001
003C 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_Config
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 EF                MOV     A,R7
0042 B40308            CJNE    A,#03H,?C0057
                                           ; SOURCE LINE # 1002
                                           ; SOURCE LINE # 1003
0045 900000      R     MOV     DPTR,#resolution
0048 7410              MOV     A,#010H
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1004
004B 8006              SJMP    ?C0054
004D         ?C0057:
                                           ; SOURCE LINE # 1006
                                           ; SOURCE LINE # 1007
004D 900000      R     MOV     DPTR,#resolution
0050 7410              MOV     A,#010H
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1008
0053         ?C0054:
                                           ; SOURCE LINE # 1010
0053 900000      R     MOV     DPTR,#resolution
0056 E0                MOVX    A,@DPTR
0057 FF                MOV     R7,A
0058 EF                MOV     A,R7
0059 C3                CLR     C
005A 940C              SUBB    A,#0CH
005C 501E              JNC     ?C0059
                                           ; SOURCE LINE # 1011
                                           ; SOURCE LINE # 1012
005E 7F40              MOV     R7,#040H
0060 7E42              MOV     R6,#042H
0062 7D0F              MOV     R5,#0FH
0064 7C00              MOV     R4,#00H
0066 900000      R     MOV     DPTR,#A
0069 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1013
006C 7F01              MOV     R7,#01H
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 55  

006E 7E00              MOV     R6,#00H
0070 7D00              MOV     R5,#00H
0072 7C00              MOV     R4,#00H
0074 900000      R     MOV     DPTR,#B
0077 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1014
007A 806E              SJMP    ?C0060
007C         ?C0059:
                                           ; SOURCE LINE # 1015
007C 900000      R     MOV     DPTR,#resolution
007F E0                MOVX    A,@DPTR
0080 FF                MOV     R7,A
0081 EF                MOV     A,R7
0082 C3                CLR     C
0083 940F              SUBB    A,#0FH
0085 501E              JNC     ?C0061
                                           ; SOURCE LINE # 1016
                                           ; SOURCE LINE # 1017
0087 7FA0              MOV     R7,#0A0H
0089 7E86              MOV     R6,#086H
008B 7D01              MOV     R5,#01H
008D 7C00              MOV     R4,#00H
008F 900000      R     MOV     DPTR,#A
0092 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1018
0095 7F0A              MOV     R7,#0AH
0097 7E00              MOV     R6,#00H
0099 7D00              MOV     R5,#00H
009B 7C00              MOV     R4,#00H
009D 900000      R     MOV     DPTR,#B
00A0 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1019
00A3 8045              SJMP    ?C0060
00A5         ?C0061:
                                           ; SOURCE LINE # 1020
00A5 900000      R     MOV     DPTR,#resolution
00A8 E0                MOVX    A,@DPTR
00A9 FF                MOV     R7,A
00AA EF                MOV     A,R7
00AB C3                CLR     C
00AC 9412              SUBB    A,#012H
00AE 501E              JNC     ?C0063
                                           ; SOURCE LINE # 1021
                                           ; SOURCE LINE # 1022
00B0 7F10              MOV     R7,#010H
00B2 7E27              MOV     R6,#027H
00B4 7D00              MOV     R5,#00H
00B6 7C00              MOV     R4,#00H
00B8 900000      R     MOV     DPTR,#A
00BB 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1023
00BE 7F64              MOV     R7,#064H
00C0 7E00              MOV     R6,#00H
00C2 7D00              MOV     R5,#00H
00C4 7C00              MOV     R4,#00H
00C6 900000      R     MOV     DPTR,#B
00C9 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1024
00CC 801C              SJMP    ?C0060
00CE         ?C0063:
                                           ; SOURCE LINE # 1026
                                           ; SOURCE LINE # 1027
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 56  

00CE 7FE8              MOV     R7,#0E8H
00D0 7E03              MOV     R6,#03H
00D2 7D00              MOV     R5,#00H
00D4 7C00              MOV     R4,#00H
00D6 900000      R     MOV     DPTR,#A
00D9 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1028
00DC 7FE8              MOV     R7,#0E8H
00DE 7E03              MOV     R6,#03H
00E0 7D00              MOV     R5,#00H
00E2 7C00              MOV     R4,#00H
00E4 900000      R     MOV     DPTR,#B
00E7 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1029
00EA         ?C0060:
                                           ; SOURCE LINE # 1032
00EA 900000      R     MOV     DPTR,#adcCounts
00ED 120000      E     LCALL   ?C?LLDXDATA
00F0 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_Offset
00F3 120000      E     LCALL   ?C?LLDXDATA0
00F6 120000      E     LCALL   ?C?LSUB
00F9 900000      R     MOV     DPTR,#adcCounts
00FC 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1034
00FF 900000      R     MOV     DPTR,#B
0102 120000      E     LCALL   ?C?LLDXDATA0
0105 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_CountsPerVolt
0108 120000      E     LCALL   ?C?LLDXDATA
010B 120000      E     LCALL   ?C?SLDIV
010E C004              PUSH    AR4
0110 C005              PUSH    AR5
0112 C006              PUSH    AR6
0114 C007              PUSH    AR7
0116 900000      R     MOV     DPTR,#adcCounts
0119 120000      E     LCALL   ?C?LLDXDATA
011C 900000      R     MOV     DPTR,#A
011F 120000      E     LCALL   ?C?LLDXDATA0
0122 120000      E     LCALL   ?C?LMUL
0125 D003              POP     AR3
0127 D002              POP     AR2
0129 D001              POP     AR1
012B D000              POP     AR0
012D 120000      E     LCALL   ?C?SLDIV
0130 900000      R     MOV     DPTR,#uVolts
0133 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1036
0136 900000      R     MOV     DPTR,#uVolts
0139 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 1037
013C         ?C0065:
013C 22                RET     
             ; FUNCTION _ADC_Side_Rangefinder_CountsTo_uVolts (END)

             ; FUNCTION ADC_Side_Rangefinder_IRQ_Start (BEGIN)
                                           ; SOURCE LINE # 1056
                                           ; SOURCE LINE # 1057
                                           ; SOURCE LINE # 1059
0000 7F1D              MOV     R7,#01DH
0002 120000      E     LCALL   _?CyIntDisable
                                           ; SOURCE LINE # 1062
0005 7C00        E     MOV     R4,#HIGH ADC_Side_Rangefinder_ISR1
0007 7D00        E     MOV     R5,#LOW ADC_Side_Rangefinder_ISR1
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 57  

0009 7F1D              MOV     R7,#01DH
000B 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 1065
000E 7D07              MOV     R5,#07H
0010 7F1D              MOV     R7,#01DH
0012 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 1068
0015 7F1D              MOV     R7,#01DH
0017 120000      E     LCALL   _?CyIntEnable
                                           ; SOURCE LINE # 1069
001A 22                RET     
             ; FUNCTION ADC_Side_Rangefinder_IRQ_Start (END)

             ; FUNCTION _ADC_Side_Rangefinder_InitConfig (BEGIN)
                                           ; SOURCE LINE # 1090
0000 900000      R     MOV     DPTR,#config
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1091
                                           ; SOURCE LINE # 1092
0005 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_stopConversion
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1094
000A 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_initVar
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 7051              JNZ     ?C0067
                                           ; SOURCE LINE # 1095
                                           ; SOURCE LINE # 1096
0012 905896            MOV     DPTR,#05896H
0015 7407              MOV     A,#07H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1097
0018 905897            MOV     DPTR,#05897H
001B E4                CLR     A
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1098
001D 90589E            MOV     DPTR,#0589EH
0020 E4                CLR     A
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1099
0022 905B07            MOV     DPTR,#05B07H
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 EF                MOV     A,R7
0028 4418              ORL     A,#018H
002A FF                MOV     R7,A
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1100
002D 905893            MOV     DPTR,#05893H
0030 E4                CLR     A
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1102
0032 905B88            MOV     DPTR,#05B88H
0035 E4                CLR     A
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1103
0037 905B89            MOV     DPTR,#05B89H
003A E4                CLR     A
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 58  

003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1105
003C 905880            MOV     DPTR,#05880H
003F 740A              MOV     A,#0AH
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1106
0042 905881            MOV     DPTR,#05881H
0045 E4                CLR     A
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1107
0047 905882            MOV     DPTR,#05882H
004A 747A              MOV     A,#07AH
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1108
004D 905883            MOV     DPTR,#05883H
0050 E4                CLR     A
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1109
0052 90588D            MOV     DPTR,#0588DH
0055 E4                CLR     A
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1111
0057 904E01            MOV     DPTR,#04E01H
005A 7414              MOV     A,#014H
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1112
005D 904E14            MOV     DPTR,#04E14H
0060 7401              MOV     A,#01H
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1113
0063         ?C0067:
                                           ; SOURCE LINE # 1115
0063 900000      R     MOV     DPTR,#config
0066 E0                MOVX    A,@DPTR
0067 FF                MOV     R7,A
0068 EF                MOV     A,R7
0069 6401              XRL     A,#01H
006B 6003              JZ      $ + 5H
006D 020000      R     LJMP    ?C0069
                                           ; SOURCE LINE # 1116
                                           ; SOURCE LINE # 1118
0070 904E00            MOV     DPTR,#04E00H
0073 7478              MOV     A,#078H
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1119
0076 904E02            MOV     DPTR,#04E02H
0079 E4                CLR     A
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1120
007B 904E03            MOV     DPTR,#04E03H
007E 740A              MOV     A,#0AH
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1121
0081 904E04            MOV     DPTR,#04E04H
0084 747F              MOV     A,#07FH
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1122
0087 904E05            MOV     DPTR,#04E05H
008A E4                CLR     A
008B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1123
008C 904E06            MOV     DPTR,#04E06H
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 59  

008F 747F              MOV     A,#07FH
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1124
0092 904E08            MOV     DPTR,#04E08H
0095 74AE              MOV     A,#0AEH
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1125
0098 904E09            MOV     DPTR,#04E09H
009B 7411              MOV     A,#011H
009D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1126
009E 904E0A            MOV     DPTR,#04E0AH
00A1 7407              MOV     A,#07H
00A3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1128
00A4 905884            MOV     DPTR,#05884H
00A7 7450              MOV     A,#050H
00A9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1129
00AA 905885            MOV     DPTR,#05885H
00AD 7427              MOV     A,#027H
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1130
00B0 905886            MOV     DPTR,#05886H
00B3 742C              MOV     A,#02CH
00B5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1131
00B6 905887            MOV     DPTR,#05887H
00B9 E4                CLR     A
00BA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1132
00BB 905888            MOV     DPTR,#05888H
00BE 7412              MOV     A,#012H
00C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1133
00C1 905889            MOV     DPTR,#05889H
00C4 7413              MOV     A,#013H
00C6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1134
00C7 90588A            MOV     DPTR,#0588AH
00CA 7455              MOV     A,#055H
00CC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1135
00CD 90588B            MOV     DPTR,#0588BH
00D0 745A              MOV     A,#05AH
00D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1136
00D3 90588C            MOV     DPTR,#0588CH
00D6 7405              MOV     A,#05H
00D8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1137
00D9 90588E            MOV     DPTR,#0588EH
00DC 7402              MOV     A,#02H
00DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1138
00DF 90588F            MOV     DPTR,#0588FH
00E2 7412              MOV     A,#012H
00E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1139
00E5 905890            MOV     DPTR,#05890H
00E8 7428              MOV     A,#028H
00EA F0                MOVX    @DPTR,A
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 60  

                                           ; SOURCE LINE # 1140
00EB 905891            MOV     DPTR,#05891H
00EE 74EB              MOV     A,#0EBH
00F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1142
00F1 7F4C              MOV     R7,#04CH
00F3 120000      R     LCALL   _ADC_Side_Rangefinder_SetDSMRef0Reg
                                           ; SOURCE LINE # 1143
00F6 905894            MOV     DPTR,#05894H
00F9 7458              MOV     A,#058H
00FB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1144
00FC 905895            MOV     DPTR,#05895H
00FF E4                CLR     A
0100 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1146
0101 90589A            MOV     DPTR,#0589AH
0104 7405              MOV     A,#05H
0106 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1147
0107 90589B            MOV     DPTR,#0589BH
010A 7401              MOV     A,#01H
010C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1148
010D 90589C            MOV     DPTR,#0589CH
0110 E4                CLR     A
0111 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1149
0112 90589D            MOV     DPTR,#0589DH
0115 740A              MOV     A,#0AH
0117 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1161
0118 7F01              MOV     R7,#01H
011A 120000      E     LCALL   _ADC_Side_Rangefinder_AMux_Select
                                           ; SOURCE LINE # 1176
011D 7F00              MOV     R7,#00H
011F 7ED0              MOV     R6,#0D0H
0121 7D07              MOV     R5,#07H
0123 7C00              MOV     R4,#00H
0125 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_CountsPerVolt
0128 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1179
012B 7D07              MOV     R5,#07H
012D 7F1D              MOV     R7,#01DH
012F 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 1180
0132 7C00        E     MOV     R4,#HIGH ADC_Side_Rangefinder_ISR1
0134 7D00        E     MOV     R5,#LOW ADC_Side_Rangefinder_ISR1
0136 7F1D              MOV     R7,#01DH
0138 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 1181
013B 7F1D              MOV     R7,#01DH
013D 120000      E     LCALL   _?CyIntEnable
                                           ; SOURCE LINE # 1182
                                           ; SOURCE LINE # 1399
0140         ?C0069:
0140 22                RET     
             ; FUNCTION _ADC_Side_Rangefinder_InitConfig (END)

             ; FUNCTION _ADC_Side_Rangefinder_RoundValue (BEGIN)
                                           ; SOURCE LINE # 1418
0000 900000      R     MOV     DPTR,#busClockFreq
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 61  

0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1420
                                           ; SOURCE LINE # 1423
0006 7F0A              MOV     R7,#0AH
0008 7E00              MOV     R6,#00H
000A 7D00              MOV     R5,#00H
000C 7C00              MOV     R4,#00H
000E 900000      R     MOV     DPTR,#busClockFreq
0011 120000      E     LCALL   ?C?LLDXDATA0
0014 120000      E     LCALL   ?C?LMUL
0017 900000      R     MOV     DPTR,#clockFreq
001A 120000      E     LCALL   ?C?LLDXDATA0
001D 120000      E     LCALL   ?C?ULDIV
0020 900000      R     MOV     DPTR,#divider1
0023 EE                MOV     A,R6
0024 F0                MOVX    @DPTR,A
0025 A3                INC     DPTR
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1424
0028 900000      R     MOV     DPTR,#clockFreq
002B 120000      E     LCALL   ?C?LLDXDATA0
002E 900000      R     MOV     DPTR,#busClockFreq
0031 120000      E     LCALL   ?C?LLDXDATA
0034 120000      E     LCALL   ?C?ULDIV
0037 900000      R     MOV     DPTR,#divider2
003A EE                MOV     A,R6
003B F0                MOVX    @DPTR,A
003C A3                INC     DPTR
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1425
003F 900000      R     MOV     DPTR,#divider2
0042 E0                MOVX    A,@DPTR
0043 FE                MOV     R6,A
0044 A3                INC     DPTR
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 7C00              MOV     R4,#00H
0049 7D0A              MOV     R5,#0AH
004B 120000      E     LCALL   ?C?IMUL
004E 900000      R     MOV     DPTR,#divider1
0051 E0                MOVX    A,@DPTR
0052 FC                MOV     R4,A
0053 A3                INC     DPTR
0054 E0                MOVX    A,@DPTR
0055 FD                MOV     R5,A
0056 C3                CLR     C
0057 ED                MOV     A,R5
0058 9F                SUBB    A,R7
0059 FF                MOV     R7,A
005A EC                MOV     A,R4
005B 9E                SUBB    A,R6
005C FE                MOV     R6,A
005D C3                CLR     C
005E EF                MOV     A,R7
005F 9405              SUBB    A,#05H
0061 EE                MOV     A,R6
0062 9400              SUBB    A,#00H
0064 400A              JC      ?C0070
                                           ; SOURCE LINE # 1426
                                           ; SOURCE LINE # 1427
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 62  

0066 900000      R     MOV     DPTR,#divider2
0069 E4                CLR     A
006A 75F001            MOV     B,#01H
006D 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1428
0070         ?C0070:
                                           ; SOURCE LINE # 1429
0070 900000      R     MOV     DPTR,#divider2
0073 E0                MOVX    A,@DPTR
0074 FE                MOV     R6,A
0075 A3                INC     DPTR
0076 E0                MOVX    A,@DPTR
0077 FF                MOV     R7,A
                                           ; SOURCE LINE # 1430
0078         ?C0071:
0078 22                RET     
             ; FUNCTION _ADC_Side_Rangefinder_RoundValue (END)

             ; FUNCTION _ADC_Side_Rangefinder_SelectConfiguration (BEGIN)
                                           ; SOURCE LINE # 1451
0000 900000      R     MOV     DPTR,#config
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#restart
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1453
                                           ; SOURCE LINE # 1454
000A 900000      R     MOV     DPTR,#inputRange
000D E4                CLR     A
000E F0                MOVX    @DPTR,A
000F 900000      R     MOV     DPTR,#resolution
0012 7410              MOV     A,#010H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1455
0015 900000      R     MOV     DPTR,#idealGain
0018 E4                CLR     A
0019 F0                MOVX    @DPTR,A
001A A3                INC     DPTR
001B E4                CLR     A
001C F0                MOVX    @DPTR,A
001D 900000      R     MOV     DPTR,#adcClockDivider
0020 E4                CLR     A
0021 F0                MOVX    @DPTR,A
0022 A3                INC     DPTR
0023 7401              MOV     A,#01H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1456
0026 900000      R     MOV     DPTR,#cpClockDivider
0029 E4                CLR     A
002A F0                MOVX    @DPTR,A
002B A3                INC     DPTR
002C 7401              MOV     A,#01H
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1457
002F 900000      R     MOV     DPTR,#idealOddGain
0032 E4                CLR     A
0033 F0                MOVX    @DPTR,A
0034 A3                INC     DPTR
0035 E4                CLR     A
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1460
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 63  

0037 900000      R     MOV     DPTR,#config
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C EF                MOV     A,R7
003D D3                SETB    C
003E 9401              SUBB    A,#01H
0040 4003              JC      $ + 5H
0042 020000      R     LJMP    ?C0076
                                           ; SOURCE LINE # 1461
                                           ; SOURCE LINE # 1464
0045 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_initVar
0048 E0                MOVX    A,@DPTR
0049 FF                MOV     R7,A
004A EF                MOV     A,R7
004B 7006              JNZ     ?C0073
                                           ; SOURCE LINE # 1465
                                           ; SOURCE LINE # 1466
004D 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_started
0050 7401              MOV     A,#01H
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1467
0053         ?C0073:
                                           ; SOURCE LINE # 1470
0053 900000      R     MOV     DPTR,#config
0056 E0                MOVX    A,@DPTR
0057 FF                MOV     R7,A
0058 900000      R     MOV     DPTR,#ADC_Side_Rangefinder_Config
005B EF                MOV     A,R7
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1473
005D 120000      R     LCALL   ADC_Side_Rangefinder_Stop
                                           ; SOURCE LINE # 1482
0060 900000      R     MOV     DPTR,#config
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 120000      R     LCALL   _ADC_Side_Rangefinder_InitConfig
                                           ; SOURCE LINE # 1485
0068 900000      R     MOV     DPTR,#config
006B E0                MOVX    A,@DPTR
006C FF                MOV     R7,A
006D EF                MOV     A,R7
006E 6401              XRL     A,#01H
0070 6003              JZ      $ + 5H
0072 020000      R     LJMP    ?C0074
                                           ; SOURCE LINE # 1486
                                           ; SOURCE LINE # 1487
0075 900000      R     MOV     DPTR,#inputRange
0078 7401              MOV     A,#01H
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1488
007B 900000      R     MOV     DPTR,#resolution
007E 7414              MOV     A,#014H
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1489
0081 900000      R     MOV     DPTR,#idealGain
0084 7490              MOV     A,#090H
0086 F0                MOVX    @DPTR,A
0087 A3                INC     DPTR
0088 74DB              MOV     A,#0DBH
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1490
008B 900000      R     MOV     DPTR,#idealOddGain
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 64  

008E 7480              MOV     A,#080H
0090 F0                MOVX    @DPTR,A
0091 A3                INC     DPTR
0092 E4                CLR     A
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1492
0094 7F00              MOV     R7,#00H
0096 7E36              MOV     R6,#036H
0098 7D6E              MOV     R5,#06EH
009A 7C01              MOV     R4,#01H
009C C004              PUSH    AR4
009E C005              PUSH    AR5
00A0 C006              PUSH    AR6
00A2 C007              PUSH    AR7
00A4 7F00              MOV     R7,#00H
00A6 7E00              MOV     R6,#00H
00A8 7D19              MOV     R5,#019H
00AA 7C00              MOV     R4,#00H
00AC 900000      R     MOV     DPTR,#?_ADC_Side_Rangefinder_RoundValue?BYTE+04H
00AF 120000      E     LCALL   ?C?LSTXDATA
00B2 D007              POP     AR7
00B4 D006              POP     AR6
00B6 D005              POP     AR5
00B8 D004              POP     AR4
00BA 120000      R     LCALL   _ADC_Side_Rangefinder_RoundValue
00BD 900000      R     MOV     DPTR,#adcClockDivider
00C0 EE                MOV     A,R6
00C1 F0                MOVX    @DPTR,A
00C2 A3                INC     DPTR
00C3 EF                MOV     A,R7
00C4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1494
00C5 7F00              MOV     R7,#00H
00C7 7E36              MOV     R6,#036H
00C9 7D6E              MOV     R5,#06EH
00CB 7C01              MOV     R4,#01H
00CD C004              PUSH    AR4
00CF C005              PUSH    AR5
00D1 C006              PUSH    AR6
00D3 C007              PUSH    AR7
00D5 7F00              MOV     R7,#00H
00D7 7E00              MOV     R6,#00H
00D9 7D64              MOV     R5,#064H
00DB 7C00              MOV     R4,#00H
00DD 900000      R     MOV     DPTR,#?_ADC_Side_Rangefinder_RoundValue?BYTE+04H
00E0 120000      E     LCALL   ?C?LSTXDATA
00E3 D007              POP     AR7
00E5 D006              POP     AR6
00E7 D005              POP     AR5
00E9 D004              POP     AR4
00EB 120000      R     LCALL   _ADC_Side_Rangefinder_RoundValue
00EE 900000      R     MOV     DPTR,#cpClockDivider
00F1 EE                MOV     A,R6
00F2 F0                MOVX    @DPTR,A
00F3 A3                INC     DPTR
00F4 EF                MOV     A,R7
00F5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1495
00F6         ?C0074:
                                           ; SOURCE LINE # 1539
00F6 900000      R     MOV     DPTR,#adcClockDivider
00F9 74FF              MOV     A,#0FFH
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 65  

00FB 75F0FF            MOV     B,#0FFH
00FE 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1542
0101 900000      R     MOV     DPTR,#adcClockDivider
0104 E0                MOVX    A,@DPTR
0105 FE                MOV     R6,A
0106 A3                INC     DPTR
0107 E0                MOVX    A,@DPTR
0108 FF                MOV     R7,A
0109 7D01              MOV     R5,#01H
010B 120000      E     LCALL   _ADC_Side_Rangefinder_theACLK_SetDividerRegister
                                           ; SOURCE LINE # 1545
010E 900000      R     MOV     DPTR,#cpClockDivider
0111 74FF              MOV     A,#0FFH
0113 75F0FF            MOV     B,#0FFH
0116 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1547
0119 900000      R     MOV     DPTR,#cpClockDivider
011C E0                MOVX    A,@DPTR
011D FE                MOV     R6,A
011E A3                INC     DPTR
011F E0                MOVX    A,@DPTR
0120 FF                MOV     R7,A
0121 7D01              MOV     R5,#01H
0123 120000      E     LCALL   _ADC_Side_Rangefinder_Ext_CP_Clk_SetDividerRegister
                                           ; SOURCE LINE # 1550
0126 900000      R     MOV     DPTR,#inputRange
0129 E0                MOVX    A,@DPTR
012A FF                MOV     R7,A
012B 900000      R     MOV     DPTR,#idealGain
012E E0                MOVX    A,@DPTR
012F FC                MOV     R4,A
0130 A3                INC     DPTR
0131 E0                MOVX    A,@DPTR
0132 FD                MOV     R5,A
0133 900000      R     MOV     DPTR,#idealOddGain
0136 E0                MOVX    A,@DPTR
0137 FA                MOV     R2,A
0138 A3                INC     DPTR
0139 E0                MOVX    A,@DPTR
013A FB                MOV     R3,A
013B 900000      R     MOV     DPTR,#resolution
013E E0                MOVX    A,@DPTR
013F FE                MOV     R6,A
0140 900000      R     MOV     DPTR,#?_ADC_Side_Rangefinder_GainCompensation?BYTE+05H
0143 EE                MOV     A,R6
0144 F0                MOVX    @DPTR,A
0145 120000      R     LCALL   _ADC_Side_Rangefinder_GainCompensation
                                           ; SOURCE LINE # 1552
0148 900000      R     MOV     DPTR,#restart
014B E0                MOVX    A,@DPTR
014C FF                MOV     R7,A
014D EF                MOV     A,R7
014E B40106            CJNE    A,#01H,?C0076
                                           ; SOURCE LINE # 1553
                                           ; SOURCE LINE # 1555
0151 120000      R     LCALL   ADC_Side_Rangefinder_Start
                                           ; SOURCE LINE # 1644
0154 120000      R     LCALL   ADC_Side_Rangefinder_StartConvert
                                           ; SOURCE LINE # 1645
                                           ; SOURCE LINE # 1646
                                           ; SOURCE LINE # 1647
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 66  

0157         ?C0076:
0157 22                RET     
             ; FUNCTION _ADC_Side_Rangefinder_SelectConfiguration (END)

             ; FUNCTION _ADC_Side_Rangefinder_GainCompensation (BEGIN)
                                           ; SOURCE LINE # 1669
0000 900000      R     MOV     DPTR,#inputRange
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#IdealDecGain
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
000D 900000      R     MOV     DPTR,#IdealOddDecGain
0010 EA                MOV     A,R2
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 EB                MOV     A,R3
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1671
                                           ; SOURCE LINE # 1677
0015 900000      R     MOV     DPTR,#inputRange
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 120000      E     LCALL   ?C?CCASE
001E 0000        R     DW      ?C0078
0020 04                DB      04H
0021 0000        R     DW      ?C0081
0023 07                DB      07H
0024 0000        R     DW      ?C0084
0026 08                DB      08H
0027 0000        R     DW      ?C0087
0029 0A                DB      0AH
002A 0000              DW      00H
002C 0000        R     DW      ?C0090
                                           ; SOURCE LINE # 1678
                                           ; SOURCE LINE # 1679
002E         ?C0078:
                                           ; SOURCE LINE # 1682
002E 900000      R     MOV     DPTR,#resolution
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 EF                MOV     A,R7
0034 D3                SETB    C
0035 940F              SUBB    A,#0FH
0037 4011              JC      ?C0079
                                           ; SOURCE LINE # 1683
                                           ; SOURCE LINE # 1684
0039 7B0C              MOV     R3,#0CH
003B 7A01              MOV     R2,#01H
003D 7918              MOV     R1,#018H
003F 120000      E     LCALL   _cyread8
0042 900000      R     MOV     DPTR,#flash
0045 EF                MOV     A,R7
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1685
0047 020000      R     LJMP    ?C0077
004A         ?C0079:
                                           ; SOURCE LINE # 1687
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 67  

                                           ; SOURCE LINE # 1688
004A 7B0C              MOV     R3,#0CH
004C 7A01              MOV     R2,#01H
004E 791C              MOV     R1,#01CH
0050 120000      E     LCALL   _cyread8
0053 900000      R     MOV     DPTR,#flash
0056 EF                MOV     A,R7
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1689
                                           ; SOURCE LINE # 1690
0058 020000      R     LJMP    ?C0077
                                           ; SOURCE LINE # 1692
005B         ?C0081:
                                           ; SOURCE LINE # 1695
005B 900000      R     MOV     DPTR,#resolution
005E E0                MOVX    A,@DPTR
005F FF                MOV     R7,A
0060 EF                MOV     A,R7
0061 D3                SETB    C
0062 940F              SUBB    A,#0FH
0064 4010              JC      ?C0082
                                           ; SOURCE LINE # 1696
                                           ; SOURCE LINE # 1697
0066 7B0C              MOV     R3,#0CH
0068 7A01              MOV     R2,#01H
006A 7919              MOV     R1,#019H
006C 120000      E     LCALL   _cyread8
006F 900000      R     MOV     DPTR,#flash
0072 EF                MOV     A,R7
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1698
0074 806B              SJMP    ?C0077
0076         ?C0082:
                                           ; SOURCE LINE # 1700
                                           ; SOURCE LINE # 1701
0076 7B0C              MOV     R3,#0CH
0078 7A01              MOV     R2,#01H
007A 791D              MOV     R1,#01DH
007C 120000      E     LCALL   _cyread8
007F 900000      R     MOV     DPTR,#flash
0082 EF                MOV     A,R7
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1702
                                           ; SOURCE LINE # 1703
0084 805B              SJMP    ?C0077
                                           ; SOURCE LINE # 1705
0086         ?C0084:
                                           ; SOURCE LINE # 1708
0086 900000      R     MOV     DPTR,#resolution
0089 E0                MOVX    A,@DPTR
008A FF                MOV     R7,A
008B EF                MOV     A,R7
008C D3                SETB    C
008D 940F              SUBB    A,#0FH
008F 4010              JC      ?C0085
                                           ; SOURCE LINE # 1709
                                           ; SOURCE LINE # 1710
0091 7B0C              MOV     R3,#0CH
0093 7A01              MOV     R2,#01H
0095 791A              MOV     R1,#01AH
0097 120000      E     LCALL   _cyread8
009A 900000      R     MOV     DPTR,#flash
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 68  

009D EF                MOV     A,R7
009E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1711
009F 8040              SJMP    ?C0077
00A1         ?C0085:
                                           ; SOURCE LINE # 1713
                                           ; SOURCE LINE # 1714
00A1 7B0C              MOV     R3,#0CH
00A3 7A01              MOV     R2,#01H
00A5 791E              MOV     R1,#01EH
00A7 120000      E     LCALL   _cyread8
00AA 900000      R     MOV     DPTR,#flash
00AD EF                MOV     A,R7
00AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1715
                                           ; SOURCE LINE # 1716
00AF 8030              SJMP    ?C0077
                                           ; SOURCE LINE # 1718
00B1         ?C0087:
                                           ; SOURCE LINE # 1721
00B1 900000      R     MOV     DPTR,#resolution
00B4 E0                MOVX    A,@DPTR
00B5 FF                MOV     R7,A
00B6 EF                MOV     A,R7
00B7 D3                SETB    C
00B8 940F              SUBB    A,#0FH
00BA 4010              JC      ?C0088
                                           ; SOURCE LINE # 1722
                                           ; SOURCE LINE # 1723
00BC 7B0C              MOV     R3,#0CH
00BE 7A01              MOV     R2,#01H
00C0 791B              MOV     R1,#01BH
00C2 120000      E     LCALL   _cyread8
00C5 900000      R     MOV     DPTR,#flash
00C8 EF                MOV     A,R7
00C9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1724
00CA 8015              SJMP    ?C0077
00CC         ?C0088:
                                           ; SOURCE LINE # 1726
                                           ; SOURCE LINE # 1727
00CC 7B0C              MOV     R3,#0CH
00CE 7A01              MOV     R2,#01H
00D0 791F              MOV     R1,#01FH
00D2 120000      E     LCALL   _cyread8
00D5 900000      R     MOV     DPTR,#flash
00D8 EF                MOV     A,R7
00D9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1728
                                           ; SOURCE LINE # 1729
00DA 8005              SJMP    ?C0077
                                           ; SOURCE LINE # 1731
00DC         ?C0090:
                                           ; SOURCE LINE # 1732
00DC 900000      R     MOV     DPTR,#flash
00DF E4                CLR     A
00E0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1733
                                           ; SOURCE LINE # 1734
00E1         ?C0077:
                                           ; SOURCE LINE # 1735
00E1 900000      R     MOV     DPTR,#inputRange
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 69  

00E4 E0                MOVX    A,@DPTR
00E5 FF                MOV     R7,A
00E6 EF                MOV     A,R7
00E7 603B              JZ      ?C0092
00E9 900000      R     MOV     DPTR,#inputRange
00EC E0                MOVX    A,@DPTR
00ED FF                MOV     R7,A
00EE EF                MOV     A,R7
00EF 6401              XRL     A,#01H
00F1 6031              JZ      ?C0092
00F3 900000      R     MOV     DPTR,#inputRange
00F6 E0                MOVX    A,@DPTR
00F7 FF                MOV     R7,A
00F8 EF                MOV     A,R7
00F9 6402              XRL     A,#02H
00FB 6027              JZ      ?C0092
00FD 900000      R     MOV     DPTR,#inputRange
0100 E0                MOVX    A,@DPTR
0101 FF                MOV     R7,A
0102 EF                MOV     A,R7
0103 6403              XRL     A,#03H
0105 601D              JZ      ?C0092
0107 900000      R     MOV     DPTR,#inputRange
010A E0                MOVX    A,@DPTR
010B FF                MOV     R7,A
010C EF                MOV     A,R7
010D 6405              XRL     A,#05H
010F 6013              JZ      ?C0092
0111 900000      R     MOV     DPTR,#inputRange
0114 E0                MOVX    A,@DPTR
0115 FF                MOV     R7,A
0116 EF                MOV     A,R7
0117 6406              XRL     A,#06H
0119 6009              JZ      ?C0092
011B 900000      R     MOV     DPTR,#inputRange
011E E0                MOVX    A,@DPTR
011F FF                MOV     R7,A
0120 EF                MOV     A,R7
0121 B4090A            CJNE    A,#09H,?C0091
0124         ?C0092:
                                           ; SOURCE LINE # 1739
                                           ; SOURCE LINE # 1740
0124 900000      R     MOV     DPTR,#Normalised
0127 E4                CLR     A
0128 F0                MOVX    @DPTR,A
0129 A3                INC     DPTR
012A E4                CLR     A
012B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1741
012C 801D              SJMP    ?C0093
012E         ?C0091:
                                           ; SOURCE LINE # 1743
                                           ; SOURCE LINE # 1744
012E 900000      R     MOV     DPTR,#flash
0131 E0                MOVX    A,@DPTR
0132 FF                MOV     R7,A
0133 EF                MOV     A,R7
0134 33                RLC     A
0135 95E0              SUBB    A,ACC
0137 FE                MOV     R6,A
0138 EF                MOV     A,R7
0139 7805              MOV     R0,#05H
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 70  

013B         ?C0110:
013B C3                CLR     C
013C 33                RLC     A
013D CE                XCH     A,R6
013E 33                RLC     A
013F CE                XCH     A,R6
0140 D8F9              DJNZ    R0,?C0110
0142 FF                MOV     R7,A
0143 900000      R     MOV     DPTR,#Normalised
0146 EE                MOV     A,R6
0147 F0                MOVX    @DPTR,A
0148 A3                INC     DPTR
0149 EF                MOV     A,R7
014A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1745
014B         ?C0093:
                                           ; SOURCE LINE # 1748
014B 900000      R     MOV     DPTR,#Normalised
014E E0                MOVX    A,@DPTR
014F FE                MOV     R6,A
0150 A3                INC     DPTR
0151 E0                MOVX    A,@DPTR
0152 FF                MOV     R7,A
0153 900000      R     MOV     DPTR,#IdealDecGain
0156 E0                MOVX    A,@DPTR
0157 FC                MOV     R4,A
0158 A3                INC     DPTR
0159 E0                MOVX    A,@DPTR
015A FD                MOV     R5,A
015B ED                MOV     A,R5
015C 2F                ADD     A,R7
015D FF                MOV     R7,A
015E EC                MOV     A,R4
015F 3E                ADDC    A,R6
0160 FE                MOV     R6,A
0161 900000      R     MOV     DPTR,#GcorValue
0164 EE                MOV     A,R6
0165 F0                MOVX    @DPTR,A
0166 A3                INC     DPTR
0167 EF                MOV     A,R7
0168 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1749
0169 900000      R     MOV     DPTR,#IdealOddDecGain
016C E0                MOVX    A,@DPTR
016D FE                MOV     R6,A
016E A3                INC     DPTR
016F E0                MOVX    A,@DPTR
0170 FF                MOV     R7,A
0171 900000      R     MOV     DPTR,#GcorValue
0174 E0                MOVX    A,@DPTR
0175 FC                MOV     R4,A
0176 A3                INC     DPTR
0177 E0                MOVX    A,@DPTR
0178 FD                MOV     R5,A
0179 120000      E     LCALL   ?C?LIMUL
017C 900000      R     MOV     DPTR,#GcorTmp
017F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1750
0182 7B00              MOV     R3,#00H
0184 7A80              MOV     R2,#080H
0186 7900              MOV     R1,#00H
0188 7800              MOV     R0,#00H
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 71  

018A 900000      R     MOV     DPTR,#GcorTmp
018D 120000      E     LCALL   ?C?LLDXDATA
0190 120000      E     LCALL   ?C?ULDIV
0193 900000      R     MOV     DPTR,#GcorValue
0196 EE                MOV     A,R6
0197 F0                MOVX    @DPTR,A
0198 A3                INC     DPTR
0199 EF                MOV     A,R7
019A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1752
019B 900000      R     MOV     DPTR,#resolution
019E E0                MOVX    A,@DPTR
019F FF                MOV     R7,A
01A0 EF                MOV     A,R7
01A1 C3                CLR     C
01A2 940E              SUBB    A,#0EH
01A4 5037              JNC     ?C0094
                                           ; SOURCE LINE # 1753
                                           ; SOURCE LINE # 1754
01A6 900000      R     MOV     DPTR,#GcorValue
01A9 E0                MOVX    A,@DPTR
01AA FE                MOV     R6,A
01AB A3                INC     DPTR
01AC E0                MOVX    A,@DPTR
01AD FF                MOV     R7,A
01AE 900000      R     MOV     DPTR,#resolution
01B1 E0                MOVX    A,@DPTR
01B2 FD                MOV     R5,A
01B3 C3                CLR     C
01B4 740E              MOV     A,#0EH
01B6 9D                SUBB    A,R5
01B7 FD                MOV     R5,A
01B8 EF                MOV     A,R7
01B9 A805              MOV     R0,AR5
01BB 08                INC     R0
01BC 8005              SJMP    ?C0112
01BE         ?C0111:
01BE CE                XCH     A,R6
01BF C3                CLR     C
01C0 13                RRC     A
01C1 CE                XCH     A,R6
01C2 13                RRC     A
01C3         ?C0112:
01C3 D8F9              DJNZ    R0,?C0111
01C5 FF                MOV     R7,A
01C6 900000      R     MOV     DPTR,#GcorValue
01C9 EE                MOV     A,R6
01CA F0                MOVX    @DPTR,A
01CB A3                INC     DPTR
01CC EF                MOV     A,R7
01CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1755
01CE 900000      R     MOV     DPTR,#resolution
01D1 E0                MOVX    A,@DPTR
01D2 FF                MOV     R7,A
01D3 EF                MOV     A,R7
01D4 04                INC     A
01D5 FF                MOV     R7,A
01D6 904E0E            MOV     DPTR,#04E0EH
01D9 EF                MOV     A,R7
01DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1756
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 72  

01DB 8006              SJMP    ?C0095
01DD         ?C0094:
                                           ; SOURCE LINE # 1758
                                           ; SOURCE LINE # 1760
01DD 904E0E            MOV     DPTR,#04E0EH
01E0 740F              MOV     A,#0FH
01E2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1761
01E3         ?C0095:
                                           ; SOURCE LINE # 1764
01E3 900000      R     MOV     DPTR,#GcorValue
01E6 E0                MOVX    A,@DPTR
01E7 FE                MOV     R6,A
01E8 A3                INC     DPTR
01E9 E0                MOVX    A,@DPTR
01EA FF                MOV     R7,A
01EB 904E0C            MOV     DPTR,#04E0CH
01EE EF                MOV     A,R7
01EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1765
01F0 900000      R     MOV     DPTR,#GcorValue
01F3 E0                MOVX    A,@DPTR
01F4 FE                MOV     R6,A
01F5 A3                INC     DPTR
01F6 E0                MOVX    A,@DPTR
01F7 FF                MOV     R7,A
01F8 EE                MOV     A,R6
01F9 FF                MOV     R7,A
01FA 7E00              MOV     R6,#00H
01FC 904E0D            MOV     DPTR,#04E0DH
01FF EF                MOV     A,R7
0200 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1776
0201 22                RET     
             ; FUNCTION _ADC_Side_Rangefinder_GainCompensation (END)

             ; FUNCTION _ADC_Side_Rangefinder_SetDSMRef0Reg (BEGIN)
                                           ; SOURCE LINE # 1793
0000 900000      R     MOV     DPTR,#value
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1794
                                           ; SOURCE LINE # 1798
0005 9046F8            MOV     DPTR,#046F8H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 4403              ORL     A,#03H
000D FF                MOV     R7,A
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1799
0010 9046F9            MOV     DPTR,#046F9H
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 4403              ORL     A,#03H
0018 FF                MOV     R7,A
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1804
001B 900000      R     MOV     DPTR,#value
C51 COMPILER V9.03   ADC_SIDE_RANGEFINDER                                                  05/06/2015 20:01:01 PAGE 73  

001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 905892            MOV     DPTR,#05892H
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1807
0025 7F03              MOV     R7,#03H
0027 7E00              MOV     R6,#00H
0029 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1810
002C 9046F8            MOV     DPTR,#046F8H
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 54FC              ANL     A,#0FCH
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1811
0037 9046F9            MOV     DPTR,#046F9H
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C EF                MOV     A,R7
003D 54FC              ANL     A,#0FCH
003F FF                MOV     R7,A
0040 EF                MOV     A,R7
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1816
0042 22                RET     
             ; FUNCTION _ADC_Side_Rangefinder_SetDSMRef0Reg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3494    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     13     121
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
